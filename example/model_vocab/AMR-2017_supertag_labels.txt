_--TYPE--_
(d<root> / --LEX--)--TYPE--()
(s<root> / --LEX--  :ARG1 (p<s>))--TYPE--(s())
(p<root> / --LEX--  :mod-of (s<mod>))--TYPE--(mod())
(s<root> / --LEX--  :ARG0 (y<s>)  :ARG1 (a<o>))--TYPE--(o(), s())
(s<root> / --LEX--  :ARG1 (w<s>)  :ARG2 (d<o>))--TYPE--(o(), s())
(explicitanon0<root> / --LEX--  :polarity-of (e<mod>))--TYPE--(mod())
(s<root> / --LEX--  :ARG0 (y<s>))--TYPE--(s())
(c<root> / country  :name (n / --LEX--))--TYPE--()
(a<root> / --LEX--  :op1 (b<op1>)  :op2 (g<op2>))--TYPE--(op1(), op2())
(p<root> / person  :name (n / --LEX--))--TYPE--()
(explicitanon0<root> / --LEX--  :quant-of (b<mod>))--TYPE--(mod())
(n<root> / --LEX--  :time-of (p<mod>))--TYPE--(mod())
(s<root> / --LEX--  :degree-of (t<mod>))--TYPE--(mod())
(s<root> / --LEX--  :ARG2 (g<s>))--TYPE--(s())
(c<root> / --LEX--  :ARG0 (y<s>)  :ARG1 (m<o>))--TYPE--(o(s_UNIFY_s()), s())
(r<root> / --LEX--  :domain (q<dom>))--TYPE--(dom())
(explicitanon0<root> / --LEX--  :mode-of (c<mod>))--TYPE--(mod())
(b<root> / --LEX--  :location-of (h<mod>))--TYPE--(mod())
(m<root> / --LEX--  :poss (i<poss>))--TYPE--(poss())
(t<root> / --LEX--  :manner-of (h<mod>))--TYPE--(mod())
(b<root> / --LEX--  :ARG1 (i<o>)  :ARG2 (h<o2>)  :ARG0 (a<s>))--TYPE--(o(), o2(), s())
(a<root> / --LEX--  :op1 (c<op1>)  :op2 (l<op2>))--TYPE--(op1(s_UNIFY_s()), op2(s_UNIFY_s()))
(t<root> / --LEX--  :ARG0 (y<s>)  :ARG2 (i<o>))--TYPE--(o(), s())
(w<root> / --LEX--  :op1 (h<op1>)  :time-of (b<mod>))--TYPE--(mod(), op1())
(n<root> / --LEX--  :name-of (s<mod>))--TYPE--(mod())
(o2<root> / organization  :name (n / --LEX--))--TYPE--()
(c<root> / country  :name (n / --LEX--)  :mod-of (p<mod>))--TYPE--(mod())
(a<root> / --LEX--  :topic-of (w<mod>))--TYPE--(mod())
(o<root> / --LEX--  :ARG1 (w<s>)  :ARG2 (s<o>))--TYPE--(o(s_UNIFY_s()), s())
(p2<root> / person  :ARG0-of (e2 / --LEX--))--TYPE--()
(o<root> / --LEX--  :op1 (b<op1>))--TYPE--(op1())
(a<root> / --LEX--  :op2 (s<op2>)  :op1 (l<op1>)  :op3 (s2<op3>))--TYPE--(op1(), op2(), op3())
(m<root> / --LEX--  :snt2 (i<snt2>)  :snt1 (n<snt1>))--TYPE--(snt1(), snt2())
(a<root> / --LEX--  :op2 (f<op2>))--TYPE--(op2())
(h<root> / --LEX--  :part-of (i<poss>))--TYPE--(poss())
(t<root> / thing  :ARG1-of (d / --LEX--))--TYPE--()
(g<root> / government-organization  :ARG0-of (g2 / --LEX--))--TYPE--()
(g<root> / government-organization  :name (n / --LEX--))--TYPE--()
(h<root> / --LEX--  :ARG2 (m<o>))--TYPE--(o(s_UNIFY_s()))
(explicitanon0<root> / --LEX--  :year-of (d<mod>))--TYPE--(mod())
(t<root> / temporal-quantity  :unit (m / --LEX--))--TYPE--()
(p<root> / political-party  :name (n / --LEX--))--TYPE--()
(c<root> / company  :name (n / --LEX--))--TYPE--()
(s<root> / --LEX--  :ARG1 (i<s>)  :ARG3 (a<o>))--TYPE--(o(), s())
(c<root> / country  :name (n / --LEX--)  :location-of (l<mod>))--TYPE--(mod())
(f<root> / --LEX--  :ARG1 (p<o>))--TYPE--(o(s_UNIFY_s()))
(explicitanon4<root> / --LEX--  :day-of (d<mod>))--TYPE--(mod())
(p<root> / person  :ARG0-of (h / have-rel-role-91  :ARG2 (f / --LEX--)))--TYPE--()
(g<root> / --LEX--  :ARG2-of (h / have-org-role-91  :ARG1 (m<o>)  :ARG0 (p<s>)))--TYPE--(o(), s())
(o<root> / --LEX--  :purpose-of (a2<mod>))--TYPE--(mod())
(i<root> / --LEX--  :ARG1 (c<s>)  :purpose-of (d<mod>))--TYPE--(mod(), s())
(d<root> / date-entity  :month (explicitanon0 / --LEX--)  :time-of (p<mod>))--TYPE--(mod())
(m<root> / --LEX--  :unit-of (a<mod>))--TYPE--(mod())
(explicitanon1<root> / --LEX--  :month-of (d<mod>))--TYPE--(mod())
(l<root> / --LEX--  :ARG3 (b<s>))--TYPE--(s())
(c<root> / city  :name (n / --LEX--))--TYPE--()
(explicitanon0<root> / --LEX--  :value-of (o / ordinal-entity  :ord-of (p<mod>)))--TYPE--(mod())
(s<root> / --LEX--  :op1 (explicitanon0<op1>)  :quant-of (b<mod>))--TYPE--(mod(), op1())
(p<root> / person  :ARG0-of (w / --LEX--  :ARG1 (p2<s>)))--TYPE--(s())
(d<root> / date-entity  :year (explicitanon2 / --LEX--)  :time-of (m<mod>))--TYPE--(mod())
(p<root> / person  :ARG0-of (h / have-org-role-91  :ARG2 (o / --LEX--)  :ARG1 (n<s>)))--TYPE--(s())
(g<root> / government-organization  :ARG0-of (g2 / --LEX--  :ARG1 (c<s>)))--TYPE--(s())
(a<root> / --LEX--  :direction-of (r<mod>))--TYPE--(mod())
(c<root> / city  :name (n / --LEX--)  :location-of (l<mod>))--TYPE--(mod())
(p<root> / --LEX--  :compared-to-of (c<mod>))--TYPE--(mod())
(s<root> / --LEX--  :ARG1 (i2<o>)  :ARG0 (i<s>)  :purpose-of (c<mod>))--TYPE--(mod(), o(), s())
(explicitanon0<root> / --LEX--  :value-of (p<mod>))--TYPE--(mod())
(p2<root> / --LEX--  :ARG2-of (h / have-org-role-91  :ARG0 (p<s>)))--TYPE--(s())
(l<root> / --LEX--  :ARG0 (b<s>)  :ARG1 (t<o>))--TYPE--(o(poss_UNIFY_s()), s())
(n2<root> / --LEX--  :name-of (c2 / country  :mod-of (i<mod>)))--TYPE--(mod())
(explicitanon0<root> / --LEX--  :year-of (d / date-entity  :time-of (e<mod>)))--TYPE--(mod())
(p<root> / person  :ARG0-of (h / have-org-role-91  :ARG2 (e / --LEX--)))--TYPE--()
(s<root> / --LEX--  :source-of (d<mod>))--TYPE--(mod())
(n<root> / --LEX--  :op1 (explicitanon1<op1>)  :name-of (p<mod>))--TYPE--(mod(), op1())
(r<root> / religious-group  :name (n / --LEX--)  :mod-of (m2<mod>))--TYPE--(mod())
(explicitanon0<root> / --LEX--  :li-of (d<mod>))--TYPE--(mod())
(p<root> / person  :ARG1-of (l / --LEX--))--TYPE--()
(b<root> / --LEX--  :op1 (p2<op1>)  :location-of (p<mod>))--TYPE--(mod(), op1())
(m2<root> / monetary-quantity  :unit (d2 / --LEX--))--TYPE--()
(s<root> / --LEX--  :ARG1 (d<s>)  :time-of (m<mod>))--TYPE--(mod(), s())
(g<root> / --LEX--  :consist (r<mod>))--TYPE--(mod())
(t<root> / temporal-quantity  :unit (y / --LEX--)  :duration-of (s<mod>))--TYPE--(mod())
(t<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (y<o>)  :ARG2 (r<o2>))--TYPE--(o(), o2(s_UNIFY_o()), s())
(p<root> / publication  :name (n / --LEX--))--TYPE--()
(o<root> / --LEX--  :ARG1 (a<s>)  :condition-of (i<mod>))--TYPE--(mod(), s())
(b<root> / --LEX--  :ARG1 (p<s>)  :degree (m / more))--TYPE--(s())
(t2<root> / thing  :ARG1-of (d / --LEX--  :ARG0 (t<s>)))--TYPE--(s())
(i<root> / --LEX--  :beneficiary-of (n<mod>))--TYPE--(mod())
(h<root> / --LEX--  :ARG0 (p2<o>)  :ARG1 (t<s>))--TYPE--(o(), s())
(d<root> / date-entity  :year (explicitanon0 / --LEX--))--TYPE--()
(o<root> / --LEX--  :frequency-of (m<mod>))--TYPE--(mod())
(r<root> / --LEX--  :ARG1 (w<s>)  :topic-of (a<mod>))--TYPE--(mod(), s())
(b<root> / --LEX--  :op1 (n / now)  :time-of (t<mod>))--TYPE--(mod())
(m<root> / --LEX--  :ARG1 (m2<o>)  :ARG0 (t<s>)  :condition-of (g<mod>))--TYPE--(mod(), o(), s())
(a<root> / --LEX--  :op1 (s<op1>)  :op2 (r<op2>)  :op4 (e<op4>)  :op3 (h<op3>))--TYPE--(op1(), op2(), op3(), op4())
(p<root> / person  :quant (n / --LEX--))--TYPE--()
(p<root> / --LEX--  :ARG1 (b<s>)  :polarity (explicitanon0 / -))--TYPE--(s())
(g<root> / --LEX--  :ARG3 (t<o>)  :ARG0 (i<s>))--TYPE--(o(), s())
(g<root> / --LEX--  :ARG4 (n<o>)  :ARG1 (t<s>))--TYPE--(o(), s())
(b<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG1 (g<s>)  :ARG0 (y / you))--TYPE--(s())
(c<root> / --LEX--  :ARG3 (d<o2>)  :ARG1 (y<s>)  :ARG2 (i<o>))--TYPE--(o(), o2(), s())
(t<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (c<o>)  :ARG3 (h<o2>))--TYPE--(o(), o2(), s())
(m<root> / military  :name (n / --LEX--))--TYPE--()
(p<root> / person  :ARG0-of (h / have-rel-role-91  :ARG2 (s / --LEX--)  :ARG1 (v<s>)))--TYPE--(s())
(m<root> / --LEX--  :instrument-of (f<mod>))--TYPE--(mod())
(u<root> / url-entity  :value (explicitanon0 / --LEX--))--TYPE--()
(l<root> / --LEX--  :medium-of (a<mod>))--TYPE--(mod())
(t<root> / --LEX--  :ARG1 (t2<o>)  :ARG0 (i<s>)  :time-of (f<mod>))--TYPE--(mod(), o(), s())
(i<root> / --LEX--  :ARG1 (i2<s>)  :mod-of (m<mod>))--TYPE--(mod(), s())
(n<root> / --LEX--  :name-of (c2 / country  :location-of (c<mod>)))--TYPE--(mod())
(r<root> / --LEX--  :condition-of (c<mod>))--TYPE--(mod())
(b<root> / --LEX--  :duration-of (e<mod>))--TYPE--(mod())
(explicitanon0<root> / -  :polarity-of (n / --LEX--  :ARG1 (t<s>)))--TYPE--(s())
(t<root> / thing  :ARG2-of (a / --LEX--))--TYPE--()
(s<root> / --LEX--  :ARG1 (c<s>)  :ARG2 (p<o>))--TYPE--(o(), s(s_UNIFY_o()))
(w<root> / --LEX--  :ARG2 (t<o2>)  :ARG1 (w2<o>)  :ARG0 (i<s>))--TYPE--(o(s_UNIFY_o2()), o2(), s())
(m2<root> / monetary-quantity  :quant (explicitanon0 / --LEX--))--TYPE--()
(h<root> / have-org-role-91  :ARG1 (s<o>)  :ARG0 (h2<s>)  :ARG2 (j / --LEX--))--TYPE--(o(), s())
(h<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG0 (a<s>)  :ARG1 (p<o>))--TYPE--(o(), s())
(a<root> / --LEX--  :op1 (g<op1>)  :op2 (r<op2>))--TYPE--(op1(o_UNIFY_o(), s_UNIFY_s()), op2(o_UNIFY_o(), s_UNIFY_s()))
(d<root> / --LEX--  :op1 (c<op1>)  :op2 (g<op2>)  :time-of (e<mod>))--TYPE--(mod(), op1(), op2())
(w<root> / world-region  :name (n2 / --LEX--))--TYPE--()
(d<root> / date-entity  :day (explicitanon0 / --LEX--)  :time-of (r<mod>))--TYPE--(mod())
(l<root> / law  :name (n / --LEX--))--TYPE--()
(b<root> / --LEX--  :ARG1 (m<s>)  :manner-of (s<mod>))--TYPE--(mod(), s())
(t<root> / thing  :ARG2-of (c / --LEX--  :ARG1 (w<s>)))--TYPE--(s())
(d<root> / --LEX--  :ARG1 (b2<o>)  :ARG0 (b<s>))--TYPE--(o(o_UNIFY_s()), s())
(i<root> / --LEX--  :ARG0 (t<s>)  :ARG2 (f<o2>)  :ARG1 (a<o>))--TYPE--(o(), o2(s_UNIFY_s()), s())
(b2<root> / --LEX--  :ARG1 (b<s>)  :degree (m / most))--TYPE--(s())
(n<root> / --LEX--  :name-of (c2 / city  :location-of (l<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :op1 (t<op1>)  :duration-of (r<mod>))--TYPE--(mod(), op1())
(c2<root> / criminal-organization  :name (n / --LEX--))--TYPE--()
(g<root> / --LEX--  :ARG4 (t<o>)  :ARG0 (i<s>))--TYPE--(o(), s())
(b<root> / --LEX--  :op2 (r<op2>)  :op1 (h<op1>)  :location-of (d<mod>))--TYPE--(mod(), op1(), op2())
(t3<root> / thing  :ARG0-of (t / --LEX--  :ARG1 (t2<s>)))--TYPE--(s())
(t<root> / temporal-quantity  :quant (explicitanon0 / --LEX--))--TYPE--()
(t<root> / temporal-quantity  :unit (y / --LEX--)  :quant-of (b<mod>))--TYPE--(mod())
(p<root> / --LEX--  :polarity (explicitanon0 / -))--TYPE--()
(h<root> / --LEX--  :part-of (y<poss>)  :location-of (d<mod>))--TYPE--(mod(), poss())
(c<root> / cause-01  :ARG1 (t<s>)  :ARG0 (a / --LEX--))--TYPE--(s())
(r<root> / religious-group  :name (n / --LEX--))--TYPE--()
(p<root> / product  :name (n / --LEX--))--TYPE--()
(t<root> / --LEX--  :prep-in-of (y<mod>))--TYPE--(mod())
(t<root> / --LEX--  :degree (m / most)  :mod-of (g<mod>))--TYPE--(mod())
(a<root> / --LEX--  :op2 (c<op2>)  :op3 (b<op3>)  :op4 (t<op4>)  :op5 (t2<op5>)  :op1 (i<op1>))--TYPE--(op1(), op2(), op3(), op4(), op5())
(s<root> / state  :name (n / --LEX--))--TYPE--()
(t<root> / thing  :name (n / --LEX--))--TYPE--()
(p<root> / --LEX--  :ARG4 (i<s>))--TYPE--(s())
(l<root> / --LEX--  :ARG1 (p2<o>)  :ARG0 (t<s>)  :manner-of (d<mod>))--TYPE--(mod(), o(), s())
(a<root> / --LEX--  :ARG0-of (c / cause-01  :ARG1 (n<s>)))--TYPE--(s())
(n3<root> / --LEX--  :name-of (w / world-region  :location-of (s<mod>)))--TYPE--(mod())
(c<root> / continent  :name (n / --LEX--))--TYPE--()
(c<root> / --LEX--  :poss (a<poss>)  :domain (t<dom>))--TYPE--(dom(), poss())
(d<root> / date-entity  :month (explicitanon0 / --LEX--))--TYPE--()
(v<root> / --LEX--  :ARG0 (i2<s>)  :time-of (p<mod>))--TYPE--(mod(), s())
(m<root> / --LEX--  :snt2 (s<snt2>)  :snt3 (c2<snt3>)  :snt1 (c<snt1>))--TYPE--(snt1(), snt2(), snt3())
(a<root> / --LEX--  :op2 (e<op2>)  :op1 (c<op1>)  :topic-of (t<mod>))--TYPE--(mod(), op1(), op2())
(s<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (l<o>)  :ARG2 (m<o2>))--TYPE--(o(s_UNIFY_s()), o2(), s())
(p<root> / person  :name (n / --LEX--)  :mod-of (e<mod>))--TYPE--(mod())
(explicitanon0<root> / --LEX--  :polite-of (c2<mod>))--TYPE--(mod())
(d<root> / --LEX--  :ARG2 (s<o>)  :ARG0 (i<s>))--TYPE--(o(s_UNIFY_s()), s())
(r<root> / --LEX--  :ARG0 (h<s>  :ARG1-of r))--TYPE--(s())
(h2<root> / have-org-role-91  :ARG0 (h<s>)  :ARG2 (m / --LEX--))--TYPE--(s())
(s<root> / --LEX--  :ARG1 (r<s>)  :concession-of (c<mod>))--TYPE--(mod(), s())
(p<root> / percentage-entity  :value (explicitanon1 / --LEX--))--TYPE--()
(t<root> / --LEX--  :extent-of (k<mod>))--TYPE--(mod())
(p2<root> / political-party  :name (n / --LEX--)  :mod-of (p<mod>))--TYPE--(mod())
(w<root> / --LEX--  :poss (h<poss>)  :location-of (r<mod>))--TYPE--(mod(), poss())
(o<root> / --LEX--  :op1 (g<op1>)  :op2 (b<op2>)  :domain (a<dom>))--TYPE--(dom(), op1(), op2())
(g<root> / --LEX--  :example-of (a<mod>))--TYPE--(mod())
(n<root> / newspaper  :name (n2 / --LEX--))--TYPE--()
(i<root> / --LEX--  :prep-with-of (l<mod>))--TYPE--(mod())
(t<root> / thing  :ARG0-of (a / --LEX--))--TYPE--()
(r<root> / --LEX--  :concession-of (c<mod>))--TYPE--(mod())
(p<root> / --LEX--  :ARG0 (i<s>)  :condition-of (r<mod>))--TYPE--(mod(), s())
(y<root> / --LEX--  :accompanier-of (i<mod>))--TYPE--(mod())
(p<root> / political-movement  :name (n / --LEX--))--TYPE--()
(b<root> / broadcast-program  :name (n4 / --LEX--))--TYPE--()
(c2<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (s<o>)  :concession-of (s2<mod>))--TYPE--(mod(), o(), s())
(d<root> / --LEX--  :ARG0 (y<s>)  :ARG1 (g<o>)  :condition-of (h<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(u<root> / --LEX--  :ARG0 (y / you)  :ARG1 (s<s>))--TYPE--(s())
(w2<root> / --LEX--  :destination-of (w<mod>))--TYPE--(mod())
(o<root> / ordinal-entity  :value (explicitanon0 / --LEX--)  :ord-of (d<mod>))--TYPE--(mod())
(d2<root> / disease  :name (n2 / --LEX--))--TYPE--()
(d<root> / date-entity  :dayperiod (m / --LEX--)  :time-of (w<mod>))--TYPE--(mod())
(m<root> / mass-quantity  :unit (k / --LEX--)  :quant-of (h<mod>))--TYPE--(mod())
(b<root> / --LEX--  :ARG2-of (h / have-rel-role-91  :ARG0 (p<s>)))--TYPE--(s())
(p2<root> / political-movement  :name (n / --LEX--)  :mod-of (p<mod>))--TYPE--(mod())
(t2<root> / thing  :ARG1-of (g / --LEX--  :ARG2 (a<s>)))--TYPE--(s())
(a<root> / --LEX--  :op1 (p<op1>)  :mod-of (g<mod>))--TYPE--(mod(), op1())
(b<root> / --LEX--  :ARG0 (d<s>)  :purpose-of (s<mod>))--TYPE--(mod(), s())
(s<root> / state  :name (n2 / --LEX--)  :location-of (c<mod>))--TYPE--(mod())
(b<root> / --LEX--  :ARG1 (h<s>)  :ARG2 (a<o>)  :time-of (d<mod>))--TYPE--(mod(), o(), s())
(t<root> / temporal-quantity  :unit (y / --LEX--)  :age-of (p2<mod>))--TYPE--(mod())
(m2<root> / more  :degree-of (l / --LEX--  :ARG1 (m<s>)))--TYPE--(s())
(a<root> / --LEX--  :op2 (p<op2>)  :op3 (g<op3>)  :op1 (c<op1>))--TYPE--(op1(s_UNIFY_s()), op2(s_UNIFY_s()), op3(s_UNIFY_s()))
(c<root> / --LEX--  :ARG1 (w<o>)  :ARG0 (m<s>))--TYPE--(o(), s(s_UNIFY_o()))
(b<root> / --LEX--  :ARG1 (r<s>)  :compared-to-of (d<mod>))--TYPE--(mod(), s())
(t<root> / treaty  :name (n / --LEX--))--TYPE--()
(explicitanon0<root> / --LEX--  :op1-of (m / multiple  :quant-of (b<mod>)))--TYPE--(mod())
(e<root> / --LEX--  :op1 (r<op1>)  :concession-of (c<mod>))--TYPE--(mod(), op1())
(a<root> / --LEX--  :op2 (r<op2>)  :op1 (i<op1>)  :manner-of (s<mod>))--TYPE--(mod(), op1(), op2())
(r<root> / --LEX--  :ARG1 (m<o>)  :ARG2 (y<s>))--TYPE--(o(), s())
(f<root> / --LEX--  :ARG3 (r<o>)  :ARG1 (y<s>))--TYPE--(o(s_UNIFY_s()), s())
(a<root> / --LEX--  :op1 (e<op1>)  :op2 (o2<op2>)  :example-of (r<mod>))--TYPE--(mod(), op1(), op2())
(s<root> / --LEX--  :op2 (c<op2>)  :op1 (p<op1>)  :purpose-of (t<mod>))--TYPE--(mod(), op1(), op2())
(c<root> / --LEX--  :degree (m / more))--TYPE--()
(d<root> / distance-quantity  :unit (m / --LEX--))--TYPE--()
(explicitanon0<root> / -  :polarity-of (h / --LEX--  :mod-of (l<mod>)))--TYPE--(mod())
(b<root> / --LEX--  :ARG0 (h<s>)  :ARG1 (f<o>)  :ARG4 (p<o2>))--TYPE--(o(), o2(), s())
(t<root> / --LEX--  :path-of (d<mod>))--TYPE--(mod())
(f2<root> / --LEX--  :degree (m / more)  :mod-of (f<mod>))--TYPE--(mod())
(w<root> / world-region  :name (n / --LEX--)  :location-of (s<mod>))--TYPE--(mod())
(e<root> / event  :name (n / --LEX--))--TYPE--()
(l<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG1 (i<o>)  :ARG0 (y<s>))--TYPE--(o(s_UNIFY_s()), s())
(u<root> / --LEX--  :prep-as-of (f<mod>))--TYPE--(mod())
(s<root> / --LEX--  :ARG2 (r<o>)  :ARG1 (t<s>))--TYPE--(o(o_UNIFY_s()), s())
(a<root> / --LEX--  :op2 (v<op2>)  :op1 (a2<op1>)  :mod-of (c<mod>))--TYPE--(mod(), op1(), op2())
(n<root> / --LEX--  :name-of (o / organization  :mod-of (e<mod>)))--TYPE--(mod())
(d<root> / --LEX--  :ARG0 (h<s>)  :manner-of (a<mod>))--TYPE--(mod(), s())
(d2<root> / --LEX--  :ARG1 (i<o>)  :ARG0 (p<s>)  :purpose-of (d<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(e<root> / --LEX--  :degree (m / more)  :time-of (p<mod>))--TYPE--(mod())
(a<root> / --LEX--  :op5 (p<op5>)  :op3 (t<op3>)  :op2 (w<op2>)  :op4 (e<op4>)  :op6 (s<op6>)  :op1 (i<op1>))--TYPE--(op1(), op2(), op3(), op4(), op5(), op6())
(t2<root> / temporal-quantity  :unit (m / --LEX--)  :op1-of (m2 / multiple  :duration-of (w<mod>)))--TYPE--(mod())
(m<root> / mass-quantity  :unit (g2 / --LEX--))--TYPE--()
(g<root> / government-organization  :name (n3 / --LEX--)  :poss (c<poss>))--TYPE--(poss())
(m<root> / --LEX--  :ARG1 (i<s>)  :ARG2 (y<o>)  :condition-of (k<mod>))--TYPE--(mod(), o(), s())
(a<root> / --LEX--  :ARG0 (y / you)  :mode (explicitanon0 / imperative))--TYPE--()
(s<root> / --LEX--  :ARG1 (r2<o>)  :ARG0 (r<s>))--TYPE--(o(dom_UNIFY_s()), s())
(y<root> / --LEX--  :prep-to-of (v<mod>))--TYPE--(mod())
(c2<root> / country  :name (n / --LEX--)  :source-of (c<mod>))--TYPE--(mod())
(w<root> / war  :name (n / --LEX--))--TYPE--()
(a<root> / --LEX--  :op1 (o<op1>)  :op2 (i<op2>))--TYPE--(op1(o_UNIFY_o()), op2(o_UNIFY_o()))
(i<root> / --LEX--  :domain (t<dom>)  :ARG1 (j<s>))--TYPE--(dom(), s())
(p<root> / person  :name (n / --LEX--)  :topic-of (a<mod>))--TYPE--(mod())
(m<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (f<o>)  :ARG2 (t<o2>))--TYPE--(o(poss_UNIFY_s()), o2(), s())
(s<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG0 (w<s>))--TYPE--(s())
(e<root> / --LEX--  :prep-on-of (a<mod>))--TYPE--(mod())
(e<root> / ethnic-group  :name (n / --LEX--)  :mod-of (p<mod>))--TYPE--(mod())
(p2<root> / province  :name (n / --LEX--))--TYPE--()
(u<root> / university  :name (n / --LEX--))--TYPE--()
(t<root> / temporal-quantity  :unit (d / --LEX--)  :ARG3-of (r / rate-entity-91  :frequency-of (p<mod>)))--TYPE--(mod())
(d<root> / --LEX--  :ARG0 (t<s>)  :ARG1 (s2<o>)  :topic-of (s<mod>))--TYPE--(mod(), o(), s())
(p<root> / person  :ARG1-of (p2 / --LEX--  :ARG2 (g<s>)))--TYPE--(s())
(c3<root> / continent  :name (n2 / --LEX--)  :location-of (c2<mod>))--TYPE--(mod())
(h2<root> / have-rel-role-91  :ARG2 (f / --LEX--)  :ARG0 (h<s>))--TYPE--(s())
(r2<root> / --LEX--  :ARG2 (j<o>)  :ARG1 (m<s>)  :purpose-of (r<mod>))--TYPE--(mod(), o(), s())
(i<root> / --LEX--  :prep-for-of (h<mod>))--TYPE--(mod())
(b2<root> / --LEX--  :op1 (explicitanon0<op1>)  :op2 (explicitanon1<op2>)  :quant-of (b<mod>))--TYPE--(mod(), op1(), op2())
(g<root> / --LEX--  :ARG2 (m<s>)  :purpose-of (p<mod>))--TYPE--(mod(), s())
(t<root> / thing  :quant (explicitanon0 / --LEX--))--TYPE--()
(b<root> / book  :name (n / --LEX--))--TYPE--()
(m2<root> / most  :degree-of (g / --LEX--  :ARG1 (c<s>)))--TYPE--(s())
(s<root> / --LEX--  :ARG3 (w<s>)  :ARG2 (o<o>))--TYPE--(o(), s())
(p2<root> / --LEX--  :ARG2-of (h / have-org-role-91  :ARG1 (p<s>)))--TYPE--(s())
(g<root> / --LEX--  :ARG0 (r2<s>)  :topic-of (c<mod>))--TYPE--(mod(), s())
(w<root> / world-region  :name (n / --LEX--)  :mod-of (c2<mod>))--TYPE--(mod())
(n<root> / --LEX--  :op2 (explicitanon3<op2>)  :op1 (explicitanon2<op1>)  :name-of (p<mod>))--TYPE--(mod(), op1(), op2())
(s<root> / --LEX--  :polarity (explicitanon0 / -)  :ARG0 (y<s>))--TYPE--(s())
(c<root> / --LEX--  :poss (i<poss>)  :mod-of (e<mod>))--TYPE--(mod(), poss())
(d<root> / --LEX--  :ARG2 (s<s>)  :time-of (l<mod>))--TYPE--(mod(), s())
(s2<root> / --LEX--  :ARG1 (h<o>)  :ARG0 (y<s>)  :time-of (r<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(o<root> / --LEX--  :op3 (t2<op3>)  :op2 (b<op2>)  :op1 (l<op1>)  :example-of (t<mod>))--TYPE--(mod(), op1(), op2(), op3())
(f<root> / facility  :name (n2 / --LEX--))--TYPE--()
(d<root> / --LEX--  :ARG3 (m<o>)  :ARG2 (s<s>))--TYPE--(o(), s())
(m<root> / --LEX--  :ARG1 (a<o>)  :ARG0 (i<o2>)  :ARG2 (y<s>))--TYPE--(o(), o2(), s())
(c<root> / --LEX--  :ARG2-of (h / have-rel-role-91  :ARG1 (i<o>)  :ARG0 (p<s>)))--TYPE--(o(), s())
(p<root> / possible-01  :ARG1 (p2 / --LEX--  :ARG1 (b<s>)))--TYPE--(s())
(g<root> / --LEX--  :ARG1 (i<s>)  :ARG4 (j3<o2>)  :ARG3 (j2<o>))--TYPE--(o(), o2(), s())
(c<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG1 (y<s>))--TYPE--(s())
(g<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG1 (b<o>)  :ARG2 (i<s>)  :ARG0 (y / you))--TYPE--(o(), s())
(c<root> / --LEX--  :ARG0 (i<s>  :ARG1-of c)  :ARG2 (m<o2>))--TYPE--(o2(), s())
(explicitanon2<root> / --LEX--  :month-of (d / date-entity  :time-of (s<mod>)))--TYPE--(mod())
(t<root> / thing  :domain (t2<dom>)  :ARG1-of (g / --LEX--))--TYPE--(dom())
(a<root> / --LEX--  :op1 (b<op1>)  :manner-of (c<mod>))--TYPE--(mod(), op1())
(p<root> / person  :ARG2-of (s / --LEX--))--TYPE--()
(a<root> / --LEX--  :op2 (c<op2>)  :op1 (p<op1>)  :condition-of (d<mod>))--TYPE--(mod(), op1(), op2())
(p2<root> / person  :ARG0-of (l2 / --LEX--  :ARG2 (w2<s>)))--TYPE--(s())
(g<root> / government-organization  :mod-of (p<mod>)  :ARG0-of (g2 / --LEX--))--TYPE--(mod())
(r<root> / research-institute  :name (n2 / --LEX--))--TYPE--()
(s<root> / --LEX--  :ARG0 (c<s>)  :mod-of (a<mod>))--TYPE--(mod(), s())
(h<root> / --LEX--  :ARG2 (explicitanon0<s>)  :condition-of (a<mod>))--TYPE--(mod(), s())
(a2<root> / aircraft-type  :name (n / --LEX--))--TYPE--()
(o2<root> / organization  :name (n3 / --LEX--)  :mod-of (a<mod>))--TYPE--(mod())
(i<root> / island  :name (n / --LEX--))--TYPE--()
(o<root> / --LEX--  :ord-of (e<mod>))--TYPE--(mod())
(r<root> / --LEX--  :ARG3 (t<s>)  :frequency-of (t2<mod>))--TYPE--(mod(), s())
(c<root> / continent  :name (n2 / --LEX--)  :mod-of (n<mod>))--TYPE--(mod())
(m<root> / more  :degree-of (o / --LEX--  :mod-of (g2<mod>)))--TYPE--(mod())
(m<root> / --LEX--  :domain (i<dom>)  :op1 (t<op1>))--TYPE--(dom(), op1())
(b<root> / --LEX--  :ARG2 (v<o>)  :ARG1 (t<s>))--TYPE--(o(poss_UNIFY_s()), s())
(a<root> / --LEX--  :op2 (r<op2>)  :op1 (o<op1>))--TYPE--(op1(dom_UNIFY_dom()), op2(dom_UNIFY_dom()))
(r<root> / --LEX--  :ARG4 (g2<s>)  :frequency-of (a3<mod>))--TYPE--(mod(), s())
(u<root> / --LEX--  :ARG2 (p<o2>)  :ARG0 (t<o>)  :ARG1 (w<s>))--TYPE--(o(), o2(), s())
(n2<root> / --LEX--  :name-of (w2 / world-region  :mod-of (w<mod>)))--TYPE--(mod())
(d2<root> / date-entity  :decade (explicitanon0 / --LEX--))--TYPE--()
(i<root> / incident  :name (n / --LEX--))--TYPE--()
(explicitanon0<root> / --LEX--  :decade-of (d / date-entity  :time-of (n<mod>)))--TYPE--(mod())
(j<root> / --LEX--  :ARG1 (m<s>)  :ARG2 (e<o>)  :topic-of (a<mod>))--TYPE--(mod(), o(), s())
(p<root> / planet  :name (n / --LEX--))--TYPE--()
(a<root> / --LEX--  :dayperiod-of (d<mod>))--TYPE--(mod())
(m<root> / market-sector  :name (n / --LEX--))--TYPE--()
(h2<root> / --LEX--  :polarity (explicitanon0 / -)  :mod-of (l<mod>))--TYPE--(mod())
(m2<root> / most  :degree-of (l2 / --LEX--  :mod-of (n2<mod>)))--TYPE--(mod())
(p2<root> / person  :domain (s<dom>)  :ARG0-of (t / --LEX--))--TYPE--(dom())
(h<root> / --LEX--  :ARG2 (h3<o2>)  :ARG0 (h2<s>)  :ARG1 (l<o>))--TYPE--(o(), o2(poss_UNIFY_s()), s())
(t<root> / thing  :ARG2-of (i / --LEX--  :ARG0 (p<s>)))--TYPE--(s())
(b<root> / --LEX--  :poss (h2<poss>)  :topic-of (a<mod>))--TYPE--(mod(), poss())
(n2<root> / --LEX--  :name-of (e / ethnic-group  :mod-of (w<mod>)))--TYPE--(mod())
(b<root> / --LEX--  :ARG2 (s<o>)  :ARG1 (k2<s>)  :manner-of (k<mod>))--TYPE--(mod(), o(), s())
(c<root> / company  :name (n / --LEX--)  :mod-of (o<mod>))--TYPE--(mod())
(p<root> / program  :name (n / --LEX--))--TYPE--()
(a<root> / --LEX--  :op1 (p2<op1>)  :condition-of (d<mod>))--TYPE--(mod(), op1())
(h<root> / --LEX--  :ARG2 (explicitanon0<s>)  :topic-of (a2<mod>))--TYPE--(mod(), s())
(c<root> / country-region  :name (n2 / --LEX--))--TYPE--()
(u<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (n<o>)  :mod-of (e<mod>))--TYPE--(mod(), o(), s())
(p<root> / --LEX--  :ARG1 (r<o>)  :condition-of (p3<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(s2<root> / --LEX--  :prep-under-of (t<mod>))--TYPE--(mod())
(e<root> / --LEX--  :op1 (d<op1>)  :degree (m / more)  :time-of (b<mod>))--TYPE--(mod(), op1())
(g<root> / --LEX--  :ARG1 (a<o>)  :purpose-of (f<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(o<root> / --LEX--  :op2 (e2<op2>)  :op1 (i<op1>)  :condition-of (h<mod>))--TYPE--(mod(), op1(s_UNIFY_s()), op2(s_UNIFY_s()))
(a<root> / --LEX--  :op1 (t<op1>)  :path-of (r<mod>))--TYPE--(mod(), op1())
(p<root> / --LEX--  :ARG1 (p2<s>)  :location-of (c<mod>))--TYPE--(mod(), s())
(p<root> / province  :name (n / --LEX--)  :location-of (e<mod>))--TYPE--(mod())
(p<root> / --LEX--  :prep-against-of (t<mod>))--TYPE--(mod())
(c<root> / city  :name (n / --LEX--)  :mod-of (p<mod>))--TYPE--(mod())
(d<root> / --LEX--  :ARG2 (m<s>)  :mod-of (t<mod>))--TYPE--(mod(), s())
(t<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG2 (i2<o2>)  :ARG1 (i<o>)  :ARG0 (d<s>))--TYPE--(o(), o2(), s())
(a<root> / --LEX--  :op1 (c<op1>)  :poss (p<poss>)  :op2 (m<op2>))--TYPE--(op1(), op2(), poss())
(m<root> / more  :degree-of (l / --LEX--  :time-of (s<mod>)))--TYPE--(mod())
(d<root> / date-entity  :day (explicitanon2 / --LEX--))--TYPE--()
(e<root> / ethnic-group  :name (n / --LEX--))--TYPE--()
(d<root> / date-entity  :weekday (t / --LEX--)  :time-of (c<mod>))--TYPE--(mod())
(p<root> / --LEX--  :ARG1 (g<s>)  :ARG1-of (p2 / possible-01))--TYPE--(s())
(p<root> / person  :mod-of (y<mod>)  :ARG0-of (f / --LEX--))--TYPE--(mod())
(g<root> / --LEX--  :ARG2 (o<o2>)  :ARG1 (i<o>)  :ARG0 (y<s>)  :purpose-of (a<mod>))--TYPE--(mod(), o(), o2(), s())
(m<root> / --LEX--  :snt4 (l4<snt4>)  :snt2 (f<snt2>)  :snt3 (l3<snt3>)  :snt1 (l<snt1>))--TYPE--(snt1(), snt2(), snt3(), snt4())
(explicitanon0<root> / -  :polarity-of (r / --LEX--  :ARG0 (v<s>)))--TYPE--(s())
(p<root> / --LEX--  :ARG2 (g<o>)  :ARG0 (g2<s>)  :time-of (r<mod>))--TYPE--(mod(), o(), s())
(c<root> / --LEX--  :domain (t<dom>)  :part-of (d<poss>))--TYPE--(dom(), poss())
(g<root> / game  :name (n / --LEX--))--TYPE--()
(a2<root> / --LEX--  :ARG0 (c<s>)  :concession-of (a<mod>))--TYPE--(mod(), s())
(o<root> / --LEX--  :ARG2 (d2<o>)  :ARG1 (p<s>)  :concession-of (c<mod>))--TYPE--(mod(), o(), s())
(r<root> / --LEX--  :ARG2 (t<o>))--TYPE--(o())
(t<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG0 (y / you)  :ARG2 (i<s>))--TYPE--(s())
(r<root> / --LEX--  :polarity (explicitanon0 / -)  :ARG0 (h<s>)  :ARG1 (p<o>))--TYPE--(o(), s())
(t<root> / --LEX--  :weekday-of (d / date-entity  :time-of (v<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :op2 (d<op2>)  :op1 (a2<op1>)  :consist (l2<mod>))--TYPE--(mod(), op1(), op2())
(p<root> / publication  :name (n / --LEX--)  :medium-of (u<mod>))--TYPE--(mod())
(w<root> / --LEX--  :ARG0 (t<s>)  :compared-to-of (m<mod>))--TYPE--(mod(), s())
(explicitanon0<root> / --LEX--  :value-of (o / ordinal-entity  :mod-of (y<mod>)))--TYPE--(mod())
(p<root> / --LEX--  :ARG2 (s2<s>)  :manner-of (s<mod>))--TYPE--(mod(), s())
(p<root> / --LEX--  :subevent-of (i<mod>))--TYPE--(mod())
(s<root> / ship  :name (n / --LEX--))--TYPE--()
(b<root> / byline-91  :ARG0 (p / publication  :name (n / --LEX--)))--TYPE--()
(n2<root> / --LEX--  :name-of (c2 / country  :source-of (p<mod>)))--TYPE--(mod())
(d<root> / --LEX--  :polarity (explicitanon0 / -)  :domain (t<dom>))--TYPE--(dom())
(t<root> / team  :name (n / --LEX--))--TYPE--()
(h<root> / have-rel-role-91  :ARG2 (b / --LEX--)  :ARG1 (i<o>)  :ARG0 (h2<s>))--TYPE--(o(), s())
(c<root> / --LEX--  :ARG2 (d<o>)  :ARG1 (s<s>)  :mod-of (e<mod>))--TYPE--(mod(), o(), s())
(p3<root> / person  :quant (a / --LEX--  :op1 (p<op1>)))--TYPE--(op1())
(c<root> / cause-01  :ARG0 (a / --LEX--))--TYPE--()
(s<root> / string-entity  :value (explicitanon0 / --LEX--))--TYPE--()
(l<root> / language  :name (n / --LEX--))--TYPE--()
(p<root> / person  :quant (m / multiple  :op1 (explicitanon0 / --LEX--)))--TYPE--()
(p<root> / --LEX--  :poss (h<poss>)  :time-of (a<mod>))--TYPE--(mod(), poss())
(a<root> / --LEX--  :op2 (p<op2>)  :op1 (b<op1>))--TYPE--(op1(poss_UNIFY_poss()), op2(poss_UNIFY_poss()))
(p<root> / --LEX--  :ARG1 (m<o>)  :ARG0 (i<s>)  :ARG3 (s<o2>))--TYPE--(o(), o2(s_UNIFY_s()), s())
(o<root> / --LEX--  :op2 (s<op2>)  :op1 (a<op1>)  :source-of (i<mod>))--TYPE--(mod(), op1(), op2())
(explicitanon0<root> / -  :polarity-of (f / --LEX--  :ARG2 (r<s>)))--TYPE--(s())
(a<root> / --LEX--  :op2 (c<op2>)  :op3 (r<op3>)  :op1 (g<op1>)  :location-of (e<mod>))--TYPE--(mod(), op1(), op2(), op3())
(a<root> / --LEX--  :op2 (h<op2>)  :op1 (d<op1>)  :purpose-of (s2<mod>))--TYPE--(mod(), op1(s_UNIFY_s()), op2(s_UNIFY_s()))
(a2<root> / --LEX--  :op4 (e2<op4>)  :op3 (i<op3>)  :op1 (t<op1>)  :op2 (p<op2>)  :example-of (a<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4())
(o<root> / ordinal-entity  :value (explicitanon0 / --LEX--))--TYPE--()
(t3<root> / --LEX--  :domain (i<dom>)  :time-of (t<mod>))--TYPE--(dom(), mod())
(f<root> / --LEX--  :ARG2 (p<o2>)  :ARG1 (s<o>)  :ARG0 (i<s>))--TYPE--(o(o_UNIFY_o2(), s_UNIFY_s()), o2(), s())
(g<root> / --LEX--  :ARG1 (t<s>)  :ARG4 (d<o>))--TYPE--(o(s_UNIFY_s()), s())
(i2<root> / --LEX--  :ARG0 (i<s>)  :ARG2 (t<o>)  :purpose-of (l<mod>))--TYPE--(mod(), o(), s())
(a<root> / --LEX--  :op2 (t<op2>)  :op5 (c<op5>)  :op4 (p<op4>)  :op7 (w<op7>)  :op3 (m<op3>)  :op1 (i<op1>)  :op6 (d<op6>))--TYPE--(op1(), op2(), op3(), op4(), op5(), op6(), op7())
(o3<root> / organization  :name (n4 / --LEX--)  :part-of (p<poss>))--TYPE--(poss())
(s<root> / small-molecule  :name (n / --LEX--))--TYPE--()
(l2<root> / location  :name (n / --LEX--))--TYPE--()
(n<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (e<o>))--TYPE--(o(), s(mod_UNIFY_o()))
(e2<root> / --LEX--  :prep-without-of (e<mod>))--TYPE--(mod())
(s<root> / --LEX--  :ARG1 (t2<s>)  :ARG2 (p<o>))--TYPE--(o(), s(o_UNIFY_o()))
(c<root> / --LEX--  :ARG0 (i<o>)  :ARG1 (y<s>)  :condition-of (w<mod>))--TYPE--(mod(), o(), s())
(p<root> / person  :ARG0-of (t / --LEX--  :ARG2 (h<s>)  :ARG1 (m2<o>)))--TYPE--(o(), s())
(p<root> / person  :ARG1-of (f2 / --LEX--  :ARG0 (s<s>)))--TYPE--(s())
(n<root> / --LEX--  :name-of (c2 / continent  :mod-of (r<mod>)))--TYPE--(mod())
(w<root> / worship-place  :name (n / --LEX--))--TYPE--()
(r<root> / --LEX--  :ARG1 (g<s>)  :consist (s<mod>))--TYPE--(mod(), s())
(d<root> / --LEX--  :ARG1 (v<s>)  :example-of (s<mod>))--TYPE--(mod(), s())
(p2<root> / product  :name (n / --LEX--)  :mod-of (p<mod>))--TYPE--(mod())
(t<root> / --LEX--  :ARG0 (y<s>)  :ARG1 (t2 / thing))--TYPE--(s())
(s<root> / --LEX--  :ARG1 (t / thing  :manner-of (a<mod>)))--TYPE--(mod())
(b<root> / --LEX--  :ARG1 (y<o>)  :ARG0 (s<s>)  :compared-to-of (t<mod>))--TYPE--(mod(), o(), s())
(g<root> / --LEX--  :ARG2-of (h / have-org-role-91))--TYPE--()
(a<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (n<o>)  :concession-of (n2<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(a<root> / --LEX--  :op1 (s2<op1>)  :op2 (s3<op2>)  :concession-of (r<mod>))--TYPE--(mod(), op1(), op2())
(n2<root> / --LEX--  :name-of (s2 / state  :location-of (h2<mod>)))--TYPE--(mod())
(d<root> / distance-quantity  :unit (i / --LEX--)  :mod-of (p2<mod>))--TYPE--(mod())
(c<root> / --LEX--  :ARG1 (t / thing))--TYPE--()
(m<root> / magazine  :name (n3 / --LEX--))--TYPE--()
(c<root> / country-region  :name (n / --LEX--)  :location-of (r<mod>))--TYPE--(mod())
(t<root> / thing  :ARG2-of (r / --LEX--  :ARG1 (g<o>)  :ARG0 (g2<s>)))--TYPE--(o(), s())
(b<root> / --LEX--  :ARG1 (d<o>)  :ARG0 (h<s>)  :ARG3 (b2<o3>)  :ARG2 (o<o2>))--TYPE--(o(), o2(), o3(), s())
(t<root> / thing  :ARG1-of (t2 / --LEX--  :ARG0 (i<s>)  :ARG2 (p2<o2>)))--TYPE--(o2(), s())
(p<root> / percentage-entity  :value (explicitanon0 / --LEX--)  :quant-of (m<mod>))--TYPE--(mod())
(t2<root> / temporal-quantity  :quant (explicitanon0 / --LEX--)  :duration-of (t3<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :dayperiod-of (d / date-entity  :time-of (o<mod>)))--TYPE--(mod())
(t2<root> / temporal-quantity  :quant (explicitanon0 / --LEX--)  :age-of (g<mod>))--TYPE--(mod())
(s<root> / spaceship  :name (n / --LEX--))--TYPE--()
(a2<root> / --LEX--  :ARG1 (s<s>)  :prep-in-of (p<mod>))--TYPE--(mod(), s())
(s<root> / --LEX--  :ARG3 (p<o>)  :ARG0 (c<s>))--TYPE--(o(s_UNIFY_s()), s())
(s2<root> / show  :name (n / --LEX--))--TYPE--()
(p<root> / --LEX--  :ARG1 (d2<o>)  :ARG0 (i<s>)  :domain (a<dom>))--TYPE--(dom(), o(), s())
(g<root> / --LEX--  :prep-from-of (f<mod>))--TYPE--(mod())
(p<root> / person  :name (n / --LEX--)  :compared-to-of (c<mod>))--TYPE--(mod())
(a<root> / --LEX--  :op1 (p2<op1>)  :degree-of (g<mod>))--TYPE--(mod(), op1())
(d<root> / distance-quantity  :unit (k / --LEX--)  :quant-of (r<mod>))--TYPE--(mod())
(w<root> / work-of-art  :name (n / --LEX--))--TYPE--()
(a<root> / --LEX--  :op1 (w<op1>)  :op4 (n<op4>)  :op2 (w2<op2>)  :op3 (s2<op3>)  :op5 (f<op5>)  :example-of (s<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4(), op5())
(r<root> / --LEX--  :ARG2 (t<s>)  :frequency-of (g<mod>))--TYPE--(mod(), s())
(t<root> / --LEX--  :ARG1 (r<s>)  :subevent-of (i<mod>))--TYPE--(mod(), s())
(h2<root> / have-org-role-91  :ARG2 (p / --LEX--))--TYPE--()
(p<root> / possible-01  :ARG1 (j / --LEX--  :ARG1 (t<s>))  :polarity (explicitanon0 / -))--TYPE--(s())
(c<root> / --LEX--  :ARG2 (p2<s>)  :ARG1 (p<o>  :ARG0-of c))--TYPE--(o(), s())
(n2<root> / --LEX--  :name-of (w / war  :time-of (i<mod>)))--TYPE--(mod())
(c<root> / country  :name (n / --LEX--)  :compared-to-of (f<mod>))--TYPE--(mod())
(n<root> / --LEX--  :domain (a<dom>)  :location-of (l<mod>))--TYPE--(dom(), mod())
(e<root> / --LEX--  :ARG1 (p<s>)  :ARG0 (c<o>)  :purpose-of (c2<mod>))--TYPE--(mod(), o(), s())
(m<root> / monetary-quantity  :unit (c / --LEX--)  :mod-of (r<mod>))--TYPE--(mod())
(a<root> / --LEX--  :op2 (c<op2>)  :op3 (c2<op3>)  :op1 (m<op1>)  :topic-of (e<mod>))--TYPE--(mod(), op1(), op2(), op3())
(c<root> / --LEX--  :domain (t<dom>)  :concession-of (l<mod>))--TYPE--(dom(), mod())
(a<root> / --LEX--  :op2 (d<op2>)  :op1 (m<op1>)  :topic-of (p<mod>))--TYPE--(mod(), op1(s_UNIFY_s()), op2(s_UNIFY_s()))
(a<root> / --LEX--  :mode (explicitanon0 / imperative))--TYPE--()
(b<root> / --LEX--  :op1 (t<op1>)  :op2 (t2<op2>)  :duration-of (p<mod>))--TYPE--(mod(), op1(), op2())
(s2<root> / --LEX--  :ARG4 (t2<o2>)  :ARG2 (explicitanon0<o>)  :ARG1 (d<s>))--TYPE--(o(), o2(), s())
(c<root> / country  :name (n / --LEX--)  :topic-of (y<mod>))--TYPE--(mod())
(s<root> / --LEX--  :domain (i2<dom>)  :condition-of (d<mod>))--TYPE--(dom(), mod())
(a<root> / --LEX--  :op1 (s<op1>)  :direction-of (s2<mod>))--TYPE--(mod(), op1())
(c<root> / city-district  :name (n / --LEX--))--TYPE--()
(p2<root> / person  :name (n / --LEX--)  :beneficiary-of (p<mod>))--TYPE--(mod())
(explicitanon0<root> / -  :polarity-of (s / --LEX--  :manner-of (b<mod>)))--TYPE--(mod())
(p<root> / person  :domain (y<dom>)  :name (n / --LEX--))--TYPE--(dom())
(b<root> / --LEX--  :ARG0 (h<o>)  :ARG1 (s<s>)  :time-of (g<mod>))--TYPE--(mod(), o(), s())
(s<root> / --LEX--  :ARG1 (f<o>)  :ARG0 (t<s>)  :purpose-of (c<mod>))--TYPE--(mod(), o(poss_UNIFY_s()), s())
(r<root> / --LEX--  :ARG1 (p<o>)  :ARG0 (c<s>)  :manner-of (s<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(l<root> / --LEX--  :prep-at-of (f<mod>))--TYPE--(mod())
(o<root> / --LEX--  :op1 (r<op1>)  :op2 (p2<op2>)  :beneficiary-of (p<mod>))--TYPE--(mod(), op1(), op2())
(a<root> / --LEX--  :op1 (p<op1>)  :op2 (p2<op2>)  :compared-to-of (b<mod>))--TYPE--(mod(), op1(), op2())
(g<root> / --LEX--  :ARG0-of (g2 / govern-01))--TYPE--()
(a<root> / --LEX--  :ARG0 (y / you))--TYPE--()
(p<root> / person  :consist (t<mod>)  :ARG0-of (r / --LEX--))--TYPE--(mod())
(p<root> / person  :poss (i<poss>)  :name (n / --LEX--))--TYPE--(poss())
(a2<root> / --LEX--  :ARG2 (a3<o>)  :ARG0 (g<s>))--TYPE--(o(poss_UNIFY_s()), s())
(t<root> / --LEX--  :ARG0 (c<s>)  :ARG3 (p<o2>)  :ARG2 (i<o>))--TYPE--(o(), o2(), s())
(r<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG1 (h<o>)  :ARG0 (y<s>))--TYPE--(o(poss_UNIFY_s()), s())
(p<root> / --LEX--  :ARG0 (i<s>)  :ARG2 (w<o2>)  :ARG1 (s<o>))--TYPE--(o(s_UNIFY_s()), o2(s_UNIFY_s()), s())
(b<root> / building  :name (n / --LEX--))--TYPE--()
(c<root> / city  :name (n2 / --LEX--)  :source-of (s<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (g / government-organization  :location-of (h2<mod>)))--TYPE--(mod())
(t<root> / temporal-quantity  :unit (m2 / --LEX--)  :ARG2-of (r / rate-entity-91  :ARG1 (s<s>)  :frequency-of (m<mod>)))--TYPE--(mod(), s())
(g<root> / government-organization  :name (n2 / --LEX--)  :part-of (m2<poss>))--TYPE--(poss())
(d<root> / date-entity  :decade (explicitanon4 / --LEX--)  :time-of (l<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (g / government-organization  :mod-of (o2<mod>)))--TYPE--(mod())
(h<root> / --LEX--  :mode (explicitanon0 / expressive))--TYPE--()
(h<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG1 (y / you))--TYPE--()
(a<root> / --LEX--  :ARG2 (y<s>  :ARG0-of a)  :ARG1 (q<o>))--TYPE--(o(), s())
(p<root> / --LEX--  :ARG1 (i<s>)  :ARG2 (b<o>))--TYPE--(o(mod_UNIFY_s()), s())
(h<root> / --LEX--  :ARG1 (o<o>)  :ARG0 (i2<s>))--TYPE--(o(o2_UNIFY_s()), s())
(c<root> / --LEX--  :polarity (explicitanon1 / -)  :ARG2 (l<s>))--TYPE--(s())
(p<root> / --LEX--  :ARG0 (i<s>)  :location-of (e<mod>))--TYPE--(mod(), s())
(a<root> / --LEX--  :op2 (e<op2>)  :op1 (r<op1>)  :op3 (p<op3>)  :domain (g<dom>))--TYPE--(dom(), op1(), op2(), op3())
(d2<root> / date-entity  :season (s / --LEX--)  :time-of (t<mod>))--TYPE--(mod())
(t<root> / temporal-quantity  :unit (y / --LEX--)  :op1-of (m / multiple  :quant-of (b<mod>)))--TYPE--(mod())
(p2<root> / person  :ARG2-of (c / --LEX--  :ARG1 (p<s>)))--TYPE--(s())
(p3<root> / person  :name (n2 / --LEX--)  :example-of (p<mod>))--TYPE--(mod())
(r<root> / --LEX--  :scale-of (s<mod>))--TYPE--(mod())
(n<root> / --LEX--  :name-of (c2 / continent  :location-of (c<mod>)))--TYPE--(mod())
(e<root> / --LEX--  :ARG2 (t<s>  :ARG1-of e))--TYPE--(s())
(g<root> / --LEX--  :degree (m / most))--TYPE--()
(f<root> / facility  :name (n / --LEX--)  :location-of (p<mod>))--TYPE--(mod())
(a<root> / --LEX--  :part-of (c<poss>)  :mod-of (y<mod>))--TYPE--(mod(), poss())
(f<root> / family  :name (n / --LEX--))--TYPE--()
(m<root> / --LEX--  :poss (y<poss>)  :compared-to-of (c<mod>))--TYPE--(mod(), poss())
(t<root> / --LEX--  :ARG1 (y<o>)  :ARG3 (c<o2>)  :ARG0 (s<s>))--TYPE--(o(), o2(s_UNIFY_o()), s())
(s<root> / state  :name (n / --LEX--)  :mod-of (f<mod>))--TYPE--(mod())
(a<root> / award  :name (n / --LEX--))--TYPE--()
(t3<root> / --LEX--  :domain (t2<dom>)  :manner-of (s2<mod>))--TYPE--(dom(), mod())
(r<root> / --LEX--  :ARG2 (s<o>)  :ARG1 (y<s>)  :time-of (f<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(d2<root> / distance-quantity  :quant (explicitanon1 / --LEX--))--TYPE--()
(h<root> / --LEX--  :ARG2 (u<s>)  :concession-of (c<mod>))--TYPE--(mod(), s())
(g<root> / --LEX--  :ARG4 (s<o>)  :ARG1 (y<s>)  :time-of (p2<mod>))--TYPE--(mod(), o(), s())
(c<root> / conference  :name (n2 / --LEX--))--TYPE--()
(explicitanon1<root> / --LEX--  :day-of (d3 / date-entity  :time-of (f<mod>)))--TYPE--(mod())
(b<root> / --LEX--  :op1 (n / now))--TYPE--()
(s<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (k<o>)  :ARG2 (p<o2>))--TYPE--(o(o_UNIFY_s(), s_UNIFY_o2()), o2(), s())
(a<root> / --LEX--  :domain (t<dom>)  :mod-of (e<mod>))--TYPE--(dom(), mod())
(r<root> / religious-group  :domain (h<dom>)  :name (n / --LEX--))--TYPE--(dom())
(r<root> / --LEX--  :ARG3 (t<o>)  :ARG4 (d<s>))--TYPE--(o(), s())
(v<root> / volume-quantity  :unit (g / --LEX--)  :quant-of (m<mod>))--TYPE--(mod())
(g<root> / government-organization  :poss (w<poss>)  :ARG0-of (g2 / --LEX--))--TYPE--(poss())
(a<root> / --LEX--  :ARG2 (u<o2>)  :ARG1 (t2<o>)  :ARG0 (t<s>)  :condition-of (c<mod>))--TYPE--(mod(), o(), o2(), s())
(c<root> / company  :poss (t2<poss>)  :name (n / --LEX--))--TYPE--(poss())
(s<root> / --LEX--  :ARG1 (w<s>)  :ARG2 (a<o>))--TYPE--(o(dom_UNIFY_s()), s())
(o<root> / organization  :name (n / --LEX--)  :poss (u<poss>))--TYPE--(poss())
(p<root> / publication  :name (n / --LEX--)  :source-of (i<mod>))--TYPE--(mod())
(c<root> / city-district  :name (n2 / --LEX--)  :location-of (p2<mod>))--TYPE--(mod())
(c2<root> / criminal-organization  :name (n2 / --LEX--)  :mod-of (m<mod>))--TYPE--(mod())
(a2<root> / --LEX--  :op2 (p2<op2>)  :op1 (s2<op1>)  :time-of (a<mod>))--TYPE--(mod(), op1(s_UNIFY_s()), op2(s_UNIFY_s()))
(c4<root> / --LEX--  :ARG1 (c2<o>)  :ARG0 (c<s>)  :subevent-of (t<mod>))--TYPE--(mod(), o(), s())
(m<root> / multiple  :op1 (explicitanon0 / --LEX--)  :quant-of (s<mod>))--TYPE--(mod())
(h<root> / --LEX--  :ARG1 (y / you))--TYPE--()
(l<root> / --LEX--  :degree (m / most)  :time-of (d<mod>))--TYPE--(mod())
(d<root> / date-entity  :weekday (w / --LEX--))--TYPE--()
(a<root> / --LEX--  :ARG1 (b<o>)  :manner-of (w<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(p<root> / person  :name (n / --LEX--)  :source-of (t<mod>))--TYPE--(mod())
(p2<root> / --LEX--  :ARG0 (p<s>)  :domain (t<dom>))--TYPE--(dom(), s())
(f<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG0 (w<s>)  :ARG2 (e<o>))--TYPE--(o(), s())
(o2<root> / --LEX--  :op2 (d2<op2>)  :op1 (d<op1>)  :domain (i<dom>))--TYPE--(dom(), op1(s_UNIFY_s()), op2(s_UNIFY_s()))
(m<root> / military  :name (n / --LEX--)  :mod-of (t<mod>))--TYPE--(mod())
(t2<root> / --LEX--  :part-of (i<poss>)  :source-of (g<mod>))--TYPE--(mod(), poss())
(c<root> / --LEX--  :ARG1 (y<s>)  :ARG2 (a2<o>)  :condition-of (s<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(h<root> / have-org-role-91  :ARG1 (o<s>)  :ARG2 (c3 / --LEX--))--TYPE--(s())
(t<root> / thing  :ARG1-of (s / --LEX--  :ARG3 (p<s>)))--TYPE--(s())
(s2<root> / --LEX--  :ARG1 (f2<o>)  :ARG0 (p<s>)  :purpose-of (s<mod>))--TYPE--(mod(s_UNIFY_s()), o(), s())
(m<root> / monetary-quantity  :unit (d / --LEX--)  :quant-of (b<mod>))--TYPE--(mod())
(t<root> / --LEX--  :ARG0 (s3<s>)  :ARG1 (m<o>)  :topic-of (i<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(a<root> / --LEX--  :op1 (u<op1>)  :op2 (b2<op2>)  :accompanier-of (b<mod>))--TYPE--(mod(), op1(), op2())
(r<root> / --LEX--  :ARG2 (r2<s>)  :compared-to-of (t4<mod>))--TYPE--(mod(), s())
(m2<root> / mass-quantity  :quant (explicitanon6 / --LEX--)  :quant-of (o3<mod>))--TYPE--(mod())
(e<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG1 (y<s>  :ARG0-of e))--TYPE--(s())
(e<root> / --LEX--  :ARG1 (q<o>)  :ARG0 (p<s>  :purpose e))--TYPE--(o(), s())
(t<root> / thing  :ARG3-of (l / --LEX--))--TYPE--()
(n<root> / --LEX--  :name-of (o / organization  :source-of (r<mod>)))--TYPE--(mod())
(i<root> / --LEX--  :prep-by-of (o<mod>))--TYPE--(mod())
(t<root> / --LEX--  :domain (g<dom>)  :degree (m / more))--TYPE--(dom())
(n<root> / --LEX--  :poss (w<poss>)  :beneficiary-of (h<mod>))--TYPE--(mod(), poss())
(b<root> / broadcast-program  :name (n / --LEX--)  :medium-of (s<mod>))--TYPE--(mod())
(o<root> / --LEX--  :op1 (d<op1>)  :op2 (o2<op2>)  :prep-with-of (t<mod>))--TYPE--(mod(), op1(), op2())
(p<root> / publication  :name (n / --LEX--)  :mod-of (q<mod>))--TYPE--(mod())
(c<root> / --LEX--  :prep-into-of (d<mod>))--TYPE--(mod())
(c2<root> / --LEX--  :ARG1 (t<s>  :ARG0-of c2)  :ARG2 (s<o2>))--TYPE--(o2(s_UNIFY_s()), s())
(b<root> / --LEX--  :ARG1 (t<s>)  :ARG2 (s<o>)  :domain (t2<dom>))--TYPE--(dom(), o(), s())
(a<root> / --LEX--  :domain (l<dom>)  :topic-of (c<mod>))--TYPE--(dom(), mod())
(m<root> / --LEX--  :ARG0 (y2<s>)  :ARG2 (l<o>)  :condition-of (a<mod>))--TYPE--(mod(), o(), s())
(p<root> / publication  :poss (w<poss>)  :name (n / --LEX--))--TYPE--(poss())
(a2<root> / --LEX--  :op2 (m<op2>)  :op1 (t<op1>))--TYPE--(op1(o2_UNIFY_o2(), s_UNIFY_s()), op2(o2_UNIFY_o2(), s_UNIFY_s()))
(d<root> / date-entity  :century (explicitanon0 / --LEX--))--TYPE--()
(o<root> / --LEX--  :ARG3 (p<o2>)  :ARG0 (w<s>)  :ARG1 (u<o>))--TYPE--(o(s_UNIFY_s()), o2(), s())
(a<root> / amusement-park  :name (n / --LEX--))--TYPE--()
(a<root> / --LEX--  :op3 (b<op3>)  :op2 (t<op2>)  :op4 (m<op4>)  :op5 (h<op5>)  :op8 (g<op8>)  :op6 (s<op6>)  :op1 (i<op1>)  :op7 (e<op7>))--TYPE--(op1(), op2(), op3(), op4(), op5(), op6(), op7(), op8())
(r<root> / --LEX--  :ARG1 (p<s>)  :source-of (a2<mod>))--TYPE--(mod(), s())
(c<root> / country  :ARG0-of (h / have-org-role-91  :ARG1 (m2<s>)  :ARG2 (m / --LEX--)))--TYPE--(s())
(c<root> / company  :quant (m / --LEX--))--TYPE--()
(c3<root> / county  :name (n3 / --LEX--)  :location-of (f<mod>))--TYPE--(mod())
(m<root> / --LEX--  :snt1 (d<snt1>)  :snt4 (d3<snt4>)  :snt5 (d5<snt5>)  :snt2 (d4<snt2>)  :snt3 (d2<snt3>))--TYPE--(snt1(), snt2(), snt3(), snt4(), snt5())
(l<root> / --LEX--  :timezone-of (d<mod>))--TYPE--(mod())
(t<root> / thing  :domain (t2<dom>)  :ARG2-of (u / --LEX--))--TYPE--(dom())
(explicitanon0<root> / expressive  :mode-of (f / --LEX--  :mod-of (a<mod>)))--TYPE--(mod())
(s<root> / --LEX--  :ARG0 (i / i)  :ARG2 (p<s>))--TYPE--(s())
(s2<root> / --LEX--  :ARG2 (s<s>)  :ARG0 (i / i)  :ARG1 (n<o>))--TYPE--(o(), s())
(c<root> / --LEX--  :ARG1 (f<o>)  :ARG0 (s<s>))--TYPE--(o(), s(o_UNIFY_o()))
(explicitanon1<root> / --LEX--  :era-of (d<mod>))--TYPE--(mod())
(c<root> / car-make  :name (n / --LEX--))--TYPE--()
(n2<root> / --LEX--  :name-of (o / organization  :location-of (s<mod>)))--TYPE--(mod())
(f<root> / --LEX--  :weekday-of (d<mod>))--TYPE--(mod())
(d<root> / distance-quantity  :unit (m2 / --LEX--)  :extent-of (t<mod>))--TYPE--(mod())
(p<root> / --LEX--  :ARG3 (d<s>)  :purpose-of (c<mod>))--TYPE--(mod(), s())
(t<root> / thing  :name (n / --LEX--)  :mod-of (w<mod>))--TYPE--(mod())
(r<root> / --LEX--  :ARG0 (y<s>)  :source-of (f<mod>))--TYPE--(mod(), s())
(l<root> / --LEX--  :poss (y<poss>)  :source-of (p<mod>))--TYPE--(mod(), poss())
(f<root> / festival  :name (n / --LEX--))--TYPE--()
(c<root> / --LEX--  :ARG2 (t<o2>)  :ARG1 (i<o>)  :ARG0 (y<s>)  :manner-of (h<mod>))--TYPE--(mod(), o(), o2(), s())
(g<root> / government-organization  :name (n / --LEX--)  :mod-of (w<mod>))--TYPE--(mod())
(l<root> / --LEX--  :polarity (explicitanon0 / -)  :ARG1 (h<o>))--TYPE--(o(s_UNIFY_s()))
(c<root> / --LEX--  :polarity (explicitanon0 / -)  :ARG1 (y<s>)  :ARG2 (p<o>))--TYPE--(o(s_UNIFY_s()), s())
(b<root> / --LEX--  :ARG1 (i<s>)  :ARG2 (a<o>)  :degree (m / more))--TYPE--(o(), s())
(c<root> / --LEX--  :ARG1 (d<o>)  :ARG0 (i<s>)  :concession-of (g<mod>))--TYPE--(mod(s_UNIFY_s()), o(), s())
(a<root> / --LEX--  :op4 (e<op4>)  :op1 (l2<op1>)  :op2 (c<op2>)  :op3 (d<op3>))--TYPE--(op1(s_UNIFY_s()), op2(s_UNIFY_s()), op3(s_UNIFY_s()), op4(s_UNIFY_s()))
(p2<root> / person  :beneficiary-of (b<mod>)  :ARG0-of (h2 / have-rel-role-91  :ARG2 (m / --LEX--)))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (m2 / military  :mod-of (m<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :op1 (p<op1>)  :op2 (r3<op2>)  :concession-of (r<mod>))--TYPE--(mod(), op1(s_UNIFY_s()), op2(s_UNIFY_s()))
(t<root> / temporal-quantity  :unit (y / --LEX--)  :ARG2-of (r / rate-entity-91  :frequency-of (c<mod>)))--TYPE--(mod())
(p<root> / --LEX--  :ARG1 (d2<o>)  :concession-of (d<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(c<root> / --LEX--  :ARG0 (a<s>)  :ARG1 (c2<o>)  :example-of (t2<mod>))--TYPE--(mod(), o(), s())
(a2<root> / --LEX--  :op3 (l<op3>)  :op2 (s4<op2>)  :op1 (d<op1>)  :condition-of (a<mod>))--TYPE--(mod(), op1(), op2(), op3())
(d<root> / date-entity  :month (explicitanon6 / --LEX--)  :mod-of (w<mod>))--TYPE--(mod())
(h<root> / --LEX--  :ARG0 (t<s>)  :ARG1 (y / you))--TYPE--(s())
(t<root> / thing  :ARG1-of (a / --LEX--)  :topic-of (p<mod>))--TYPE--(mod())
(g<root> / --LEX--  :ARG1 (q<s>)  :ARG2 (j<o>)  :degree (m / most))--TYPE--(o(), s())
(t<root> / thing  :ARG2-of (s / --LEX--  :ARG3 (f<s>)))--TYPE--(s())
(g<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG2 (b<o>)  :ARG1 (w<s>))--TYPE--(o(), s())
(c<root> / country  :name (n / --LEX--)  :beneficiary-of (r<mod>))--TYPE--(mod())
(p<root> / publication  :name (n / --LEX--)  :location-of (a<mod>))--TYPE--(mod())
(s<root> / --LEX--  :season-of (d / date-entity  :time-of (g<mod>)))--TYPE--(mod())
(o<root> / --LEX--  :ARG0 (p<s>)  :ARG1 (e<o>)  :time-of (s<mod>))--TYPE--(mod(), o(poss_UNIFY_s()), s())
(g<root> / government-organization  :name (n / --LEX--)  :location-of (d<mod>))--TYPE--(mod())
(t<root> / --LEX--  :part-of (y<poss>)  :time-of (n<mod>))--TYPE--(mod(), poss())
(t2<root> / --LEX--  :poss (t<poss>)  :instrument-of (c<mod>))--TYPE--(mod(), poss())
(v<root> / --LEX--  :ARG0 (p<o>)  :ARG1 (i<s>)  :manner-of (l<mod>))--TYPE--(mod(), o(), s())
(t2<root> / --LEX--  :ARG1 (s<o>)  :ARG0 (y<s>)  :ARG2 (g<o2>)  :time-of (e<mod>))--TYPE--(mod(), o(), o2(), s())
(p<root> / product  :name (n / --LEX--)  :medium-of (a<mod>))--TYPE--(mod())
(p2<root> / person  :name (n2 / --LEX--)  :accompanier-of (p<mod>))--TYPE--(mod())
(b<root> / --LEX--  :op1 (t<op1>)  :op2 (t2<op2>)  :age-of (g<mod>))--TYPE--(mod(), op1(), op2())
(t3<root> / temporal-quantity  :unit (y / --LEX--)  :frequency-of (t<mod>))--TYPE--(mod())
(a<root> / --LEX--  :op1 (t2<op1>)  :op2 (n<op2>)  :instrument-of (r<mod>))--TYPE--(mod(), op1(), op2())
(r<root> / road  :name (n / --LEX--))--TYPE--()
(b<root> / --LEX--  :ARG0 (y<o>)  :ARG1 (c<s>))--TYPE--(o(), s(s_UNIFY_o()))
(c<root> / country  :name (n2 / --LEX--)  :destination-of (d2<mod>))--TYPE--(mod())
(p2<root> / --LEX--  :op1 (explicitanon0<op1>)  :op2 (explicitanon1<op2>)  :part-of (c<poss>))--TYPE--(op1(), op2(), poss())
(p<root> / person  :poss (o<poss>)  :ARG0-of (m / --LEX--))--TYPE--(poss())
(p2<root> / person  :ARG0-of (p / --LEX--  :ARG3 (t<s>)))--TYPE--(s())
(c4<root> / country  :name (n2 / --LEX--)  :example-of (c3<mod>))--TYPE--(mod())
(a<root> / --LEX--  :op2 (p<op2>)  :op1 (s2<op1>)  :manner-of (m<mod>))--TYPE--(mod(), op1(s_UNIFY_s()), op2(s_UNIFY_s()))
(c2<root> / --LEX--  :ARG0 (p3<s>)  :ARG2 (p2<o2>)  :ARG1 (p4<o>)  :topic-of (a<mod>))--TYPE--(mod(), o(), o2(), s())
(n<root> / --LEX--  :name-of (c2 / city  :mod-of (p<mod>)))--TYPE--(mod())
(m<root> / music  :name (n / --LEX--))--TYPE--()
(f<root> / --LEX--  :ARG3 (c<s>)  :topic-of (i<mod>))--TYPE--(mod(), s())
(c<root> / country  :domain (t<dom>)  :name (n / --LEX--))--TYPE--(dom())
(a<root> / --LEX--  :ARG2 (t<s>)  :ARG0 (y / you)  :ARG1 (i<o>))--TYPE--(o(), s())
(r<root> / --LEX--  :ARG1 (y<s>)  :ARG4 (c<o>))--TYPE--(o(poss_UNIFY_s()), s())
(t<root> / --LEX--  :ARG0 (i<s>)  :ARG2 (b<o2>)  :ARG1 (y<o>))--TYPE--(o(), o2(o_UNIFY_s(), s_UNIFY_o()), s())
(r<root> / --LEX--  :ARG1 (t<s>)  :ARG2 (p<o>))--TYPE--(o(), s(poss_UNIFY_o()))
(p<root> / person  :domain (p3<dom>)  :ARG1-of (v / --LEX--))--TYPE--(dom())
(l<root> / --LEX--  :ARG0 (f<s>)  :ARG1 (h<o>)  :ARG3 (d<o2>))--TYPE--(o(poss_UNIFY_s()), o2(), s())
(g<root> / government-organization  :name (n / --LEX--)  :source-of (f<mod>))--TYPE--(mod())
(c<root> / county  :name (n / --LEX--))--TYPE--()
(p<root> / --LEX--  :domain (j<dom>)  :poss (h<poss>))--TYPE--(dom(s_UNIFY_poss()), poss())
(h<root> / --LEX--  :ARG2 (b<s>)  :location-of (l<mod>))--TYPE--(mod(), s())
(explicitanon1<root> / --LEX--  :value-of (s / string-entity  :mod-of (w<mod>)))--TYPE--(mod())
(s<root> / --LEX--  :ARG1 (c<s>)  :ARG2 (d<o>))--TYPE--(o(), s(dom_UNIFY_o()))
(s<root> / --LEX--  :ARG1 (h<s>)  :ARG3 (r<o2>)  :ARG2 (t<o>))--TYPE--(o(), o2(s_UNIFY_s()), s())
(a<root> / area-quantity  :unit (a2 / --LEX--)  :quant-of (l<mod>))--TYPE--(mod())
(o<root> / ocean  :name (n2 / --LEX--))--TYPE--()
(s2<root> / --LEX--  :ARG2 (f<o>)  :ARG1 (t<s>)  :purpose-of (s<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(s<root> / --LEX--  :ARG2 (t<o2>)  :ARG1 (m<o>)  :ARG0 (w<s>))--TYPE--(o(o2_UNIFY_o2(), s_UNIFY_s()), o2(), s())
(m<root> / monetary-quantity  :quant (explicitanon0 / --LEX--)  :domain (s<dom>))--TYPE--(dom())
(n3<root> / --LEX--  :name-of (f2 / facility  :location-of (w<mod>)))--TYPE--(mod())
(m3<root> / multiple  :op1 (explicitanon1 / --LEX--))--TYPE--()
(h<root> / --LEX--  :ARG0 (f<o>)  :ARG1 (t<s>))--TYPE--(o(s_UNIFY_s()), s())
(p<root> / person  :beneficiary-of (e<mod>)  :ARG0-of (o / --LEX--))--TYPE--(mod())
(l<root> / local-region  :name (n / --LEX--))--TYPE--()
(p3<root> / province  :name (n2 / --LEX--)  :mod-of (p2<mod>))--TYPE--(mod())
(s<root> / state  :name (n / --LEX--)  :source-of (a2<mod>))--TYPE--(mod())
(s3<root> / --LEX--  :op2 (b3<op2>)  :op1 (b2<op1>)  :destination-of (c<mod>))--TYPE--(mod(), op1(), op2())
(a2<root> / --LEX--  :op3 (h<op3>)  :op2 (f<op2>))--TYPE--(op2(), op3())
(r<root> / --LEX--  :ARG1 (c<o>)  :ARG2 (t<s>))--TYPE--(o(s_UNIFY_s()), s())
(n2<root> / --LEX--  :name-of (p4 / political-movement  :mod-of (p3<mod>)))--TYPE--(mod())
(t<root> / temporal-quantity  :unit (w / --LEX--)  :mod-of (s2<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (v2 / variable  :mod-of (t2<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :op1 (w<op1>)  :source-of (p<mod>))--TYPE--(mod(), op1())
(n<root> / --LEX--  :poss (y<poss>)  :prep-in-of (b<mod>))--TYPE--(mod(), poss())
(p<root> / person  :name (n / --LEX--)  :prep-under-of (i<mod>))--TYPE--(mod())
(e<root> / --LEX--  :mode (explicitanon1 / imperative)  :domain (y / you))--TYPE--()
(m<root> / --LEX--  :ARG0 (n<s>)  :ARG1 (s<o>)  :ARG2 (e<o2>))--TYPE--(o(poss_UNIFY_o2()), o2(), s())
(explicitanon3<root> / --LEX--  :value-of (o / ordinal-entity  :time-of (w<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :ARG1 (y<o>  :ARG0-of a))--TYPE--(o())
(w<root> / --LEX--  :polarity (explicitanon0 / -)  :ARG1 (p<s>)  :ARG2 (a<o>))--TYPE--(o(), s())
(c2<root> / --LEX--  :prep-among-of (a<mod>))--TYPE--(mod())
(g<root> / --LEX--  :ARG2 (s2<s>)  :ARG1 (s3<o>)  :ARG0 (s<o2>))--TYPE--(o(s_UNIFY_s()), o2(), s())
(w<root> / --LEX--  :ARG1 (p2<o>)  :ARG2 (p3<o2>)  :ARG0 (c<s>))--TYPE--(o(), o2(dom_UNIFY_o()), s())
(u<root> / --LEX--  :ARG2 (s2<o>)  :ARG1 (t<s>)  :location-of (s<mod>))--TYPE--(mod(), o(), s())
(a<root> / --LEX--  :ARG0 (i<s>)  :ARG2 (y<o>)  :concession-of (c<mod>))--TYPE--(mod(), o(), s())
(g<root> / --LEX--  :ARG1 (c<s>)  :ARG0 (y<o>)  :condition-of (r<mod>))--TYPE--(mod(), o(), s(s_UNIFY_o()))
(t<root> / territory  :name (n / --LEX--))--TYPE--()
(o<root> / --LEX--  :op1 (t<op1>)  :age-of (p<mod>))--TYPE--(mod(), op1())
(n<root> / --LEX--  :name-of (c2 / company  :mod-of (p<mod>)))--TYPE--(mod())
(r<root> / --LEX--  :ARG2 (e2<o>)  :ARG1 (explicitanon2<s>)  :frequency-of (s<mod>))--TYPE--(mod(), o(), s())
(p2<root> / person  :ARG1-of (i / --LEX--  :ARG3 (a<o2>)  :ARG2 (w<s>)))--TYPE--(o2(), s())
(h<root> / --LEX--  :degree (m2 / more)  :ARG1 (s<o>))--TYPE--(o(s_UNIFY_s()))
(u<root> / university  :name (n / --LEX--)  :location-of (s<mod>))--TYPE--(mod())
(t3<root> / --LEX--  :domain (t<dom>)  :instrument-of (e<mod>))--TYPE--(dom(), mod())
(a<root> / --LEX--  :op2 (f<op2>)  :op1 (b2<op1>)  :path-of (m<mod>))--TYPE--(mod(), op1(), op2())
(n3<root> / --LEX--  :name-of (s2 / state  :mod-of (f2<mod>)))--TYPE--(mod())
(explicitanon0<root> / -  :polarity-of (h / --LEX--  :ARG1 (g2<o>)  :ARG0 (y<s>)))--TYPE--(o(), s())
(n2<root> / --LEX--  :name-of (c2 / country  :destination-of (d<mod>)))--TYPE--(mod())
(t2<root> / temporal-quantity  :quant (explicitanon0 / --LEX--)  :ARG3-of (r / rate-entity-91  :frequency-of (t<mod>)))--TYPE--(mod())
(p<root> / --LEX--  :ARG1 (s2<o>)  :time-of (s<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(d<root> / --LEX--  :ARG1 (s<s>)  :prep-to-of (a2<mod>))--TYPE--(mod(), s())
(d<root> / --LEX--  :ARG0 (w<s>)  :ARG1 (b<o>)  :ARG2 (h<o2>))--TYPE--(o(poss_UNIFY_s()), o2(s_UNIFY_s()), s())
(a<root> / --LEX--  :op3 (r<op3>)  :op1 (r2<op1>)  :op2 (r3<op2>)  :purpose-of (l<mod>))--TYPE--(mod(), op1(), op2(), op3())
(r<root> / --LEX--  :ARG2 (s2<o2>)  :ARG1 (p<o>)  :ARG0 (i<s>))--TYPE--(o(), o2(o_UNIFY_o()), s())
(m2<root> / more  :degree-of (l / --LEX--  :op1 (o<op1>)  :time-of (p<mod>)))--TYPE--(mod(), op1())
(p2<root> / person  :accompanier-of (s<mod>)  :ARG0-of (h2 / have-rel-role-91  :ARG2 (d / --LEX--)))--TYPE--(mod())
(a2<root> / --LEX--  :op1 (w<op1>)  :op3 (c<op3>)  :op2 (w2<op2>)  :time-of (a<mod>))--TYPE--(mod(), op1(), op2(), op3())
(explicitanon5<root> / --LEX--  :century-of (d2 / date-entity  :time-of (c2<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :op1 (a3<op1>)  :destination-of (s<mod>))--TYPE--(mod(), op1())
(c<root> / --LEX--  :ARG2 (s3<s>)  :source-of (f<mod>))--TYPE--(mod(), s())
(n2<root> / --LEX--  :name-of (p4 / person  :mod-of (g<mod>)))--TYPE--(mod())
(s2<root> / --LEX--  :op1 (t<op1>)  :range-of (o<mod>))--TYPE--(mod(), op1())
(c3<root> / country  :quant (explicitanon4 / --LEX--))--TYPE--()
(n<root> / natural-disaster  :name (n2 / --LEX--))--TYPE--()
(p2<root> / phone-number-entity  :value (explicitanon0 / --LEX--))--TYPE--()
(s<root> / --LEX--  :season-of (d<mod>))--TYPE--(mod())
(p<root> / possible-01  :ARG1 (l / --LEX--))--TYPE--()
(i<root> / --LEX--  :calendar-of (d<mod>))--TYPE--(mod())
(g<root> / government-organization  :ARG1-of (g2 / --LEX--))--TYPE--()
(p<root> / political-movement  :domain (c3<dom>)  :name (n / --LEX--))--TYPE--(dom())
(s<root> / store  :name (n / --LEX--))--TYPE--()
(s<root> / --LEX--  :ARG2 (f<o>)  :ARG1 (t<s>)  :ARG3 (d<o2>))--TYPE--(o(s_UNIFY_s()), o2(), s())
(p<root> / --LEX--  :ARG1 (c<s>)  :compared-to-of (s<mod>))--TYPE--(mod(mod_UNIFY_s()), s())
(l<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG1 (h<o>)  :ARG0 (y<s>))--TYPE--(o(o_UNIFY_s()), s())
(u<root> / --LEX--  :op1 (p2<op1>)  :extent-of (e<mod>))--TYPE--(mod(), op1())
(s<root> / --LEX--  :op1 (explicitanon0<op1>)  :frequency-of (c<mod>))--TYPE--(mod(), op1())
(explicitanon1<root> / Britain  :op1-of (n / --LEX--  :name-of (c<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :ARG0 (s<s>)  :instrument-of (m<mod>))--TYPE--(mod(), s())
(l<root> / location  :name (n / --LEX--)  :location-of (m<mod>))--TYPE--(mod())
(n3<root> / natural-object  :name (n4 / --LEX--))--TYPE--()
(a<root> / area-quantity  :unit (a2 / --LEX--))--TYPE--()
(c<root> / --LEX--  :ARG0 (c3<o>)  :ARG2 (p<s>))--TYPE--(o(), s())
(a3<root> / animal  :name (n3 / --LEX--))--TYPE--()
(s<root> / --LEX--  :ARG1 (t / thing  :compared-to-of (p<mod>)))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (p4 / political-party  :mod-of (t<mod>)))--TYPE--(mod())
(o2<root> / organization  :name (n / --LEX--)  :location-of (h<mod>))--TYPE--(mod())
(f<root> / festival  :name (n / --LEX--)  :mod-of (p<mod>))--TYPE--(mod())
(n<root> / --LEX--  :op3 (explicitanon4<op3>)  :op2 (explicitanon3<op2>)  :op1 (explicitanon2<op1>)  :name-of (g<mod>))--TYPE--(mod(), op1(), op2(), op3())
(r<root> / rate-entity-91  :ARG2 (d2 / --LEX--)  :ARG1 (i2<s>))--TYPE--(s())
(n2<root> / --LEX--  :name-of (l / location  :location-of (s3<mod>)))--TYPE--(mod())
(t<root> / thing  :ARG1-of (i / --LEX--  :ARG3 (o2<o2>)  :ARG2 (p2<s>)))--TYPE--(o2(), s())
(g<root> / --LEX--  :ARG1 (e<s>)  :ARG0 (d<mod>  :purpose g))--TYPE--(mod(), s())
(m2<root> / most  :degree-of (l / --LEX--  :time-of (n<mod>)))--TYPE--(mod())
(m3<root> / military  :name (n2 / --LEX--)  :poss (m<poss>))--TYPE--(poss())
(a2<root> / airport  :name (n2 / --LEX--))--TYPE--()
(s3<root> / --LEX--  :ARG1 (i<s>)  :ARG2 (p2<o>)  :example-of (q<mod>))--TYPE--(mod(), o(), s())
(a<root> / --LEX--  :op3 (r<op3>)  :op1 (d2<op1>)  :op2 (e2<op2>)  :source-of (g<mod>))--TYPE--(mod(), op1(), op2(), op3())
(r<root> / --LEX--  :ARG0 (i / i))--TYPE--()
(a<root> / --LEX--  :ARG0-of (c / cause-01))--TYPE--()
(t<root> / --LEX--  :ARG2 (t2<s>)  :ARG1 (i<o>  :ARG0-of t))--TYPE--(o(), s(s_UNIFY_o()))
(d<root> / date-entity  :time (a / --LEX--))--TYPE--()
(e<root> / enzyme  :name (n / --LEX--))--TYPE--()
(l<root> / --LEX--  :manner (l2 / loud)  :ARG0 (i / i))--TYPE--()
(b<root> / broadcast-program  :name (n / --LEX--)  :mod-of (p<mod>))--TYPE--(mod())
(g<root> / --LEX--  :ARG2 (a<o>)  :ARG4 (h<s>))--TYPE--(o(), s())
(f<root> / --LEX--  :ARG1 (b<s>)  :prep-on-behalf-of (g<mod>))--TYPE--(mod(), s())
(b<root> / --LEX--  :mode (explicitanon1 / imperative)  :ARG1 (y / you  :ARG0-of b))--TYPE--()
(p<root> / --LEX--  :poss (y<poss>)  :manner-of (t<mod>))--TYPE--(mod(), poss())
(p<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (r<o>)  :subevent-of (g<mod>))--TYPE--(mod(s_UNIFY_s()), o(), s())
(g<root> / --LEX--  :range-of (o<mod>))--TYPE--(mod())
(p<root> / possible-01  :ARG1 (a / --LEX--  :ARG0 (y<s>)  :ARG1 (n<o>)))--TYPE--(o(), s())
(t<root> / --LEX--  :ARG3 (i<s>)  :mod-of (e<mod>))--TYPE--(mod(), s())
(f<root> / festival  :name (n / --LEX--)  :time-of (s<mod>))--TYPE--(mod())
(f<root> / film  :name (n / --LEX--))--TYPE--()
(g<root> / --LEX--  :ARG0 (t<s>)  :ARG4 (w<o>))--TYPE--(o(s_UNIFY_s()), s())
(p2<root> / percentage-entity  :value (explicitanon2 / --LEX--)  :mod-of (p<mod>))--TYPE--(mod())
(t<root> / --LEX--  :poss (s<poss>)  :destination-of (m<mod>))--TYPE--(mod(), poss())
(c<root> / --LEX--  :ARG1 (p<s>)  :degree-of (o<mod>))--TYPE--(mod(), s())
(d<root> / doctor  :name (n / --LEX--))--TYPE--()
(a<root> / --LEX--  :ARG1 (p<o>)  :ARG1 (p2<s>))--TYPE--(o(), s())
(d2<root> / --LEX--  :ARG1 (s<o>)  :ARG0 (p<s>)  :purpose-of (d<mod>))--TYPE--(mod(), o(o_UNIFY_s()), s())
(p<root> / person  :name (n2 / --LEX--)  :time-of (i<mod>))--TYPE--(mod())
(t<root> / thing  :ARG0-of (d / --LEX--  :ARG2 (p<s>)))--TYPE--(s())
(t2<root> / thing  :ARG3-of (l / --LEX--  :ARG1 (t3<s>)))--TYPE--(s())
(explicitanon2<root> / --LEX--  :value-of (u / url-entity  :source-of (p<mod>)))--TYPE--(mod())
(h<root> / have-rel-role-91  :ARG2 (f / --LEX--))--TYPE--()
(p2<root> / --LEX--  :ARG1 (p3<s>)  :prep-with-of (r<mod>))--TYPE--(mod(), s())
(t2<root> / --LEX--  :ARG1 (w<o>)  :ARG2 (r<o2>)  :ARG0 (p<s>))--TYPE--(o(), o2(o_UNIFY_o(), s_UNIFY_s()), s())
(s2<root> / --LEX--  :ARG2 (l<o>)  :time-of (r<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(s<root> / --LEX--  :ARG0 (i<s>)  :ARG2 (p<o2>)  :ARG1 (b<o>))--TYPE--(o(o_UNIFY_o2()), o2(), s())
(p2<root> / --LEX--  :ARG0 (t<o>)  :ARG1 (p<s>)  :concession-of (i<mod>))--TYPE--(mod(), o(), s())
(g<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG2 (u<o2>)  :ARG0 (y<s>  :ARG1-of g))--TYPE--(o2(), s())
(d<root> / date-entity  :dayperiod (m / --LEX--))--TYPE--()
(m<root> / more  :degree-of (l / --LEX--  :manner-of (b<mod>)))--TYPE--(mod())
(c<root> / company  :name (n2 / --LEX--)  :location-of (a<mod>))--TYPE--(mod())
(n3<root> / --LEX--  :name-of (c2 / county  :location-of (l2<mod>)))--TYPE--(mod())
(h2<root> / have-rel-role-91  :ARG2 (c / --LEX--)  :ARG1 (h<s>))--TYPE--(s())
(a<root> / --LEX--  :op2 (p<op2>)  :op1 (t<op1>)  :op3 (d<op3>))--TYPE--(op1(o_UNIFY_o(), s_UNIFY_s()), op2(o_UNIFY_o(), s_UNIFY_s()), op3(o_UNIFY_o(), s_UNIFY_s()))
(d2<root> / distance-quantity  :unit (m2 / --LEX--)  :quant-of (r / relative-position  :op1 (c2<op1>)  :location-of (w<mod>)))--TYPE--(mod(), op1())
(p<root> / --LEX--  :ARG1 (o<s>)  :beneficiary-of (t<mod>))--TYPE--(mod(), s())
(p<root> / person  :quant (explicitanon0 / --LEX--)  :beneficiary-of (w<mod>))--TYPE--(mod())
(s<root> / sea  :name (n / --LEX--)  :location-of (c2<mod>))--TYPE--(mod())
(m<root> / monetary-quantity  :quant (explicitanon2 / --LEX--)  :mod-of (c4<mod>))--TYPE--(mod())
(a<root> / --LEX--  :op1 (t<op1>)  :op3 (c2<op3>))--TYPE--(op1(), op3())
(p2<root> / --LEX--  :ARG2-of (h / have-org-role-91  :ARG1 (c<o>)  :ARG3 (c2<o3>)  :ARG0 (p<s>)))--TYPE--(o(), o3(), s())
(s2<root> / --LEX--  :ARG1 (t3<o>)  :ARG0 (p<s>)  :manner-of (s<mod>))--TYPE--(mod(s_UNIFY_s()), o(), s())
(d3<root> / drug  :name (n2 / --LEX--))--TYPE--()
(q<root> / --LEX--  :ARG1 (p<o>))--TYPE--(o())
(m2<root> / mass-quantity  :unit (t / --LEX--)  :op1-of (m / multiple  :quant-of (e<mod>)))--TYPE--(mod())
(v<root> / vehicle  :name (n2 / --LEX--))--TYPE--()
(d<root> / --LEX--  :domain (y / you))--TYPE--()
(a<root> / amr-unintelligible  :value (explicitanon0 / --LEX--))--TYPE--()
(v<root> / volume-quantity  :unit (g / --LEX--))--TYPE--()
(g<root> / government-organization  :source-of (f<mod>)  :ARG0-of (g2 / --LEX--))--TYPE--(mod())
(t<root> / --LEX--  :ARG0 (i / i)  :ARG1 (y<s>))--TYPE--(s())
(g<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG0 (y / you)  :ARG4 (h<s>))--TYPE--(s())
(g<root> / --LEX--  :ARG0 (w<s>)  :ARG4 (a<o2>)  :ARG3 (h<o>))--TYPE--(o(), o2(), s())
(c<root> / country  :name (n / --LEX--)  :prep-against-of (e<mod>))--TYPE--(mod())
(a<root> / --LEX--  :age-of (p<mod>))--TYPE--(mod())
(o<root> / --LEX--  :ARG2 (d<o>)  :condition-of (j<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(t<root> / thing  :compared-to-of (o<mod>)  :ARG1-of (t2 / --LEX--))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (w2 / war  :mod-of (v<mod>)))--TYPE--(mod())
(p<root> / --LEX--  :ARG2 (t<s>)  :ARG3 (l<o>))--TYPE--(o(s_UNIFY_s()), s())
(n<root> / now  :op1-of (b / --LEX--  :time-of (r<mod>)))--TYPE--(mod())
(c<root> / --LEX--  :domain (i<dom>)  :compared-to-of (r<mod>))--TYPE--(dom(), mod())
(t<root> / --LEX--  :poss (y<poss>)  :path-of (d<mod>))--TYPE--(mod(), poss())
(c<root> / city  :name (n / --LEX--)  :destination-of (d<mod>))--TYPE--(mod())
(l<root> / law  :name (n / --LEX--)  :topic-of (t<mod>))--TYPE--(mod())
(n<root> / --LEX--  :name-of (t2 / thing  :mod-of (r<mod>)))--TYPE--(mod())
(e<root> / --LEX--  :ARG0 (w<s>)  :ARG2 (c2<o>))--TYPE--(o(o_UNIFY_s()), s())
(t<root> / thing  :ARG1-of (b / --LEX--  :purpose-of (r<mod>)))--TYPE--(mod())
(c<root> / --LEX--  :ARG0 (i<s>  :ARG2-of c))--TYPE--(s())
(t<root> / temporal-quantity  :unit (y / --LEX--)  :range-of (o<mod>))--TYPE--(mod())
(l<root> / law  :name (n / --LEX--)  :mod-of (f<mod>))--TYPE--(mod())
(p<root> / --LEX--  :ARG0 (i<s>)  :medium-of (e2<mod>))--TYPE--(mod(), s())
(t<root> / thing  :ARG1-of (p / --LEX--  :ARG0 (p2<s>)  :ARG3 (w<o2>)))--TYPE--(o2(), s())
(g<root> / --LEX--  :ARG2 (s<s>)  :degree (m / more))--TYPE--(s())
(n2<root> / --LEX--  :name-of (c2 / country-region  :location-of (c<mod>)))--TYPE--(mod())
(g<root> / group  :name (n / --LEX--))--TYPE--()
(h<root> / --LEX--  :ARG1 (p<o>)  :ARG0 (c<s>)  :condition-of (r<mod>))--TYPE--(mod(s_UNIFY_s()), o(), s())
(c<root> / country  :name (n / --LEX--)  :accompanier-of (e<mod>))--TYPE--(mod())
(t<root> / --LEX--  :ARG1 (t2<o>)  :ARG0 (f<s>)  :ARG2 (i<o2>))--TYPE--(o(), o2(), s(s_UNIFY_o2()))
(p2<root> / person  :poss (w<poss>)  :ARG0-of (h / have-org-role-91  :ARG2 (p / --LEX--)))--TYPE--(poss())
(d<root> / --LEX--  :ARG0 (o<o>)  :ARG3 (l<o2>)  :ARG1 (t2<s>))--TYPE--(o(), o2(), s())
(g<root> / --LEX--  :ARG1 (m2<o>)  :ARG4 (h2<o2>)  :ARG0 (h<s>)  :purpose-of (s<mod>))--TYPE--(mod(), o(), o2(), s())
(r2<root> / --LEX--  :ARG1 (r<s>)  :ARG1-of (p2 / possible-01  :polarity (explicitanon0 / -)))--TYPE--(s())
(a<root> / --LEX--  :op2 (s2<op2>)  :op1 (s<op1>)  :purpose-of (c<mod>))--TYPE--(mod(), op1(o_UNIFY_o(), s_UNIFY_s()), op2(o_UNIFY_o(), s_UNIFY_s()))
(s2<root> / --LEX--  :part-of (g<poss>)  :compared-to-of (s4<mod>))--TYPE--(mod(), poss())
(d<root> / --LEX--  :ARG1 (t2 / thing  :topic-of (r<mod>)))--TYPE--(mod())
(d<root> / --LEX--  :ARG1 (i<s>)  :direction-of (g<mod>))--TYPE--(mod(), s())
(b<root> / --LEX--  :op1 (t<op1>)  :compared-to-of (n2<mod>))--TYPE--(mod(), op1())
(r<root> / --LEX--  :ARG3 (d2<o2>)  :ARG4 (s<o3>)  :ARG2 (p<o>)  :ARG1 (m<s>))--TYPE--(o(), o2(), o3(), s())
(n2<root> / --LEX--  :name-of (i / incident  :mod-of (c<mod>)))--TYPE--(mod())
(l<root> / law  :poss (w<poss>)  :name (n / --LEX--))--TYPE--(poss())
(a<root> / --LEX--  :op2 (m<op2>)  :time-of (s<mod>))--TYPE--(mod(), op2())
(l<root> / --LEX--  :ARG0 (p<s>)  :ARG1 (c<o>))--TYPE--(o(mod_UNIFY_s()), s())
(l2<root> / --LEX--  :ARG2 (y<o2>)  :ARG1 (p<o>)  :ARG0 (h<s>)  :mod-of (l<mod>))--TYPE--(mod(), o(), o2(), s())
(explicitanon0<root> / -  :polarity-of (s2 / --LEX--  :ARG2 (g<o>)  :ARG1 (t<s>)))--TYPE--(o(), s())
(f<root> / --LEX--  :ARG0 (y<s>)  :ARG2 (m<o2>))--TYPE--(o2(), s())
(g<root> / --LEX--  :ARG2 (m2<o>)  :ARG1 (d<s>)  :compared-to-of (b<mod>))--TYPE--(mod(), o(), s())
(explicitanon0<root> / --LEX--  :century-of (d<mod>))--TYPE--(mod())
(i<root> / --LEX--  :ARG1 (p<s>)  :medium-of (s<mod>))--TYPE--(mod(), s())
(d<root> / date-entity  :timezone (explicitanon7 / --LEX--)  :time-of (s<mod>))--TYPE--(mod())
(p<root> / --LEX--  :ARG2 (p2<o>)  :purpose-of (o<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(s<root> / --LEX--  :ARG0 (y<s>)  :ARG1 (p2<o>)  :consist (i<mod>))--TYPE--(mod(), o(), s())
(r<root> / road  :name (n2 / --LEX--)  :location-of (s<mod>))--TYPE--(mod())
(c<root> / --LEX--  :ARG1 (t<o>)  :ARG2 (p2<o2>)  :ARG0 (s<s>)  :concession-of (t2<mod>))--TYPE--(mod(), o(), o2(), s())
(t<root> / thing  :ARG1-of (a2 / --LEX--)  :manner-of (w<mod>))--TYPE--(mod())
(e<root> / --LEX--  :ARG1 (t<o>)  :manner-of (g<mod>))--TYPE--(mod(), o())
(t<root> / --LEX--  :ARG1 (d<s>)  :prep-against-of (e<mod>))--TYPE--(mod(), s())
(m<root> / mountain  :name (n / --LEX--))--TYPE--()
(n3<root> / --LEX--  :name-of (e / event  :time-of (l<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :op2 (d<op2>)  :op1 (w<op1>)  :prep-to-of (t<mod>))--TYPE--(mod(), op1(), op2())
(explicitanon1<root> / --LEX--  :value-of (u / url-entity  :mod-of (w<mod>)))--TYPE--(mod())
(e<root> / event  :name (n / --LEX--)  :time-of (v<mod>))--TYPE--(mod())
(m<root> / monetary-quantity  :unit (d / --LEX--)  :op1-of (m2 / multiple  :mod-of (c2<mod>)))--TYPE--(mod())
(s<root> / strait  :name (n / --LEX--))--TYPE--()
(n2<root> / --LEX--  :op3 (explicitanon5<op3>)  :op2 (explicitanon4<op2>)  :op4 (explicitanon6<op4>)  :op1 (explicitanon3<op1>)  :name-of (c2<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4())
(b<root> / byline-91  :ARG0 (p / publication  :name (n / --LEX--))  :ARG1 (a<s>))--TYPE--(s())
(k<root> / --LEX--  :ARG2 (p3<o2>)  :ARG0 (p2<s>)  :ARG1 (b<o>)  :purpose-of (s<mod>))--TYPE--(mod(), o(), o2(s_UNIFY_o()), s())
(t4<root> / temporal-quantity  :unit (d3 / --LEX--)  :ARG2-of (r / rate-entity-91  :ARG1 (t3<s>)))--TYPE--(s())
(m<root> / --LEX--  :ARG0 (p2<s>)  :ARG1 (p3<o>)  :location-of (s<mod>))--TYPE--(mod(), o(), s())
(a2<root> / --LEX--  :op1 (p<op1>)  :op2 (m2<op2>)  :medium-of (d<mod>))--TYPE--(mod(), op1(), op2())
(c3<root> / --LEX--  :ARG0 (p / person  :mod-of (g<mod>)))--TYPE--(mod())
(s<root> / sea  :name (n5 / --LEX--))--TYPE--()
(p4<root> / person  :ARG0-of (p3 / --LEX--  :ARG1 (m<o>)  :ARG3 (f<s>)))--TYPE--(o(), s())
(a2<root> / --LEX--  :op4 (d3<op4>)  :op3 (d2<op3>)  :op6 (a3<op6>)  :op9 (o<op9>)  :op1 (r<op1>)  :op5 (t<op5>)  :op8 (r2<op8>)  :op10 (e<op10>)  :op7 (t2<op7>)  :op2 (w2<op2>))--TYPE--(op1(), op10(), op2(), op3(), op4(), op5(), op6(), op7(), op8(), op9())
(s<root> / ship  :name (n / --LEX--)  :location-of (c2<mod>))--TYPE--(mod())
(e<root> / --LEX--  :time (n / now))--TYPE--()
(s<root> / seismic-quantity  :quant (explicitanon0 / --LEX--))--TYPE--()
(t<root> / --LEX--  :ARG2 (v<s>)  :domain (t2<dom>))--TYPE--(dom(), s())
(b<root> / --LEX--  :degree (m / most)  :manner-of (c<mod>))--TYPE--(mod())
(b<root> / --LEX--  :ARG0 (e<s>)  :ARG1 (h<o>))--TYPE--(o(), s(poss_UNIFY_o()))
(n3<root> / --LEX--  :name-of (l / language  :medium-of (n<mod>)))--TYPE--(mod())
(g<root> / --LEX--  :ARG1 (i<s>)  :extent-of (o<mod>))--TYPE--(mod(), s())
(e<root> / --LEX--  :polarity (explicitanon0 / -)  :ARG3 (i<s>))--TYPE--(s())
(p<root> / --LEX--  :ARG3 (c<s>)  :time-of (u<mod>))--TYPE--(mod(), s())
(l<root> / language  :name (n / --LEX--)  :medium-of (t<mod>))--TYPE--(mod())
(c<root> / company  :name (n2 / --LEX--)  :medium-of (b<mod>))--TYPE--(mod())
(w<root> / --LEX--  :ARG1 (s<mod>  :condition w)  :ARG0 (y<s>))--TYPE--(mod(), s())
(l<root> / --LEX--  :ARG2 (s<s>)  :direction-of (e<mod>))--TYPE--(mod(), s())
(g<root> / --LEX--  :degree (m / more)  :manner-of (t<mod>))--TYPE--(mod())
(explicitanon3<root> / --LEX--  :value-of (p3 / percentage-entity  :mod-of (p<mod>)))--TYPE--(mod())
(explicitanon0<root> / -  :polarity-of (c / --LEX--  :quant-of (t2<mod>)))--TYPE--(mod())
(t<root> / --LEX--  :ARG1 (o2<o>)  :ARG2 (m<s>)  :purpose-of (p<mod>))--TYPE--(mod(), o(), s())
(n<root> / --LEX--  :name-of (d2 / disease  :mod-of (s<mod>)))--TYPE--(mod())
(v<root> / volume-quantity  :quant (explicitanon0 / --LEX--)  :quant-of (b<mod>))--TYPE--(mod())
(t<root> / --LEX--  :poss (y<poss>)  :location-of (h<mod>))--TYPE--(mod(s_UNIFY_poss()), poss())
(t<root> / thing  :ARG5-of (r / --LEX--))--TYPE--()
(g2<root> / --LEX--  :domain (t<dom>)  :degree (m / most))--TYPE--(dom())
(a<root> / --LEX--  :op1 (f<op1>)  :op3 (b2<op3>)  :op2 (h<op2>)  :part-of (v<poss>))--TYPE--(op1(), op2(), op3(), poss())
(s<root> / --LEX--  :ARG2 (m<o2>)  :ARG1 (g<o>)  :ARG0 (i<s>))--TYPE--(o(o2_UNIFY_s(), s_UNIFY_o2()), o2(), s())
(a2<root> / --LEX--  :op2 (k<op2>)  :op1 (p<op1>)  :prep-for-of (l<mod>))--TYPE--(mod(), op1(), op2())
(r<root> / religious-group  :name (n / --LEX--)  :topic-of (a<mod>))--TYPE--(mod())
(f<root> / --LEX--  :ARG0 (y<s>)  :ARG1 (l<o>)  :condition-of (e2<mod>))--TYPE--(mod(), o(poss_UNIFY_s()), s())
(l<root> / --LEX--  :ARG3 (p2<o>)  :ARG0 (p<s>))--TYPE--(o(poss_UNIFY_s()), s())
(a<root> / --LEX--  :op2 (s<op2>)  :op3 (w<op3>)  :op1 (k<op1>)  :consist (p<mod>))--TYPE--(mod(), op1(), op2(), op3())
(t<root> / --LEX--  :ARG0 (i<o2>)  :ARG1 (p<o>)  :ARG2 (h<s>)  :time-of (c<mod>))--TYPE--(mod(), o(), o2(), s())
(t2<root> / temperature-quantity  :quant (explicitanon2 / --LEX--))--TYPE--()
(n2<root> / --LEX--  :name-of (c2 / country  :prep-against-of (e<mod>)))--TYPE--(mod())
(g<root> / --LEX--  :ARG2 (c<s>)  :degree (m / most))--TYPE--(s())
(p<root> / person  :consist (c<mod>)  :ARG1-of (e / --LEX--))--TYPE--(mod())
(d<root> / --LEX--  :ARG0 (i<s>)  :ARG2 (d2<o>)  :compared-to-of (t<mod>))--TYPE--(mod(), o(), s())
(f<root> / --LEX--  :ARG3 (m<o>)  :ARG1 (t<s>)  :time-of (b<mod>))--TYPE--(mod(), o(), s())
(r<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (d<o>)  :source-of (t<mod>))--TYPE--(mod(), o(), s())
(a2<root> / --LEX--  :op2 (n2<op2>)  :op1 (w<op1>))--TYPE--(op1(o_UNIFY_o(s_UNIFY_s()), s_UNIFY_s()), op2(o_UNIFY_o(s_UNIFY_s()), s_UNIFY_s()))
(a<root> / --LEX--  :op2 (f2<op2>)  :op1 (b2<op1>)  :direction-of (f<mod>))--TYPE--(mod(), op1(), op2())
(t<root> / temporal-quantity  :quant (explicitanon2 / --LEX--)  :op1-of (m / multiple  :duration-of (d<mod>)))--TYPE--(mod())
(p2<root> / --LEX--  :ARG1 (b<s>)  :instrument-of (e<mod>))--TYPE--(mod(), s())
(i2<root> / --LEX--  :ARG2 (t2<o>)  :ARG0 (g<s>)  :topic-of (p<mod>))--TYPE--(mod(), o(), s())
(t<root> / thing  :ARG1-of (g / --LEX--  :ARG0 (p<s>)  :purpose-of (d<mod>)))--TYPE--(mod(), s())
(t2<root> / thing  :ARG2-of (i / --LEX--  :ARG3 (m<s>)  :ARG1 (w<o>)))--TYPE--(o(), s())
(p2<root> / planet  :name (n / --LEX--)  :location-of (h2<mod>))--TYPE--(mod())
(t<root> / thing  :ARG3-of (l / --LEX--  :ARG2 (i2<o>)  :ARG1 (i<s>)))--TYPE--(o(), s())
(e<root> / --LEX--  :poss (d<poss>)  :purpose-of (n<mod>))--TYPE--(mod(), poss())
(p2<root> / --LEX--  :ARG1 (p3 / person))--TYPE--()
(a<root> / --LEX--  :ARG0 (i<s>)  :prep-on-behalf-of (y<mod>))--TYPE--(mod(), s())
(h<root> / harbor  :name (n / --LEX--))--TYPE--()
(n3<root> / --LEX--  :name-of (c2 / city-district  :location-of (l<mod>)))--TYPE--(mod())
(m<root> / market  :name (n / --LEX--))--TYPE--()
(h<root> / have-org-role-91  :ARG2 (p3 / person  :ARG0-of (s / --LEX--))  :ARG1 (g<o>)  :ARG0 (p2<s>))--TYPE--(o(), s())
(e<root> / --LEX--  :ARG1 (i<s>)  :time-of (t2<mod>))--TYPE--(mod(s_UNIFY_s()), s())
(r<root> / --LEX--  :poss (a<poss>)  :prep-on-of (b<mod>))--TYPE--(mod(), poss())
(j<root> / journal  :name (n / --LEX--))--TYPE--()
(n2<root> / --LEX--  :name-of (g / government-organization  :source-of (c<mod>)))--TYPE--(mod())
(d<root> / date-entity  :time (explicitanon6 / --LEX--)  :time-of (b<mod>))--TYPE--(mod())
(p3<root> / park  :name (n2 / --LEX--))--TYPE--()
(e<root> / --LEX--  :domain (a<dom>)  :example-of (b<mod>))--TYPE--(dom(), mod())
(explicitanon1<root> / United  :op1-of (n / --LEX--  :op2 (explicitanon2<op2>)  :name-of (c<mod>)))--TYPE--(mod(), op2())
(g<root> / --LEX--  :ARG4 (s<o>)  :ARG0 (y<s>)  :time-of (f<mod>))--TYPE--(mod(), o(), s())
(g<root> / --LEX--  :mode (explicitanon1 / imperative)  :ARG2 (i<o2>)  :ARG1 (a2<o>)  :ARG0 (y<s>))--TYPE--(o(s_UNIFY_s()), o2(), s())
(p<root> / --LEX--  :ARG1 (e<s>)  :time (n / now))--TYPE--(s())
(t2<root> / --LEX--  :ARG1 (t3<s>)  :accompanier-of (p<mod>))--TYPE--(mod(), s())
(p2<root> / person  :prep-as-of (s<mod>)  :ARG0-of (o / --LEX--))--TYPE--(mod())
(h<root> / --LEX--  :ARG2 (u<o>)  :concession-of (c<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(c2<root> / --LEX--  :ARG2 (p<o>)  :ARG0 (y<s>)  :manner-of (c<mod>))--TYPE--(mod(), o(), s())
(explicitanon2<root> / --LEX--  :quant-of (s / seismic-quantity  :quant-of (e<mod>)))--TYPE--(mod())
(p2<root> / --LEX--  :ARG1 (g3<o>)  :compared-to-of (g2<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(o<root> / --LEX--  :op3 (d<op3>)  :op1 (l<op1>)  :op2 (l2<op2>)  :mod-of (r<mod>))--TYPE--(mod(), op1(), op2(), op3())
(c<root> / --LEX--  :ARG0 (w<s>)  :ARG1 (k<o>)  :domain (p2<dom>))--TYPE--(dom(), o(s_UNIFY_s()), s())
(r<root> / rocket  :name (n / --LEX--))--TYPE--()
(a<root> / --LEX--  :op3 (e<op3>)  :op4 (e2<op4>)  :op1 (n<op1>)  :op2 (h<op2>)  :topic-of (i<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4())
(c2<root> / country  :ARG0-of (h / have-org-role-91  :ARG2 (m / --LEX--)))--TYPE--()
(p2<root> / --LEX--  :ARG0 (y<s>)  :ARG3 (d<o>))--TYPE--(o(o_UNIFY_s()), s())
(s<root> / --LEX--  :ARG2 (w3<o>)  :manner-of (w<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(e<root> / --LEX--  :ARG0 (t2 / thing))--TYPE--()
(a2<root> / --LEX--  :op1 (m<op1>)  :op2 (r<op2>)  :prep-against-of (a<mod>))--TYPE--(mod(), op1(), op2())
(i<root> / island  :name (n / --LEX--)  :location-of (b<mod>))--TYPE--(mod())
(a<root> / --LEX--  :op4 (m2<op4>)  :op2 (m<op2>)  :op7 (h<op7>)  :op6 (s<op6>)  :op9 (p<op9>)  :op1 (i<op1>)  :op3 (g<op3>)  :op8 (r<op8>)  :op5 (w<op5>))--TYPE--(op1(), op2(), op3(), op4(), op5(), op6(), op7(), op8(), op9())
(t<root> / temporal-quantity  :unit (y / --LEX--)  :quant-of (a / after  :op1 (n2 / now)  :time-of (t2<mod>)))--TYPE--(mod())
(s2<root> / --LEX--  :ARG1 (f<o>)  :ARG0 (d<s>)  :time-of (s<mod>))--TYPE--(mod(s_UNIFY_s()), o(), s())
(m2<root> / military  :name (n / --LEX--)  :location-of (g<mod>))--TYPE--(mod())
(d<root> / --LEX--  :ARG1 (a<s>)  :prep-for-of (c<mod>))--TYPE--(mod(), s())
(w<root> / --LEX--  :ARG0 (p<s>)  :ARG4 (o<o2>)  :ARG2 (e<o>))--TYPE--(o(), o2(), s())
(p<root> / person  :ARG1-of (l2 / --LEX--  :polarity (explicitanon0 / -)))--TYPE--()
(p2<root> / person  :ARG0-of (h / have-org-role-91  :ARG2 (p3 / person  :ARG1-of (e / --LEX--))))--TYPE--()
(n2<root> / --LEX--  :name-of (n3 / newspaper  :mod-of (w<mod>)))--TYPE--(mod())
(explicitanon2<root> / --LEX--  :year-of (d / date-entity  :mod-of (l<mod>)))--TYPE--(mod())
(t<root> / thing  :medium-of (c2<mod>)  :ARG1-of (e / --LEX--))--TYPE--(mod())
(r<root> / --LEX--  :ARG1 (t2<o>)  :ARG3 (t3<o2>)  :ARG0 (r3<s>)  :ARG4 (t4<o3>))--TYPE--(o(), o2(), o3(), s())
(s<root> / --LEX--  :ARG0 (t2<s>)  :ARG3 (t<o3>)  :ARG1 (p<o>)  :ARG2 (d2<o2>))--TYPE--(o(), o2(s_UNIFY_o()), o3(), s())
(v<root> / variable  :name (n / --LEX--)  :mod-of (t<mod>))--TYPE--(mod())
(n3<root> / --LEX--  :name-of (c2 / country  :beneficiary-of (h<mod>)))--TYPE--(mod())
(c<root> / city  :ARG0-of (h2 / have-rel-role-91  :ARG2 (s2 / --LEX--)))--TYPE--()
(n2<root> / --LEX--  :name-of (g2 / gulf  :mod-of (s<mod>)))--TYPE--(mod())
(h<root> / --LEX--  :ARG1 (i<s>)  :concession-of (s<mod>))--TYPE--(mod(s_UNIFY_s()), s())
(p<root> / --LEX--  :ARG0 (p2 / person))--TYPE--()
(l<root> / --LEX--  :manner (l2 / loud))--TYPE--()
(s<root> / string-entity  :value (explicitanon0 / --LEX--)  :domain (w<dom>))--TYPE--(dom())
(m<root> / --LEX--  :ARG2 (a<s>)  :ARG0 (y / you))--TYPE--(s())
(p<root> / person  :name (n / --LEX--)  :ARG2-of (s / sign-01))--TYPE--()
(n2<root> / --LEX--  :name-of (t2 / team  :location-of (t<mod>)))--TYPE--(mod())
(p<root> / --LEX--  :ARG1 (o<s>  :compared-to p))--TYPE--(s())
(o<root> / --LEX--  :ARG1 (c<o>)  :ARG0 (h<s>)  :conj-as-if-of (a<mod>))--TYPE--(mod(), o(), s())
(g<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG0 (w<s>)  :ARG4 (h<o>))--TYPE--(o(), s())
(l2<root> / --LEX--  :mode (explicitanon0 / expressive)  :ARG0 (i / i))--TYPE--()
(t<root> / --LEX--  :ARG2 (g<s>)  :ARG1 (y / you))--TYPE--(s())
(p<root> / political-party  :name (n / --LEX--)  :accompanier-of (d<mod>))--TYPE--(mod())
(d<root> / --LEX--  :ARG1 (t / thing  :location-of (l<mod>)))--TYPE--(mod())
(g<root> / --LEX--  :ARG1 (t2 / thing  :domain (t<dom>)))--TYPE--(dom())
(i<root> / --LEX--  :ARG2 (r<o2>)  :ARG1 (h<o>)  :ARG0 (w<s>))--TYPE--(o(), o2(), s(poss_UNIFY_o()))
(t<root> / thing  :poss (p<poss>)  :ARG1-of (f / --LEX--))--TYPE--(poss())
(d<root> / disease  :domain (d2<dom>)  :name (n / --LEX--))--TYPE--(dom())
(p<root> / --LEX--  :ARG1 (r<s>)  :compared-to-of (f<mod>))--TYPE--(mod(s_UNIFY_s()), s())
(t<root> / --LEX--  :ARG0 (i<s>)  :ARG2 (a<o2>)  :ARG1 (p<o>))--TYPE--(o(), o2(dom_UNIFY_s()), s())
(w<root> / --LEX--  :ARG2 (f<o2>)  :ARG0 (m<s>)  :ARG1 (m2<o>))--TYPE--(o(poss_UNIFY_s()), o2(poss_UNIFY_s()), s())
(t<root> / thing  :quant (explicitanon0 / --LEX--)  :example-of (c2<mod>))--TYPE--(mod())
(g<root> / government-organization  :domain (g3<dom>)  :ARG0-of (g2 / --LEX--))--TYPE--(dom())
(g<root> / --LEX--  :mode (explicitanon1 / imperative)  :ARG2 (d<s>)  :ARG1 (y / you))--TYPE--(s())
(k<root> / --LEX--  :ARG1 (f<o>)  :ARG0 (y<s>)  :mod-of (e<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(g2<root> / --LEX--  :ARG0 (y<s>)  :ARG2 (i<o>)  :mod-of (g<mod>))--TYPE--(mod(), o(), s())
(t<root> / thing  :domain (i<dom>)  :name (n / --LEX--))--TYPE--(dom())
(w<root> / --LEX--  :ARG0 (t2 / thing)  :ARG1 (a<s>))--TYPE--(s())
(b<root> / --LEX--  :ARG2 (w<o2>)  :ARG1 (y<o>)  :ARG0 (i<s>))--TYPE--(o(), o2(poss_UNIFY_o()), s())
(b<root> / broadcast-program  :name (n2 / --LEX--)  :location-of (p<mod>))--TYPE--(mod())
(b<root> / book  :name (n / --LEX--)  :mod-of (e<mod>))--TYPE--(mod())
(o2<root> / operation  :name (n2 / --LEX--))--TYPE--()
(e<root> / event  :name (n / --LEX--)  :mod-of (c<mod>))--TYPE--(mod())
(g<root> / --LEX--  :ARG2-of (h2 / have-org-role-91  :ARG0 (h<s>)  :time-of (w<mod>)))--TYPE--(mod(), s())
(p<root> / --LEX--  :ARG2 (y<o>)  :ARG3 (e<o2>)  :ARG1 (m<s>))--TYPE--(o(), o2(s_UNIFY_o()), s())
(d<root> / --LEX--  :ARG1 (f<s>)  :part-of (s2<poss>))--TYPE--(poss(), s())
(explicitanon0<root> / --LEX--  :op1-of (m / multiple  :mod-of (a<mod>)))--TYPE--(mod())
(w2<root> / --LEX--  :poss (t<poss>)  :prep-against-of (w<mod>))--TYPE--(mod(), poss())
(s<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG0 (i<s>)  :ARG2 (s2<o>))--TYPE--(o(s_UNIFY_s()), s())
(p<root> / product  :name (n / --LEX--)  :topic-of (f<mod>))--TYPE--(mod())
(a<root> / --LEX--  :op1 (m<op1>)  :op2 (m2<op2>)  :degree-of (l<mod>))--TYPE--(mod(), op1(), op2())
(w<root> / war  :name (n2 / --LEX--)  :time-of (c<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (c2 / city  :destination-of (d<mod>)))--TYPE--(mod())
(w<root> / --LEX--  :ARG2-of (h / have-rel-role-91  :ARG1 (p<o>)  :ARG0 (p2<s>)))--TYPE--(o(), s(mod_UNIFY_o()))
(p2<root> / person  :ARG1-of (h / have-org-role-91  :ARG2 (p3 / --LEX--)))--TYPE--()
(m2<root> / market-sector  :name (n / --LEX--)  :mod-of (m<mod>))--TYPE--(mod())
(t3<root> / --LEX--  :ARG3 (i<o>)  :ARG0 (t<s>)  :time-of (g<mod>))--TYPE--(mod(), o(), s())
(r<root> / --LEX--  :ARG0 (p2<s>)  :example-of (c<mod>))--TYPE--(mod(), s())
(o<root> / --LEX--  :ARG3 (c2<o>)  :ARG1 (s<s>))--TYPE--(o(), s(s_UNIFY_o()))
(e<root> / earthquake  :name (n / --LEX--))--TYPE--()
(k<root> / --LEX--  :ARG3 (l2<o>)  :ARG1 (p<s>))--TYPE--(o(poss_UNIFY_s()), s())
(t<root> / temporal-quantity  :unit (y / --LEX--)  :op1-of (m / multiple  :time-of (s<mod>)))--TYPE--(mod())
(m<root> / --LEX--  :snt1 (y<snt1>)  :snt2 (p<snt2>))--TYPE--(snt1(), snt2(s_UNIFY_snt1()))
(e2<root> / empire  :name (n / --LEX--))--TYPE--()
(i<root> / --LEX--  :ARG1 (c<s>)  :conj-as-if-of (t<mod>))--TYPE--(mod(), s())
(c<root> / country  :name (n / --LEX--)  :prep-with-of (g<mod>))--TYPE--(mod())
(c<root> / --LEX--  :ARG1 (s<s>)  :prep-without-of (d<mod>))--TYPE--(mod(), s())
(d<root> / --LEX--  :ARG1-of (i2 / improvise-01))--TYPE--()
(s<root> / --LEX--  :ARG3 (p<o>))--TYPE--(o())
(i<root> / --LEX--  :ARG0 (g<s>)  :prep-to-of (s2<mod>))--TYPE--(mod(), s())
(l2<root> / --LEX--  :ARG4 (m2<o2>)  :ARG0 (c2<s>)  :ARG1 (f<o>))--TYPE--(o(poss_UNIFY_s()), o2(), s())
(a<root> / --LEX--  :ARG0 (i<s>)  :ARG2 (y<o>)  :domain (i2<dom>))--TYPE--(dom(), o(), s())
(l<root> / --LEX--  :degree (m2 / more)  :quant-of (c<mod>))--TYPE--(mod())
(d<root> / date-entity  :season (s / --LEX--))--TYPE--()
(s<root> / --LEX--  :ARG0 (d<o>  :purpose s)  :ARG1 (l<s>))--TYPE--(o(), s())
(p<root> / --LEX--  :ARG3 (d<o>)  :ARG0 (t<s>)  :purpose-of (r<mod>))--TYPE--(mod(), o(), s())
(n2<root> / --LEX--  :name-of (c2 / country  :example-of (p<mod>)))--TYPE--(mod())
(p2<root> / peninsula  :name (n / --LEX--)  :location-of (c<mod>))--TYPE--(mod())
(i<root> / --LEX--  :ARG1 (t<o>)  :ARG4 (n2<o2>)  :ARG0 (i2<s>))--TYPE--(o(), o2(s_UNIFY_o()), s())
(r<root> / research-institute  :poss (c<poss>)  :name (n / --LEX--))--TYPE--(poss())
(s<root> / --LEX--  :ARG2 (d<o>)  :ARG0 (p<s>)  :ARG3 (i<o2>))--TYPE--(o(), o2(s_UNIFY_s()), s())
(r2<root> / --LEX--  :ARG1 (e<s>)  :ARG3 (s<o>)  :condition-of (c<mod>))--TYPE--(mod(), o(), s())
(p<root> / --LEX--  :ARG1 (t / thing)  :ARG2 (s<s>))--TYPE--(s())
(p2<root> / political-party  :poss (b<poss>)  :name (n3 / --LEX--))--TYPE--(poss())
(d<root> / district  :name (n3 / --LEX--))--TYPE--()
(e<root> / --LEX--  :op1 (w<op1>)  :concession-of (r<mod>))--TYPE--(mod(), op1(s_UNIFY_mod()))
(p<root> / --LEX--  :ARG1 (b2<s>)  :destination-of (j<mod>))--TYPE--(mod(), s())
(o2<root> / ordinal-entity  :value (explicitanon3 / --LEX--)  :domain (p2<dom>))--TYPE--(dom())
(b<root> / --LEX--  :ARG1 (i<s>)  :prep-as-of (u<mod>))--TYPE--(mod(), s())
(n<root> / --LEX--  :ARG1 (f<o>  :condition n))--TYPE--(o())
(t<root> / thing  :name (n / --LEX--)  :location-of (m2<mod>))--TYPE--(mod())
(p<root> / person  :topic-of (t<mod>)  :ARG0-of (h / have-rel-role-91  :ARG2 (p2 / --LEX--)))--TYPE--(mod())
(d<root> / --LEX--  :ARG1 (c2<o>)  :ARG0 (c<s>)  :instrument-of (s<mod>))--TYPE--(mod(), o(), s())
(d<root> / distance-quantity  :unit (y / --LEX--)  :quant-of (r / relative-position  :location-of (s<mod>)))--TYPE--(mod())
(c2<root> / --LEX--  :ARG4 (h2<s>)  :time-of (h<mod>))--TYPE--(mod(), s())
(s<root> / --LEX--  :op1 (p2<op1>)  :op2 (n2<op2>)  :prep-without-of (a<mod>))--TYPE--(mod(), op1(), op2())
(g<root> / --LEX--  :ARG1 (b<s>)  :ARG4 (t<o>)  :condition-of (p<mod>))--TYPE--(mod(), o(), s())
(t3<root> / thing  :ARG1-of (c / --LEX--)  :mod-of (t<mod>))--TYPE--(mod())
(n2<root> / newspaper  :name (n3 / --LEX--)  :source-of (c<mod>))--TYPE--(mod())
(m<root> / more  :degree-of (b / --LEX--  :ARG1 (h<s>)  :ARG2 (i<o>)))--TYPE--(o(), s())
(m<root> / --LEX--  :snt1 (i<snt1>))--TYPE--(snt1())
(b<root> / broadcast-program  :name (n / --LEX--)  :source-of (v<mod>))--TYPE--(mod())
(i<root> / --LEX--  :polarity (explicitanon2 / -)  :ARG0 (w<s>)  :ARG1 (i2<o>))--TYPE--(o(s_UNIFY_s()), s())
(o<root> / --LEX--  :ARG1 (w<s>)  :ARG2 (p<o>)  :topic-of (f<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(p2<root> / --LEX--  :ARG0 (l<s>)  :purpose-of (m<mod>))--TYPE--(mod(s_UNIFY_s()), s())
(a<root> / --LEX--  :op1 (v2<op1>)  :poss (p<poss>)  :op2 (s2<op2>)  :op3 (m<op3>))--TYPE--(op1(), op2(), op3(), poss())
(n<root> / --LEX--  :name-of (c2 / country  :topic-of (u2<mod>)))--TYPE--(mod())
(t<root> / --LEX--  :ARG2 (i<s>)  :ARG1 (o<o>)  :ARG0 (h<o2>))--TYPE--(o(s_UNIFY_o2()), o2(), s())
(t<root> / --LEX--  :prep-along-with-of (o<mod>))--TYPE--(mod())
(p2<root> / person  :source-of (e<mod>)  :ARG0-of (d / --LEX--))--TYPE--(mod())
(f<root> / --LEX--  :ARG1 (s<s>)  :ARG3 (b<o>))--TYPE--(o(dom_UNIFY_s()), s())
(a<root> / --LEX--  :ARG2 (a2<o2>)  :ARG0 (p<s>)  :ARG1 (b<o>)  :time-of (d<mod>))--TYPE--(mod(), o(), o2(s_UNIFY_s()), s())
(h2<root> / --LEX--  :ARG1 (p2<o>)  :ARG2 (m / member)  :ARG0 (p<s>))--TYPE--(o(), s())
(p<root> / political-party  :name (n / --LEX--)  :compared-to-of (g<mod>))--TYPE--(mod())
(s<root> / --LEX--  :ARG0 (y<s>)  :ARG1 (f<o>)  :ARG2 (a<o2>))--TYPE--(o(o_UNIFY_s()), o2(), s())
(c2<root> / --LEX--  :poss (p<poss>)  :medium-of (b<mod>))--TYPE--(mod(), poss())
(w2<root> / --LEX--  :ARG1 (b<o>)  :ARG0 (y<s>)  :part-of (e<poss>))--TYPE--(o(), poss(), s())
(u<root> / --LEX--  :ARG1 (p<s>)  :duration-of (d<mod>))--TYPE--(mod(), s())
(d<root> / --LEX--  :ARG0 (h2<s>)  :ARG1 (o<o>  :manner d))--TYPE--(o(), s())
(p3<root> / person  :ARG1-of (a / --LEX--)  :compared-to-of (h<mod>))--TYPE--(mod())
(u<root> / --LEX--  :ARG0 (h<s>)  :ARG2 (b<o2>)  :ARG1 (c<o>))--TYPE--(o(), o2(o2_UNIFY_o(), s_UNIFY_s()), s())
(p3<root> / --LEX--  :ARG1 (t2 / thing  :medium-of (d<mod>)))--TYPE--(mod())
(c<root> / company  :name (n / --LEX--)  :source-of (m2<mod>))--TYPE--(mod())
(c2<root> / country  :ARG0-of (h2 / have-rel-role-91  :ARG2 (e / --LEX--)))--TYPE--()
(p<root> / person  :ARG0-of (h / have-org-role-91  :ARG1 (m2<s>)  :ARG2 (p3 / person  :ARG0-of (p2 / --LEX--))))--TYPE--(s())
(m2<root> / mass-quantity  :unit (t / --LEX--)  :mod-of (s<mod>))--TYPE--(mod())
(d<root> / --LEX--  :ARG1 (i<s>)  :ARG0 (p3 / person))--TYPE--(s())
(n2<root> / --LEX--  :name-of (f / festival  :mod-of (h<mod>)))--TYPE--(mod())
(g<root> / --LEX--  :degree (m / more)  :degree-of (a<mod>))--TYPE--(mod())
(p4<root> / person  :ARG1-of (r2 / --LEX--)  :beneficiary-of (p2<mod>))--TYPE--(mod())
(m2<root> / member  :ARG2-of (h / --LEX--  :ARG1 (p2<o>)  :ARG0 (p3<s>)))--TYPE--(o(), s())
(a<root> / --LEX--  :ARG1 (i<s>)  :ARG2 (s<o>))--TYPE--(o(o2_UNIFY_s()), s())
(e<root> / --LEX--  :ARG2 (h<o2>)  :ARG1 (p<o>)  :ARG0 (c<s>)  :manner-of (l<mod>))--TYPE--(mod(), o(), o2(s_UNIFY_o()), s())
(o2<root> / organization  :name (n2 / --LEX--)  :source-of (n<mod>))--TYPE--(mod())
(g2<root> / --LEX--  :ARG2 (p<o2>)  :ARG1 (m<o>)  :ARG0 (c<s>)  :compared-to-of (g<mod>))--TYPE--(mod(), o(), o2(), s())
(s<root> / --LEX--  :ARG2 (t / thing  :mod-of (l<mod>)))--TYPE--(mod())
(p2<root> / person  :mod-of (c<mod>)  :ARG1-of (l / --LEX--))--TYPE--(mod())
(a<root> / --LEX--  :op1 (k<op1>)  :op2 (a2<op2>)  :subevent-of (s<mod>))--TYPE--(mod(), op1(), op2())
(u<root> / --LEX--  :ARG4 (f<o>)  :ARG2 (c2<s>))--TYPE--(o(), s())
(n3<root> / --LEX--  :name-of (s2 / sea  :location-of (c5<mod>)))--TYPE--(mod())
(m<root> / monetary-quantity  :quant (explicitanon6 / --LEX--)  :quant-of (f<mod>))--TYPE--(mod())
(a2<root> / --LEX--  :op2 (b3<op2>)  :op1 (b2<op1>)  :op3 (b4<op3>)  :medium-of (b<mod>))--TYPE--(mod(), op1(), op2(), op3())
(m<root> / missile  :quant (explicitanon0 / --LEX--))--TYPE--()
(m<root> / --LEX--  :ARG1 (t3 / thing  :quant-of (t2<mod>)))--TYPE--(mod())
(d2<root> / --LEX--  :ARG1-of (p / possible-01))--TYPE--()
(p3<root> / person  :mod-of (e<mod>)  :ARG0-of (h / have-rel-role-91  :ARG2 (b / --LEX--)))--TYPE--(mod())
(r2<root> / --LEX--  :ARG1 (t4 / thing  :mod-of (n<mod>)))--TYPE--(mod())
(t2<root> / temporal-quantity  :unit (d2 / --LEX--)  :op1-of (m2 / multiple  :age-of (p<mod>)))--TYPE--(mod())
(s3<root> / --LEX--  :ARG0 (p2 / person  :consist (u<mod>)))--TYPE--(mod())
(explicitanon2<root> / --LEX--  :quant-of (p4 / person  :consist (p3<mod>)))--TYPE--(mod())
(s2<root> / --LEX--  :ARG3 (c3<s>)  :manner-of (s<mod>))--TYPE--(mod(), s())
(n3<root> / --LEX--  :name-of (i / island  :location-of (n2<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :op1 (w<op1>)  :op3 (c2<op3>)  :op5 (c4<op5>)  :op2 (c<op2>)  :op4 (c3<op4>)  :location-of (c6<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4(), op5())
(a2<root> / --LEX--  :op1 (o7<op1>)  :op3 (p<op3>)  :op2 (g<op2>)  :op6 (e<op6>)  :op4 (g2<op4>)  :op5 (o<op5>)  :example-of (u<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4(), op5(), op6())
(e3<root> / event  :name (n2 / --LEX--)  :poss (o<poss>)  :time-of (e2<mod>))--TYPE--(mod(), poss())
(r<root> / religious-group  :name (n5 / --LEX--)  :polarity (explicitanon12 / -)  :mod-of (p4<mod>))--TYPE--(mod())
(f<root> / --LEX--  :ARG2 (c<o2>)  :ARG1 (h<s>)  :ARG0 (p<o>))--TYPE--(o(), o2(s_UNIFY_s()), s())
(d3<root> / dog  :quant (s4 / --LEX--))--TYPE--()
(c<root> / company  :name (n / --LEX--)  :part-of (c8<poss>))--TYPE--(poss())
(a<root> / --LEX--  :op8 (a4<op8>)  :op2 (r<op2>)  :op1 (m<op1>)  :op3 (r2<op3>)  :op7 (s2<op7>)  :op11 (s3<op11>)  :op5 (b<op5>)  :op10 (b2<op10>)  :op4 (a3<op4>)  :op9 (p<op9>)  :op6 (t<op6>))--TYPE--(op1(), op10(), op11(), op2(), op3(), op4(), op5(), op6(), op7(), op8(), op9())
(n2<root> / --LEX--  :name-of (c2 / criminal-organization  :mod-of (s<mod>)))--TYPE--(mod())
(c<root> / company  :name (n / --LEX--)  :prep-with-of (s2<mod>))--TYPE--(mod())
(d2<root> / distance-quantity  :quant (explicitanon0 / --LEX--)  :mod-of (r<mod>))--TYPE--(mod())
(i<root> / --LEX--  :ARG0 (p3 / person  :topic-of (s<mod>)))--TYPE--(mod())
(e<root> / email-address-entity  :value (explicitanon0 / --LEX--))--TYPE--()
(h<root> / --LEX--  :ARG3 (u<s>  :ARG1-of h))--TYPE--(s())
(t<root> / --LEX--  :ARG0 (i / i)  :ARG1 (y / you))--TYPE--()
(t2<root> / thing  :domain (t<dom>)  :ARG0-of (c / --LEX--))--TYPE--(dom())
(s<root> / street  :name (n / --LEX--))--TYPE--()
(c<root> / city-district  :name (n / --LEX--)  :source-of (a<mod>))--TYPE--(mod())
(l<root> / --LEX--  :ARG0 (y<s>)  :duration-of (s<mod>))--TYPE--(mod(), s())
(v<root> / --LEX--  :op1 (explicitanon0<op1>)  :value-of (o<mod>))--TYPE--(mod(), op1())
(s<root> / seismic-quantity  :quant (explicitanon0 / --LEX--)  :quant-of (q<mod>))--TYPE--(mod())
(c<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG2 (r<o>)  :ARG1 (y<s>))--TYPE--(o(s_UNIFY_s()), s())
(l<root> / --LEX--  :mode (explicitanon0 / expressive)  :manner (l2 / loud)  :ARG0 (i / i))--TYPE--()
(w<root> / --LEX--  :ARG1 (p / person)  :ARG0 (i<s>))--TYPE--(s())
(t<root> / team  :name (n / --LEX--)  :mod-of (f<mod>))--TYPE--(mod())
(d<root> / --LEX--  :ARG2 (s<o>)  :ARG0 (a<s>))--TYPE--(o(dom_UNIFY_s()), s())
(a<root> / --LEX--  :op1 (k<op1>)  :concession-of (i<mod>))--TYPE--(mod(), op1(o_UNIFY_mod()))
(r<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (l<o>  :condition r))--TYPE--(o(), s())
(s<root> / --LEX--  :ARG1 (w<o>)  :ARG0 (i<s>)  :ARG2 (i2<o2>))--TYPE--(o(dom_UNIFY_s()), o2(), s())
(o<root> / organization  :name (n / --LEX--)  :domain (i<dom>))--TYPE--(dom())
(d<root> / --LEX--  :ARG0 (w<s>)  :ARG3 (t2<o2>)  :ARG1 (k<o>))--TYPE--(o(), o2(poss_UNIFY_s()), s())
(t2<root> / thing  :ARG2-of (p / --LEX--)  :location-of (t<mod>))--TYPE--(mod())
(g<root> / government-organization  :topic-of (o<mod>)  :ARG0-of (g2 / --LEX--))--TYPE--(mod())
(p<root> / person  :poss (w<poss>)  :domain (t<dom>)  :name (n / --LEX--))--TYPE--(dom(), poss())
(s<root> / --LEX--  :polarity (explicitanon0 / -)  :topic-of (w<mod>))--TYPE--(mod())
(l<root> / --LEX--  :mode (explicitanon1 / expressive)  :mod-of (e<mod>))--TYPE--(mod())
(p<root> / --LEX--  :ARG0 (y<s>)  :ARG1 (c<o>)  :mode (explicitanon1 / imperative))--TYPE--(o(dom_UNIFY_s()), s())
(p2<root> / peninsula  :name (n3 / --LEX--))--TYPE--()
(n2<root> / newspaper  :name (n3 / --LEX--)  :medium-of (s<mod>))--TYPE--(mod())
(r<root> / --LEX--  :ARG2 (t / thing)  :ARG1 (s<s>))--TYPE--(s())
(d<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG2 (c<o2>)  :ARG1 (h<o>)  :ARG0 (y<s>))--TYPE--(o(poss_UNIFY_s()), o2(), s())
(c<root> / city  :name (n / --LEX--)  :topic-of (t<mod>))--TYPE--(mod())
(t<root> / thing  :quant (explicitanon0 / --LEX--)  :topic-of (a2<mod>))--TYPE--(mod())
(k<root> / --LEX--  :ARG0 (p<s>)  :subevent-of (d<mod>))--TYPE--(mod(s_UNIFY_s()), s())
(a<root> / --LEX--  :ARG2 (y<s>  :ARG0-of a)  :ARG1 (t2<o>)  :mode (explicitanon0 / imperative))--TYPE--(o(), s())
(g<root> / --LEX--  :ARG2 (y<o2>)  :ARG0 (i<s>)  :ARG1 (i2<o>))--TYPE--(o(), o2(), s(mod_UNIFY_o()))
(t<root> / --LEX--  :ARG1 (t2<s>)  :ARG2 (y / you))--TYPE--(s())
(e<root> / event  :poss (c<poss>)  :name (n / --LEX--))--TYPE--(poss())
(p2<root> / product  :name (n2 / --LEX--)  :instrument-of (p<mod>))--TYPE--(mod())
(u<root> / url-entity  :value (explicitanon0 / --LEX--)  :medium-of (r<mod>))--TYPE--(mod())
(g3<root> / government-organization  :name (n / --LEX--)  :ARG0-of (g / govern-01))--TYPE--()
(k<root> / --LEX--  :domain (d2<dom>)  :ARG2 (d<o>))--TYPE--(dom(), o(s_UNIFY_s()))
(c<root> / country  :name (n / --LEX--)  :direction-of (f<mod>))--TYPE--(mod())
(p2<root> / person  :name (n2 / --LEX--)  :prep-to-of (w<mod>))--TYPE--(mod())
(r<root> / --LEX--  :ARG2 (s<o>)  :ARG1 (g<s>))--TYPE--(o(), s(o2_UNIFY_o()))
(n<root> / --LEX--  :name-of (t2 / territory  :mod-of (t<mod>)))--TYPE--(mod())
(d<root> / distance-quantity  :unit (m2 / --LEX--)  :op1-of (m / multiple  :quant-of (a<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :op2 (e<op2>)  :op1 (h<op1>))--TYPE--(op1(o_UNIFY_o(poss_UNIFY_s()), s_UNIFY_s()), op2(o_UNIFY_o(poss_UNIFY_s()), s_UNIFY_s()))
(h<root> / have-rel-role-91  :ARG0 (p / person)  :ARG2 (g / --LEX--)  :ARG1 (i<s>))--TYPE--(s())
(s2<root> / --LEX--  :ARG1 (m<s>)  :ARG1 (e<o>))--TYPE--(o(mod_UNIFY_s()), s())
(e<root> / --LEX--  :ARG1 (t<o>)  :ARG0 (i<s>)  :ARG2 (y / you))--TYPE--(o(), s())
(m2<root> / more  :degree-of (f / --LEX--  :quant-of (p<mod>)))--TYPE--(mod())
(h<root> / --LEX--  :ARG1 (t / thing  :poss (i<poss>)))--TYPE--(poss())
(s<root> / --LEX--  :ARG0 (i<s>)  :ARG2 (p<o2>)  :ARG1 (b<o>))--TYPE--(o(dom_UNIFY_o2()), o2(), s())
(b<root> / --LEX--  :ARG0 (p<s>)  :subevent-of (f<mod>))--TYPE--(mod(), s())
(t<root> / thing  :ARG1-of (d / --LEX--  :ARG0 (i<s>)  :condition-of (e<mod>)))--TYPE--(mod(), s())
(o<root> / --LEX--  :ARG2 (y<o2>)  :ARG3 (w<o3>)  :ARG0 (i<s>)  :ARG1 (n2<o>))--TYPE--(o(), o2(), o3(s_UNIFY_o2()), s())
(r2<root> / religious-group  :name (n / --LEX--)  :beneficiary-of (h<mod>))--TYPE--(mod())
(w<root> / --LEX--  :part-of (c<poss>)  :path-of (s<mod>))--TYPE--(mod(), poss())
(u<root> / url-entity  :value (explicitanon2 / --LEX--)  :location-of (v<mod>))--TYPE--(mod())
(p<root> / port  :name (n / --LEX--)  :location-of (w<mod>))--TYPE--(mod())
(g<root> / --LEX--  :degree (m / most)  :condition-of (i<mod>))--TYPE--(mod())
(c2<root> / --LEX--  :ARG1 (y<o>)  :ARG0 (i<s>  :condition c2))--TYPE--(o(), s())
(b<root> / --LEX--  :domain (w<dom>  :poss-of b))--TYPE--(dom())
(n<root> / --LEX--  :name-of (o / ocean  :location-of (a<mod>)))--TYPE--(mod())
(b<root> / bank  :name (n / --LEX--))--TYPE--()
(t<root> / temporal-quantity  :quant (explicitanon0 / --LEX--)  :op1-of (m / multiple  :quant-of (b<mod>)))--TYPE--(mod())
(explicitanon0<root> / --LEX--  :value-of (u / url-entity  :location-of (s<mod>)))--TYPE--(mod())
(c<root> / --LEX--  :op1 (m<op1>)  :topic-of (a2<mod>))--TYPE--(mod(), op1())
(i<root> / --LEX--  :ARG0 (g<s>)  :prep-against-of (s2<mod>))--TYPE--(mod(), s())
(b<root> / --LEX--  :ARG1 (t2<s>  :ARG0-of b)  :purpose-of (s<mod>))--TYPE--(mod(), s())
(a3<root> / --LEX--  :op2 (t2<op2>)  :op1 (t<op1>))--TYPE--(op1(mod_UNIFY_mod()), op2(mod_UNIFY_mod()))
(s<root> / --LEX--  :ARG0 (i<s>)  :ARG2 (p<o2>)  :ARG1 (u<o>))--TYPE--(o(), o2(), s(mod_UNIFY_o2()))
(s<root> / --LEX--  :ARG0 (p2<s>)  :ARG1 (p<o>)  :prep-in-of (h<mod>))--TYPE--(mod(), o(), s())
(f<root> / --LEX--  :ARG1 (m<o>)  :ARG0 (p<s>)  :extent-of (i<mod>))--TYPE--(mod(), o(), s())
(s<root> / --LEX--  :poss (c<poss>)  :consist (n2<mod>))--TYPE--(mod(), poss())
(r<root> / revolution  :name (n2 / --LEX--)  :topic-of (a<mod>))--TYPE--(mod())
(l4<root> / --LEX--  :domain (a<dom>)  :medium-of (d<mod>))--TYPE--(dom(), mod())
(r<root> / --LEX--  :ARG2 (c<s>  :ARG0-of r)  :ARG1 (a2<o>))--TYPE--(o(s_UNIFY_s()), s())
(p<root> / park  :name (n / --LEX--)  :location-of (b<mod>))--TYPE--(mod())
(i<root> / incident  :name (n / --LEX--)  :mod-of (a2<mod>))--TYPE--(mod())
(explicitanon4<root> / --LEX--  :value-of (u / url-entity  :medium-of (g<mod>)))--TYPE--(mod())
(i<root> / --LEX--  :mode (explicitanon1 / imperative)  :ARG0 (y<s>)  :ARG1 (s<o>)  :ARG2 (g<o2>))--TYPE--(o(), o2(s_UNIFY_o()), s())
(v<root> / variable  :name (n / --LEX--)  :quant-of (b<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (c2 / country  :compared-to-of (r<mod>)))--TYPE--(mod())
(p<root> / --LEX--  :polarity (explicitanon0 / -)  :manner-of (r<mod>))--TYPE--(mod())
(n<root> / --LEX--  :name-of (c2 / city  :source-of (d<mod>)))--TYPE--(mod())
(c<root> / --LEX--  :poss (c2<poss>)  :quant-of (t<mod>))--TYPE--(mod(), poss())
(p3<root> / --LEX--  :ARG1 (r<o>)  :ARG2 (s2<o2>)  :ARG0 (p<s>)  :purpose-of (s<mod>))--TYPE--(mod(), o(s_UNIFY_o2()), o2(), s())
(s<root> / school  :name (n / --LEX--))--TYPE--()
(a<root> / --LEX--  :op1 (t<op1>)  :op3 (s<op3>)  :op4 (r<op4>)  :domain (i2<dom>)  :op2 (i<op2>))--TYPE--(dom(), op1(), op2(), op3(), op4())
(w<root> / --LEX--  :ARG1 (e2<o>)  :ARG0 (e<s>)  :degree-of (r<mod>))--TYPE--(mod(), o(), s())
(b<root> / --LEX--  :ARG2 (p2<o>)  :ARG1 (p<s>))--TYPE--(o(), s(mod_UNIFY_o()))
(a<root> / --LEX--  :op1 (c<op1>)  :op2 (s2<op2>)  :part-of (s<poss>))--TYPE--(op1(s_UNIFY_s()), op2(s_UNIFY_s()), poss())
(t<root> / thing  :ARG1-of (p2 / --LEX--  :ARG2 (t2<o2>)  :ARG0 (i<s>)))--TYPE--(o2(poss_UNIFY_s()), s())
(a2<root> / --LEX--  :op1 (m<op1>)  :op3 (c2<op3>)  :op2 (w<op2>)  :manner-of (f<mod>))--TYPE--(mod(), op1(), op2(), op3())
(f<root> / --LEX--  :ARG1 (s<s>)  :concession-of (c<mod>))--TYPE--(mod(), s(s_UNIFY_mod()))
(r<root> / --LEX--  :ARG1 (t<o>)  :ARG4 (p2<o2>)  :ARG0 (p<s>))--TYPE--(o(), o2(s_UNIFY_s()), s())
(b<root> / --LEX--  :ARG2 (t<o>)  :ARG1 (s2<s>)  :time-of (m<mod>))--TYPE--(mod(s_UNIFY_s()), o(), s())
(f<root> / --LEX--  :domain (a<dom>)  :consist (c<mod>))--TYPE--(dom(), mod())
(e<root> / --LEX--  :ARG2 (h2<o2>)  :ARG0 (s<s>)  :ARG1 (h<o>))--TYPE--(o(s_UNIFY_o2()), o2(), s(s_UNIFY_o2()))
(i2<root> / --LEX--  :ARG1 (d2<s>)  :ARG2 (d<o>)  :ARG3 (p<o2>))--TYPE--(o(), o2(mod_UNIFY_s()), s())
(r<root> / --LEX--  :poss (p<poss>)  :prep-under-of (o<mod>))--TYPE--(mod(), poss())
(c<root> / --LEX--  :mode (explicitanon1 / imperative)  :ARG3 (s<o>)  :ARG0 (y<s>))--TYPE--(o(), s())
(s2<root> / --LEX--  :ARG1 (g2<s>  :condition s2))--TYPE--(s())
(n2<root> / --LEX--  :name-of (i / island  :source-of (f<mod>)))--TYPE--(mod())
(o2<root> / organization  :name (n2 / --LEX--)  :example-of (g<mod>))--TYPE--(mod())
(p2<root> / person  :name (n2 / --LEX--)  :prep-along-with-of (q<mod>))--TYPE--(mod())
(n2<root> / nucleic-acid  :name (n / --LEX--))--TYPE--()
(t<root> / thing  :ARG1-of (g2 / --LEX--  :degree (m / most)))--TYPE--()
(p3<root> / product  :name (n2 / --LEX--)  :compared-to-of (p2<mod>))--TYPE--(mod())
(p2<root> / product  :name (n / --LEX--)  :location-of (p<mod>))--TYPE--(mod())
(d3<root> / --LEX--  :poss (p<poss>)  :manner-of (i2<mod>))--TYPE--(mod(s_UNIFY_poss()), poss())
(t<root> / thing  :instrument-of (l<mod>)  :ARG1-of (i / --LEX--))--TYPE--(mod())
(h<root> / --LEX--  :ARG0 (y<s>)  :ARG1 (i<o>)  :condition-of (p<mod>))--TYPE--(mod(), o(o_UNIFY_s()), s())
(p3<root> / person  :condition-of (p2<mod>)  :ARG0-of (h2 / have-rel-role-91  :ARG2 (p4 / --LEX--)))--TYPE--(mod())
(t<root> / --LEX--  :mode (explicitanon1 / imperative)  :ARG1 (g<o>))--TYPE--(o(s_UNIFY_s()))
(p<root> / person  :compared-to-of (b<mod>)  :ARG0-of (h2 / have-org-role-91  :ARG2 (p2 / --LEX--)))--TYPE--(mod())
(m2<root> / market-sector  :name (n / --LEX--)  :location-of (s<mod>))--TYPE--(mod())
(s<root> / --LEX--  :ARG0 (t2<s>)  :ARG1 (m<o>))--TYPE--(o(), s(o2_UNIFY_o()))
(t<root> / --LEX--  :ARG0 (y<o>)  :ARG1 (c2<s>)  :ARG3 (o<o2>))--TYPE--(o(), o2(s_UNIFY_s()), s())
(w<root> / --LEX--  :ARG1 (n<s>)  :ARG2 (h<o>)  :purpose-of (s<mod>))--TYPE--(mod(), o(), s(s_UNIFY_o()))
(explicitanon1<root> / Japan  :op1-of (n / --LEX--  :name-of (c<mod>)))--TYPE--(mod())
(p3<root> / person  :ARG1-of (h / --LEX--  :ARG0 (t<s>)  :purpose-of (p2<mod>)))--TYPE--(mod(), s())
(n2<root> / --LEX--  :name-of (o / organization  :beneficiary-of (m<mod>)))--TYPE--(mod())
(l<root> / local-region  :name (n / --LEX--)  :location-of (p<mod>))--TYPE--(mod())
(a<root> / --LEX--  :ARG0 (p<s>)  :ARG1 (s<o>)  :subevent-of (c<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(a<root> / --LEX--  :ARG0 (c<s>)  :ARG1 (c2<o>)  :prep-against-of (d<mod>))--TYPE--(mod(), o(), s())
(m2<root> / missile  :name (n2 / --LEX--))--TYPE--()
(v<root> / --LEX--  :poss (p<poss>)  :prep-as-of (l<mod>))--TYPE--(mod(), poss())
(n3<root> / --LEX--  :name-of (f / festival  :time-of (t<mod>)))--TYPE--(mod())
(b<root> / --LEX--  :op2 (c<op2>)  :op1 (n2 / now)  :time-of (g<mod>))--TYPE--(mod(), op2())
(p<root> / political-party  :name (n / --LEX--)  :example-of (u<mod>))--TYPE--(mod())
(s4<root> / --LEX--  :ARG0 (p2<s>)  :prep-as-of (s<mod>))--TYPE--(mod(), s())
(b<root> / --LEX--  :ARG1 (p3<o>)  :time-of (d<mod>))--TYPE--(mod(), o())
(w<root> / war  :name (n / --LEX--)  :mod-of (h<mod>))--TYPE--(mod())
(h2<root> / --LEX--  :ARG2-of (h3 / have-rel-role-91))--TYPE--()
(r<root> / --LEX--  :ARG1 (t / thing  :purpose-of (s<mod>)))--TYPE--(mod())
(p<root> / --LEX--  :ARG1 (g2<o>)  :ARG2 (b<o2>)  :ARG0 (g3<s>))--TYPE--(o(poss_UNIFY_s()), o2(s_UNIFY_o()), s())
(c<root> / country-region  :name (n / --LEX--)  :mod-of (v<mod>))--TYPE--(mod())
(r2<root> / --LEX--  :ARG1 (t2<o>)  :ARG5 (c<o2>)  :ARG0 (w2<s>))--TYPE--(o(), o2(), s())
(b<root> / book  :name (n4 / --LEX--)  :source-of (p<mod>))--TYPE--(mod())
(w<root> / --LEX--  :ARG0 (c<s>)  :ARG1 (c2<o>)  :ARG4 (c3<o2>))--TYPE--(o(o_UNIFY_o2()), o2(), s())
(m<root> / --LEX--  :ARG1 (w<s>)  :ARG2 (l2<o>)  :purpose-of (l<mod>))--TYPE--(mod(), o(poss_UNIFY_s()), s())
(m2<root> / --LEX--  :quant-of (m / more  :degree-of (g<mod>)))--TYPE--(mod())
(j<root> / --LEX--  :ARG4 (s<o>)  :ARG3 (w<s>))--TYPE--(o(), s())
(p2<root> / person  :name (n / --LEX--)  :prep-with-of (f<mod>))--TYPE--(mod())
(h<root> / have-rel-role-91  :ARG0 (p2<o>)  :ARG2 (m / --LEX--)  :ARG1 (t<s>))--TYPE--(o(), s())
(p2<root> / person  :ARG1-of (i2 / --LEX--  :ARG3 (b2<s>)  :ARG2 (p4<o2>)))--TYPE--(o2(), s())
(h<root> / --LEX--  :ARG2 (y<s>  :ARG0-of h)  :domain (t<dom>))--TYPE--(dom(), s())
(p<root> / --LEX--  :ARG5 (n4<o>)  :ARG1 (c2<s>))--TYPE--(o(), s())
(a<root> / --LEX--  :ARG0 (g<s>)  :ARG1 (s2<o>)  :instrument-of (e<mod>))--TYPE--(mod(s_UNIFY_s()), o(), s())
(c3<root> / --LEX--  :ARG1 (i2<s>)  :prep-amid-of (i<mod>))--TYPE--(mod(), s())
(m2<root> / more  :degree-of (g / --LEX--  :degree-of (i<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :op1 (d<op1>)  :op2 (c<op2>)  :op3 (c2<op3>)  :accompanier-of (l<mod>))--TYPE--(mod(), op1(), op2(), op3())
(r<root> / --LEX--  :ARG0 (i2<s>)  :beneficiary-of (p<mod>))--TYPE--(mod(), s())
(s<root> / --LEX--  :ARG1 (t2<s>)  :prep-from-of (t<mod>))--TYPE--(mod(), s())
(b<root> / --LEX--  :op2 (c3<op2>)  :mod-of (f<mod>))--TYPE--(mod(), op2())
(c3<root> / --LEX--  :ARG2 (h<o>)  :polarity (explicitanon0 / -))--TYPE--(o(s_UNIFY_s()))
(p2<root> / political-party  :name (n2 / --LEX--)  :beneficiary-of (s<mod>))--TYPE--(mod())
(t<root> / --LEX--  :ARG1 (w<o>)  :ARG0 (d<s>)  :ARG2 (b<o2>))--TYPE--(o(), o2(), s(s_UNIFY_o()))
(r<root> / --LEX--  :part-of (a<poss>)  :topic-of (i<mod>))--TYPE--(mod(), poss())
(t<root> / --LEX--  :ARG0 (c<s>)  :ARG2 (c2<o2>)  :ARG1 (a<o>))--TYPE--(o(s_UNIFY_o2()), o2(poss_UNIFY_s()), s())
(s<root> / --LEX--  :ARG2 (p3<o>)  :ARG0 (p<s>)  :medium-of (d<mod>))--TYPE--(mod(), o(), s())
(b2<root> / --LEX--  :op1 (explicitanon0<op1>)  :op2 (explicitanon1<op2>)  :value-of (p<mod>))--TYPE--(mod(), op1(), op2())
(m<root> / --LEX--  :ARG2-of (h / have-rel-role-91  :ARG1 (p3<s>)))--TYPE--(s())
(p<root> / person  :consist (g<mod>)  :quant (b / --LEX--))--TYPE--(mod())
(a<root> / --LEX--  :op1 (g<op1>)  :op3 (e<op3>)  :op2 (b<op2>)  :subevent-of (r<mod>))--TYPE--(mod(), op1(), op2(), op3())
(p2<root> / person  :ARG2-of (h3 / --LEX--  :ARG0 (p<s>)  :purpose-of (b<mod>)))--TYPE--(mod(), s())
(s<root> / --LEX--  :ARG0 (t2<o>)  :ARG1 (g2<s>))--TYPE--(o(), s(poss_UNIFY_o()))
(n<root> / --LEX--  :name-of (c2 / company  :source-of (f<mod>)))--TYPE--(mod())
(o<root> / --LEX--  :op1 (r2<op1>)  :op2 (r3<op2>)  :topic-of (r<mod>))--TYPE--(mod(), op1(o_UNIFY_o(), s_UNIFY_s()), op2(o_UNIFY_o(), s_UNIFY_s()))
(b<root> / --LEX--  :op1 (n / now)  :compared-to-of (t<mod>))--TYPE--(mod())
(r<root> / relative-position  :op1 (f3<op1>)  :quant (f4 / --LEX--))--TYPE--(op1())
(d2<root> / --LEX--  :ARG2 (t2 / thing  :manner-of (t<mod>)))--TYPE--(mod())
(c2<root> / --LEX--  :ARG3-of (r3 / rate-entity-91  :frequency-of (o<mod>)))--TYPE--(mod())
(d<root> / date-entity  :year (explicitanon1 / --LEX--)  :mod-of (b<mod>))--TYPE--(mod())
(r<root> / refuge  :name (n3 / --LEX--))--TYPE--()
(p3<root> / person  :domain (p<dom>)  :ARG0-of (h / have-org-role-91  :ARG2 (g / --LEX--)))--TYPE--(dom())
(e<root> / --LEX--  :ARG1 (c<mod>  :time e))--TYPE--(mod())
(a<root> / --LEX--  :op1 (t2<op1>)  :op3 (g<op3>)  :op2 (b<op2>)  :op4 (b2<op4>)  :purpose-of (t<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4())
(u2<root> / --LEX--  :ARG1 (p2<s>)  :ARG2 (i4<o>)  :manner-of (d<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(p2<root> / person  :quant (explicitanon3 / --LEX--)  :compared-to-of (r<mod>))--TYPE--(mod())
(p<root> / --LEX--  :ARG3 (f<o>)  :ARG1 (m<s>)  :mod-of (w2<mod>))--TYPE--(mod(), o(), s())
(n3<root> / --LEX--  :name-of (l2 / local-region  :location-of (c2<mod>)))--TYPE--(mod())
(p2<root> / --LEX--  :ARG0 (p<s>)  :ARG1 (a<o>)  :ARG3 (p3<o2>))--TYPE--(o(s_UNIFY_o2()), o2(), s())
(p<root> / person  :ARG1-of (k / --LEX--  :ARG2 (b<o2>)  :ARG0 (p4<s>)))--TYPE--(o2(), s())
(m2<root> / monetary-quantity  :domain (c2<dom>)  :unit (d2 / --LEX--))--TYPE--(dom())
(n<root> / --LEX--  :name-of (o / ocean  :mod-of (w<mod>)))--TYPE--(mod())
(t<root> / thing  :part-of (e<poss>)  :ARG1-of (l2 / --LEX--))--TYPE--(poss())
(p<root> / person  :ARG0-of (h / have-org-role-91  :ARG2 (o2 / --LEX--)  :ARG3 (a<s>)))--TYPE--(s())
(g<root> / --LEX--  :ARG4 (c2<s>)  :condition-of (h<mod>))--TYPE--(mod(), s())
(a<root> / --LEX--  :op2 (j<op2>)  :op3 (b<op3>)  :op4 (a2<op4>))--TYPE--(op2(), op3(), op4())
(n2<root> / --LEX--  :name-of (c2 / country  :path-of (s3<mod>)))--TYPE--(mod())
(c3<root> / country  :poss (p4<poss>)  :name (n5 / --LEX--))--TYPE--(poss())
(n3<root> / --LEX--  :name-of (u / university  :location-of (p2<mod>)))--TYPE--(mod())
(t3<root> / thing  :ARG2-of (t / --LEX--  :ARG1 (t2<s>)  :condition-of (c<mod>)))--TYPE--(mod(), s())
(p2<root> / person  :mod-of (g<mod>)  :ARG0-of (h / have-org-role-91  :ARG2 (p3 / --LEX--)))--TYPE--(mod())
(s2<root> / --LEX--  :op1 (p4<op1>)  :purpose-of (v<mod>))--TYPE--(mod(), op1())
(m2<root> / more  :quant (m3 / --LEX--)  :degree-of (t<mod>))--TYPE--(mod())
(a<root> / --LEX--  :op2 (f2<op2>)  :beneficiary-of (f<mod>))--TYPE--(mod(), op2())
(a3<root> / --LEX--  :op2 (h<op2>)  :op1 (o<op1>)  :example-of (p2<mod>))--TYPE--(mod(), op1(s_UNIFY_s()), op2(s_UNIFY_s()))
(explicitanon0<root> / --LEX--  :value-of (p2 / percentage-entity  :quant-of (r2<mod>)))--TYPE--(mod())
(s4<root> / --LEX--  :ARG1 (b<s>)  :ARG0 (m<o>)  :purpose-of (h<mod>))--TYPE--(mod(), o(), s(s_UNIFY_o()))
(n2<root> / --LEX--  :name-of (w / work-of-art  :topic-of (t<mod>)))--TYPE--(mod())
(h<root> / hospital  :name (n2 / --LEX--))--TYPE--()
(d<root> / date-entity  :year (explicitanon7 / --LEX--)  :month (explicitanon6 / 1)  :time-of (a<mod>))--TYPE--(mod())
(p<root> / person  :ARG1-of (c4 / --LEX--  :ARG3 (c5<s>)))--TYPE--(s())
(s3<root> / --LEX--  :op1 (m<op1>)  :op3 (e2<op3>)  :op2 (e<op2>)  :concession-of (g<mod>))--TYPE--(mod(), op1(), op2(), op3())
(p4<root> / person  :ARG0-of (h2 / have-org-role-91  :ARG2 (p / political-party  :name (n / --LEX--))))--TYPE--()
(t<root> / thing  :concession-of (f2<mod>)  :ARG1-of (l / --LEX--))--TYPE--(mod())
(a3<root> / aircraft-type  :poss (c3<poss>)  :name (n3 / --LEX--))--TYPE--(poss())
(n4<root> / --LEX--  :name-of (l2 / language  :mod-of (p<mod>)))--TYPE--(mod())
(m<root> / man  :quant (explicitanon3 / --LEX--))--TYPE--()
(b<root> / --LEX--  :ARG2-of (h2 / have-org-role-91  :ARG3 (f<o2>)  :ARG0 (p2<s>)))--TYPE--(o2(), s())
(t<root> / temporal-quantity  :quant (explicitanon5 / --LEX--)  :ARG2-of (r / rate-entity-91  :ARG1 (explicitanon4<s>)  :frequency-of (o<mod>)))--TYPE--(mod(), s())
(t<root> / temporal-quantity  :unit (y2 / --LEX--)  :op1-of (m3 / multiple  :compared-to-of (y<mod>)))--TYPE--(mod())
(c2<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG2 (a2<s>))--TYPE--(s())
(d<root> / disease  :name (n / --LEX--)  :purpose-of (v<mod>))--TYPE--(mod())
(c3<root> / country  :name (n5 / --LEX--)  :path-of (s<mod>))--TYPE--(mod())
(v2<root> / volume-quantity  :unit (g2 / --LEX--)  :op1-of (m / multiple  :quant-of (o<mod>)))--TYPE--(mod())
(e<root> / --LEX--  :ARG2 (i2<s>)  :medium-of (c<mod>))--TYPE--(mod(), s())
(p2<root> / person  :ARG1-of (h3 / have-rel-role-91  :ARG2 (m2 / --LEX--)  :ARG0 (p<s>)))--TYPE--(s())
(b<root> / --LEX--  :ARG1 (a<s>)  :ARG2 (t<o>)  :subevent-of (t2<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(c3<root> / --LEX--  :ARG0 (i2<s>  :purpose c3))--TYPE--(s())
(l<root> / --LEX--  :degree (m2 / more)  :condition-of (b<mod>))--TYPE--(mod())
(w<root> / world-region  :domain (p2<dom>)  :name (n / --LEX--))--TYPE--(dom())
(n2<root> / --LEX--  :name-of (n / newspaper  :medium-of (w2<mod>)))--TYPE--(mod())
(c3<root> / --LEX--  :ARG1 (d3<o>)  :purpose-of (d2<mod>))--TYPE--(mod(), o())
(t3<root> / thing  :poss (y<poss>)  :ARG2-of (r2 / --LEX--))--TYPE--(poss())
(m3<root> / military  :name (n / --LEX--)  :part-of (u<poss>))--TYPE--(poss())
(a<root> / --LEX--  :op2 (s3<op2>)  :op1 (s2<op1>)  :beneficiary-of (i<mod>))--TYPE--(mod(), op1(s_UNIFY_s()), op2(s_UNIFY_s()))
(d2<root> / department  :name (n3 / --LEX--))--TYPE--()
(explicitanon1<root> / -  :polarity-of (h / --LEX--  :ARG1 (b2<s>)  :mod-of (w<mod>)))--TYPE--(mod(), s())
(m<root> / --LEX--  :snt7 (a4<snt7>)  :snt6 (s7<snt6>)  :snt4 (m4<snt4>)  :snt3 (l2<snt3>)  :snt2 (o<snt2>)  :snt5 (c6<snt5>)  :snt1 (d<snt1>))--TYPE--(snt1(), snt2(), snt3(), snt4(), snt5(), snt6(), snt7())
(h<root> / have-polarity-91  :ARG2 (explicitanon0 / --LEX--))--TYPE--()
(w<root> / --LEX--  :ARG2 (y / you))--TYPE--()
(m<root> / music-key  :name (n / --LEX--)  :mod-of (w<mod>))--TYPE--(mod())
(c<root> / --LEX--  :ARG0 (t / thing  :domain (h<dom>)))--TYPE--(dom())
(c2<root> / company  :name (n2 / --LEX--)  :domain (a<dom>))--TYPE--(dom())
(h<root> / --LEX--  :ARG0 (w<s>  :ARG2-of h)  :condition-of (t<mod>))--TYPE--(mod(), s())
(b<root> / --LEX--  :mod (f / fucking))--TYPE--()
(r<root> / --LEX--  :ARG1 (y<s>)  :ARG3 (i<o>))--TYPE--(o(o_UNIFY_s()), s())
(t<root> / --LEX--  :ARG0 (i<s>)  :ARG2 (y / you))--TYPE--(s())
(l<root> / --LEX--  :mode (explicitanon0 / expressive)  :manner (l2 / loud))--TYPE--()
(o<root> / --LEX--  :mod (o2 / only)  :ARG0 (i<s>))--TYPE--(s())
(d<root> / date-entity  :weekday (s / --LEX--)  :domain (n<dom>))--TYPE--(dom())
(t<root> / treaty  :name (n / --LEX--)  :topic-of (c<mod>))--TYPE--(mod())
(w<root> / --LEX--  :poss (r<poss>  :domain-of w))--TYPE--(poss())
(s<root> / --LEX--  :ARG0 (t / thing  :location-of (v<mod>)))--TYPE--(mod())
(g<root> / government-organization  :beneficiary-of (o<mod>)  :ARG0-of (g2 / --LEX--))--TYPE--(mod())
(r<root> / --LEX--  :ARG0 (y<s>)  :direction-of (b<mod>))--TYPE--(mod(), s())
(o<root> / --LEX--  :op1 (a / ass))--TYPE--()
(c<root> / city  :name (n / --LEX--)  :direction-of (h<mod>))--TYPE--(mod())
(t<root> / thing  :ARG3-of (s / --LEX--  :ARG0 (i<s>)))--TYPE--(s())
(r2<root> / region  :name (n / --LEX--))--TYPE--()
(w<root> / --LEX--  :domain (i<dom>)  :extent-of (s<mod>))--TYPE--(dom(), mod())
(a<root> / --LEX--  :ARG1 (e<o>)  :ARG2 (h<s>)  :ARG0 (y / you))--TYPE--(o(s_UNIFY_s()), s())
(s<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG1 (y / you)  :ARG3 (t<s>))--TYPE--(s())
(e<root> / event  :name (n / --LEX--)  :location-of (c<mod>))--TYPE--(mod())
(h<root> / --LEX--  :manner (w / well-09)  :ARG1 (e / event))--TYPE--()
(f<root> / --LEX--  :part-of (t<poss>)  :location-of (i<mod>))--TYPE--(mod(mod_UNIFY_poss()), poss())
(b<root> / --LEX--  :ARG2 (p2<s>)  :degree-of (p<mod>))--TYPE--(mod(), s())
(t<root> / thing  :ARG1-of (d / --LEX--  :mod-of (s<mod>)))--TYPE--(mod())
(p<root> / --LEX--  :part-of (m<poss>)  :prep-as-of (e<mod>))--TYPE--(mod(), poss())
(e<root> / --LEX--  :name (n / name  :op1 (explicitanon2 / Jew)))--TYPE--()
(i<root> / incident  :domain (t<dom>)  :name (n / --LEX--))--TYPE--(dom())
(s2<root> / sports-facility  :name (n / --LEX--))--TYPE--()
(explicitanon1<root> / Britain  :op1-of (n / name  :name-of (c / --LEX--  :mod-of (p<mod>))))--TYPE--(mod())
(f<root> / --LEX--  :ARG1 (s<s>)  :ARG2 (t<o>)  :concession-of (r<mod>))--TYPE--(mod(s_UNIFY_s()), o(), s())
(c<root> / canyon  :name (n / --LEX--))--TYPE--()
(c<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG1 (y<s>)  :ARG4 (h<o>))--TYPE--(o(), s())
(c<root> / --LEX--  :domain (p<mod>  :time c))--TYPE--(mod())
(l<root> / --LEX--  :ARG1 (a / ass  :part-of (i / i))  :mod (o / off))--TYPE--()
(t<root> / temporal-quantity  :unit (y / year)  :quant (m / --LEX--))--TYPE--()
(m<root> / --LEX--  :polarity (explicitanon0 / -)  :ARG3 (i<o>)  :ARG1 (s2<s>))--TYPE--(o(), s())
(c<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG1 (y / you)  :ARG4 (w<s>))--TYPE--(s())
(g<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG2 (c<s>)  :ARG0 (y / you  :ARG1-of g))--TYPE--(s())
(p<root> / political-party  :name (n / --LEX--)  :location-of (v<mod>))--TYPE--(mod())
(s<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG0 (y / you)  :ARG3 (l<s>))--TYPE--(s())
(r<root> / rate-entity-91  :ARG1 (m / --LEX--)  :frequency-of (t<mod>))--TYPE--(mod())
(p2<root> / planet  :name (n / --LEX--)  :mod-of (p<mod>))--TYPE--(mod())
(r<root> / religious-group  :name (n / --LEX--)  :prep-in-of (s<mod>))--TYPE--(mod())
(p2<root> / --LEX--  :ARG2 (p<s>)  :destination-of (b<mod>))--TYPE--(mod(), s())
(g3<root> / government-organization  :name (n2 / --LEX--)  :domain (a<dom>)  :ARG0-of (g4 / govern-01))--TYPE--(dom())
(s2<root> / --LEX--  :poss (y2<poss>)  :condition-of (s<mod>))--TYPE--(mod(), poss())
(explicitanon4<root> / --LEX--  :value-of (u / url-entity  :example-of (m<mod>)))--TYPE--(mod())
(c<root> / company  :name (n / --LEX--)  :topic-of (m<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (l / law  :manner-of (b<mod>)))--TYPE--(mod())
(c3<root> / channel  :name (n2 / --LEX--)  :medium-of (b<mod>))--TYPE--(mod())
(p<root> / possible-01  :ARG1 (d / --LEX--  :polarity (explicitanon0 / -)  :ARG1 (m<s>)))--TYPE--(s())
(s<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG1 (g<o>)  :ARG0 (y<s>))--TYPE--(o(), s(mod_UNIFY_o()))
(p3<root> / person  :domain (t<dom>)  :name (n / --LEX--)  :condition-of (p<mod>))--TYPE--(dom(), mod())
(r3<root> / regional-group  :name (n / --LEX--))--TYPE--()
(p<root> / political-party  :name (n / --LEX--)  :topic-of (s<mod>))--TYPE--(mod())
(r<root> / road  :name (n2 / --LEX--)  :path-of (d<mod>))--TYPE--(mod())
(p<root> / person  :ARG1-of (d / --LEX--  :prep-for-of (m<mod>)))--TYPE--(mod())
(s<root> / --LEX--  :ARG3 (a<o>)  :ARG1 (i<s>)  :purpose-of (b<mod>))--TYPE--(mod(), o(), s())
(t<root> / --LEX--  :ARG2 (v<o2>)  :ARG0 (i<s>)  :ARG1 (y / you))--TYPE--(o2(), s())
(o<root> / --LEX--  :mod (c / chief))--TYPE--()
(t<root> / --LEX--  :ARG1 (d<o>)  :ARG2 (t2<o2>)  :ARG0 (c<s>))--TYPE--(o(s_UNIFY_o2()), o2(), s(poss_UNIFY_o2()))
(t2<root> / thing  :ARG1-of (s / --LEX--  :condition-of (t<mod>)))--TYPE--(mod())
(c<root> / city  :domain (p<dom>)  :name (n / --LEX--))--TYPE--(dom())
(a<root> / --LEX--  :domain (c<dom>)  :op1 (f<op1>)  :op2 (f2<op2>))--TYPE--(dom(), op1(poss_UNIFY_poss()), op2(poss_UNIFY_poss()))
(c<root> / continent  :name (n / --LEX--)  :source-of (p<mod>))--TYPE--(mod())
(t<root> / thing  :poss (p<poss>)  :ARG0-of (a / --LEX--))--TYPE--(poss())
(d<root> / disease  :poss (i<poss>)  :name (n / --LEX--))--TYPE--(poss())
(r<root> / --LEX--  :ARG3 (f<o2>)  :ARG1 (c<o>)  :ARG0 (w<s>))--TYPE--(o(), o2(dom_UNIFY_o()), s())
(b<root> / --LEX--  :op1 (w<op1>)  :time-of (c<mod>))--TYPE--(mod(), op1(mod_UNIFY_mod()))
(o<root> / --LEX--  :mod (c / chief)  :mod (e / executive))--TYPE--()
(t3<root> / temporal-quantity  :unit (w / --LEX--)  :quant-of (a / after  :op1 (t2<op1>)  :time-of (m<mod>)))--TYPE--(mod(), op1())
(p<root> / person  :compared-to-of (n<mod>)  :ARG0-of (c2 / --LEX--))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (p4 / person  :beneficiary-of (p2<mod>)))--TYPE--(mod())
(t<root> / --LEX--  :ARG0 (w<s>)  :ARG2 (l<o2>)  :ARG1 (y / you))--TYPE--(o2(s_UNIFY_s()), s())
(n3<root> / --LEX--  :name-of (l / law  :location-of (n<mod>)))--TYPE--(mod())
(s<root> / --LEX--  :ARG1 (g<o>)  :ARG2 (p<s>)  :ARG0 (i / i))--TYPE--(o(s_UNIFY_s()), s())
(m<root> / --LEX--  :ARG1 (i2<mod>  :concession m)  :ARG0 (g<s>))--TYPE--(mod(), s())
(n2<root> / --LEX--  :name-of (n / newspaper  :source-of (w<mod>)))--TYPE--(mod())
(explicitanon1<root> / Republican  :op1-of (n / --LEX--  :op2 (explicitanon2 / Party)  :name-of (p2<mod>)))--TYPE--(mod())
(s<root> / --LEX--  :polarity (explicitanon0 / -)  :ARG0 (i<s>)  :ARG1 (t<o>)  :ARG2 (p<o2>))--TYPE--(o(), o2(), s())
(p2<root> / person  :ARG2-of (s / --LEX--  :ARG0 (i2<s>)))--TYPE--(s())
(r<root> / reason  :quant (explicitanon0 / --LEX--))--TYPE--()
(h3<root> / he  :ARG0-of (h2 / have-org-role-91  :ARG2 (p2 / --LEX--)))--TYPE--()
(p<root> / publication  :name (n / --LEX--)  :direction-of (r<mod>))--TYPE--(mod())
(v<root> / --LEX--  :part-of (c / chapter  :mod (explicitanon1 / 8)))--TYPE--()
(e<root> / --LEX--  :ARG1 (t<s>)  :poss (y<poss>))--TYPE--(poss(), s())
(p<root> / --LEX--  :ARG1 (p2<s>  :ARG0-of p)  :time-of (e<mod>))--TYPE--(mod(), s())
(u<root> / university  :name (n / --LEX--)  :mod-of (l<mod>))--TYPE--(mod())
(c<root> / --LEX--  :ARG3 (p<s>)  :ARG1 (i<o>))--TYPE--(o(), s())
(p3<root> / power-quantity  :unit (m2 / --LEX--))--TYPE--()
(a<root> / --LEX--  :ARG2 (p2<o>)  :ARG0 (p<s>)  :location-of (s<mod>))--TYPE--(mod(), o(), s())
(t<root> / treaty  :name (n2 / --LEX--)  :prep-under-of (c<mod>))--TYPE--(mod())
(m2<root> / monetary-quantity  :unit (d2 / --LEX--)  :op1-of (m / multiple  :quant-of (d3<mod>)))--TYPE--(mod())
(c<root> / company  :name (n / --LEX--)  :compared-to-of (g2<mod>))--TYPE--(mod())
(g<root> / government-organization  :compared-to-of (p<mod>)  :ARG0-of (g2 / --LEX--))--TYPE--(mod())
(o2<root> / ordinal-entity  :value (explicitanon4 / --LEX--)  :time-of (o<mod>))--TYPE--(mod())
(f<root> / --LEX--  :ARG1 (c<s>)  :subevent-of (h<mod>))--TYPE--(mod(s_UNIFY_s()), s())
(s<root> / state  :name (n / --LEX--)  :destination-of (f<mod>))--TYPE--(mod())
(t<root> / thing  :location-of (n<mod>)  :ARG1-of (i / --LEX--))--TYPE--(mod())
(p<root> / product  :name (n / --LEX--)  :prep-in-of (s<mod>))--TYPE--(mod())
(b<root> / --LEX--  :part-of (r<poss>)  :instrument-of (s<mod>))--TYPE--(mod(), poss())
(s<root> / --LEX--  :ARG0 (i2<s>)  :destination-of (d<mod>))--TYPE--(mod(), s())
(h<root> / --LEX--  :mode (explicitanon1 / imperative)  :ARG1 (a<o>)  :ARG0 (y<s>))--TYPE--(o(o2_UNIFY_s()), s())
(p2<root> / person  :quant (s2 / --LEX--)  :mod-of (e2<mod>))--TYPE--(mod())
(r<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (g<o>)  :time (n / now))--TYPE--(o(s_UNIFY_s()), s())
(p<root> / person  :name (n / --LEX--)  :prep-against-of (u<mod>))--TYPE--(mod())
(t3<root> / thing  :quant (explicitanon1 / --LEX--)  :manner-of (t<mod>))--TYPE--(mod())
(c<root> / --LEX--  :ARG3 (p<s>)  :domain (t<dom>))--TYPE--(dom(), s())
(p<root> / person  :name (n / --LEX--)  :location-of (s<mod>))--TYPE--(mod())
(p2<root> / planet  :name (n2 / --LEX--)  :compared-to-of (h<mod>))--TYPE--(mod())
(w<root> / --LEX--  :poss (h<poss>)  :domain (i<dom>)  :manner-of (d<mod>))--TYPE--(dom(), mod(s_UNIFY_poss()), poss())
(b<root> / --LEX--  :ARG2-of (h / have-rel-role-91  :ARG1 (g<o>)  :ARG0 (i<s>)  :condition-of (f<mod>)))--TYPE--(mod(), o(), s())
(n<root> / --LEX--  :domain (t3<dom>)  :quant-of (c<mod>))--TYPE--(dom(), mod())
(e<root> / --LEX--  :domain (t<dom>)  :purpose-of (i2<mod>))--TYPE--(dom(), mod())
(c<root> / --LEX--  :ARG2 (m2<o>)  :ARG1 (a4<s>))--TYPE--(o(op1_UNIFY_s()), s())
(w<root> / --LEX--  :ARG0 (t2<s>)  :part-of (c<poss>))--TYPE--(poss(s_UNIFY_s()), s())
(a<root> / --LEX--  :domain (i2<dom>)  :poss (y<poss>)  :condition-of (p<mod>))--TYPE--(dom(), mod(), poss())
(p<root> / port  :name (n2 / --LEX--))--TYPE--()
(a2<root> / award  :name (n4 / --LEX--)  :mod-of (l<mod>))--TYPE--(mod())
(p<root> / --LEX--  :ARG1 (p2<s>)  :ARG0 (y<o>)  :mode (explicitanon0 / imperative))--TYPE--(o(), s())
(i<root> / --LEX--  :ARG3 (a<o2>)  :ARG2 (p2<s>  :ARG1-of i))--TYPE--(o2(), s())
(p<root> / public-institution  :name (n / --LEX--))--TYPE--()
(n<root> / --LEX--  :name-of (t3 / territory  :location-of (o<mod>)))--TYPE--(mod())
(c<root> / company  :name (n / --LEX--)  :instrument-of (s<mod>))--TYPE--(mod())
(explicitanon0<root> / -  :polarity-of (p2 / possible-01  :ARG1 (i / --LEX--  :ARG1 (p<s>))))--TYPE--(s())
(o<root> / --LEX--  :ARG1 (y<s>)  :ARG2 (w<o>)  :condition-of (u<mod>))--TYPE--(mod(s_UNIFY_s()), o(s_UNIFY_s()), s())
(l<root> / --LEX--  :degree (m / more)  :duration-of (g<mod>))--TYPE--(mod())
(t<root> / --LEX--  :ARG1 (y<o>)  :ARG2 (r<o2>)  :ARG0 (p2<s>))--TYPE--(o(), o2(o2_UNIFY_s(), s_UNIFY_o()), s())
(r<root> / --LEX--  :ARG1 (t2<s>)  :frequency-of (l<mod>))--TYPE--(mod(), s())
(b<root> / book  :name (n / --LEX--)  :medium-of (t<mod>))--TYPE--(mod())
(l2<root> / --LEX--  :ARG1 (r2<o>)  :ARG0 (w<s>)  :topic-of (e<mod>))--TYPE--(mod(), o(poss_UNIFY_s()), s())
(t2<root> / thing  :poss (i<poss>)  :ARG3-of (l / --LEX--))--TYPE--(poss())
(t<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG0 (y<s>)  :ARG1 (b<o>)  :ARG3 (s<o2>))--TYPE--(o(s_UNIFY_s()), o2(), s())
(e<root> / --LEX--  :ARG0 (m<s>)  :extent-of (c2<mod>))--TYPE--(mod(), s())
(d2<root> / --LEX--  :ARG3 (c<o2>)  :ARG1 (s<s>  :ARG0-of d2)  :purpose-of (b<mod>))--TYPE--(mod(), o2(s_UNIFY_s()), s())
(f<root> / --LEX--  :ARG1 (t<s>)  :path-of (p<mod>))--TYPE--(mod(), s())
(n2<root> / --LEX--  :name-of (c2 / country-region  :mod-of (t<mod>)))--TYPE--(mod())
(r2<root> / radiation-quantity  :quant (explicitanon0 / --LEX--))--TYPE--()
(t<root> / thing  :ARG1-of (s / --LEX--  :polarity (explicitanon0 / -)))--TYPE--()
(n3<root> / --LEX--  :name-of (w / world-region  :source-of (p<mod>)))--TYPE--(mod())
(h<root> / have-org-role-91  :ARG0 (p2<s>)  :ARG2 (c / --LEX--)  :ARG1 (o<o>)  :ARG3 (i<o3>))--TYPE--(o(), o3(), s())
(a<root> / amusement-park  :name (n2 / --LEX--)  :mod-of (s2<mod>))--TYPE--(mod())
(b<root> / bay  :name (n / --LEX--))--TYPE--()
(h<root> / --LEX--  :mode (explicitanon0 / expressive)  :ARG1 (t<o>)  :ARG0 (i<s>))--TYPE--(o(), s())
(n3<root> / --LEX--  :name-of (i2 / island  :destination-of (f<mod>)))--TYPE--(mod())
(explicitanon1<root> / Islam  :op1-of (n / --LEX--  :name-of (r<mod>)))--TYPE--(mod())
(h<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG1 (m2<o>)  :ARG0 (w<s>)  :ARG3 (u<o2>))--TYPE--(o(), o2(), s())
(w<root> / --LEX--  :ARG4 (h<o>)  :ARG0 (s2<s>))--TYPE--(o(poss_UNIFY_s()), s())
(a<root> / --LEX--  :op1 (g<op1>)  :op2 (d2<op2>)  :consist (c<mod>))--TYPE--(mod(), op1(o_UNIFY_o(), s_UNIFY_s()), op2(o_UNIFY_o(), s_UNIFY_s()))
(j<root> / job  :quant (explicitanon0 / --LEX--))--TYPE--()
(p<root> / percentage-entity  :value (explicitanon1 / --LEX--)  :part-of (t<poss>))--TYPE--(poss())
(n2<root> / --LEX--  :name-of (n / nationality  :mod-of (p<mod>)))--TYPE--(mod())
(c<root> / --LEX--  :name (n / name  :op2 (explicitanon2 / States)  :op1 (explicitanon1 / United)))--TYPE--()
(w<root> / --LEX--  :ARG0 (p2<s>)  :prep-under-of (a<mod>))--TYPE--(mod(), s())
(t4<root> / temporal-quantity  :unit (y3 / --LEX--)  :ARG3-of (r / rate-entity-91  :ARG4 (t5<s>)  :frequency-of (g<mod>)))--TYPE--(mod(), s())
(s2<root> / --LEX--  :ARG0 (c<s>)  :ARG1 (p<o>)  :subevent-of (s3<mod>))--TYPE--(mod(s_UNIFY_s()), o(s_UNIFY_s()), s())
(p<root> / person  :domain (t2<dom>)  :quant (b / --LEX--))--TYPE--(dom())
(r<root> / region  :name (n2 / --LEX--)  :location-of (b<mod>))--TYPE--(mod())
(g<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG2 (w<o2>)  :ARG0 (y<s>  :ARG1-of g))--TYPE--(o2(s_UNIFY_s()), s())
(p2<root> / --LEX--  :ARG1 (t / tax-01)  :ARG0 (p<s>))--TYPE--(s())
(p2<root> / person  :prep-as-of (h<mod>)  :ARG0-of (h2 / have-org-role-91  :ARG2 (s / --LEX--)))--TYPE--(mod())
(c<root> / case-03  :name (n / --LEX--))--TYPE--()
(t2<root> / temporal-quantity  :quant (explicitanon0 / --LEX--)  :quant-of (l<mod>))--TYPE--(mod())
(a2<root> / --LEX--  :op2 (n3<op2>)  :op1 (c<op1>)  :prep-on-of (r<mod>))--TYPE--(mod(), op1(), op2())
(m<root> / medical-condition  :name (n2 / --LEX--))--TYPE--()
(e<root> / --LEX--  :ARG0 (t / thing  :manner-of (r2<mod>)))--TYPE--(mod())
(w2<root> / word  :value (explicitanon1 / --LEX--))--TYPE--()
(n<root> / --LEX--  :name-of (o / organization  :accompanier-of (r<mod>)))--TYPE--(mod())
(j<root> / --LEX--  :ARG1 (g2<o>)  :ARG2 (g<o2>)  :ARG0 (p<s>)  :purpose-of (n<mod>))--TYPE--(mod(s_UNIFY_s()), o(), o2(), s())
(j<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (k<o>)  :manner-of (r<mod>))--TYPE--(mod(), o(poss_UNIFY_s()), s())
(t<root> / thing  :consist (r<mod>)  :ARG2-of (f / --LEX--))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (t / team  :mod-of (f<mod>)))--TYPE--(mod())
(d<root> / date-entity  :era (explicitanon1 / --LEX--)  :time-of (w<mod>))--TYPE--(mod())
(s2<root> / --LEX--  :ARG2 (r<s>)  :consist (m<mod>))--TYPE--(mod(), s())
(explicitanon4<root> / --LEX--  :op1-of (m / multiple  :op2 (explicitanon5<op2>)  :quant-of (p2<mod>)))--TYPE--(mod(), op2())
(c<root> / criminal-organization  :poss (p2<poss>)  :name (n5 / --LEX--))--TYPE--(poss())
(p<root> / plane  :name (n / --LEX--))--TYPE--()
(s<root> / system  :name (n2 / --LEX--))--TYPE--()
(p2<root> / political-party  :domain (i<dom>)  :name (n3 / --LEX--))--TYPE--(dom())
(a<root> / --LEX--  :op3 (p3<op3>)  :op1 (p<op1>)  :op2 (p2<op2>))--TYPE--(op1(dom_UNIFY_dom()), op2(dom_UNIFY_dom()), op3(dom_UNIFY_dom()))
(o<root> / --LEX--  :ARG3 (t<s>)  :condition-of (c<mod>))--TYPE--(mod(), s())
(r<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG0 (y<s>)  :ARG1 (s<o>)  :concession-of (a<mod>))--TYPE--(mod(), o(), s())
(p<root> / person  :consist (g<mod>)  :ARG0-of (h / have-rel-role-91  :ARG2 (f / --LEX--)))--TYPE--(mod())
(t<root> / thing  :poss (c<poss>)  :name (n3 / --LEX--))--TYPE--(poss())
(p2<root> / person  :prep-without-of (c<mod>)  :ARG0-of (h2 / have-rel-role-91  :ARG2 (f / --LEX--)))--TYPE--(mod())
(explicitanon2<root> / --LEX--  :year-of (d / date-entity  :compared-to-of (r<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :op1 (t2<op1>)  :op2 (t3<op2>)  :frequency-of (r<mod>))--TYPE--(mod(), op1(), op2())
(m2<root> / --LEX--  :op1 (s<op1>)  :prep-at-of (d<mod>))--TYPE--(mod(), op1())
(t<root> / --LEX--  :ARG1 (c2<o>)  :ARG3 (s2<o2>)  :ARG0 (s<s>)  :purpose-of (l<mod>))--TYPE--(mod(), o(), o2(), s())
(p<root> / --LEX--  :domain (o<dom>)  :conj-as-if-of (a2<mod>))--TYPE--(dom(), mod())
(h<root> / --LEX--  :part-of (p2<poss>)  :prep-to-of (a<mod>))--TYPE--(mod(), poss())
(a<root> / --LEX--  :op1 (v<op1>)  :op2 (d<op2>)  :op3 (s2<op3>)  :domain (u<dom>))--TYPE--(dom(), op1(s_UNIFY_s()), op2(s_UNIFY_s()), op3(s_UNIFY_s()))
(t2<root> / thing  :quant (m3 / --LEX--  :op1 (explicitanon0<op1>)))--TYPE--(op1())
(p2<root> / person  :ARG0-of (s / --LEX--)  :ARG2-of (h / have-org-role-91  :ARG1 (g<o>)  :ARG0 (p<s>)))--TYPE--(o(), s())
(p2<root> / person  :destination-of (o<mod>)  :ARG0-of (h / have-rel-role-91  :ARG2 (k2 / --LEX--)))--TYPE--(mod())
(p2<root> / percentage-entity  :value (explicitanon5 / --LEX--)  :compared-to-of (l<mod>))--TYPE--(mod())
(t<root> / thing  :ARG1-of (d / --LEX--  :ARG1-of (p2 / possible-01)))--TYPE--()
(h3<root> / --LEX--  :ARG3 (o2<o2>)  :ARG1 (p2<o>)  :ARG0 (a<s>)  :time-of (h<mod>))--TYPE--(mod(), o(), o2(), s())
(g<root> / government-organization  :name (n / --LEX--)  :compared-to-of (s<mod>))--TYPE--(mod())
(t<root> / --LEX--  :poss (y<poss>)  :example-of (r<mod>))--TYPE--(mod(), poss())
(g<root> / --LEX--  :degree (m / most)  :degree-of (i<mod>))--TYPE--(mod())
(g<root> / --LEX--  :ARG4 (s<o>)  :ARG0 (i<s>)  :purpose-of (l<mod>))--TYPE--(mod(), o(), s())
(b2<root> / breed  :name (n4 / --LEX--)  :mod-of (a<mod>))--TYPE--(mod())
(p<root> / person  :topic-of (d<mod>)  :ARG0-of (p2 / --LEX--))--TYPE--(mod())
(e<root> / --LEX--  :ARG1 (d<s>)  :ARG4 (i2<o>))--TYPE--(o(o_UNIFY_s()), s())
(p2<root> / person  :mod-of (i<mod>)  :ARG2-of (c2 / --LEX--))--TYPE--(mod())
(g<root> / --LEX--  :ARG3 (c<o3>)  :ARG0 (p<s>)  :ARG2 (s<o2>)  :ARG1 (m<o>))--TYPE--(o(), o2(s_UNIFY_s()), o3(), s())
(p<root> / person  :quant (s2 / --LEX--)  :accompanier-of (s<mod>))--TYPE--(mod())
(p2<root> / phone-number-entity  :value (explicitanon5 / --LEX--)  :medium-of (c<mod>))--TYPE--(mod())
(s4<root> / --LEX--  :ARG0 (j<s>)  :ARG1 (g<o>)  :purpose-of (s2<mod>))--TYPE--(mod(s_UNIFY_s()), o(poss_UNIFY_s()), s())
(f<root> / --LEX--  :ARG2 (p<o2>)  :ARG1 (m<s>)  :ARG0 (y<o>)  :condition-of (r<mod>))--TYPE--(mod(), o(), o2(), s())
(c<root> / --LEX--  :polarity (explicitanon0 / -)  :poss (i<poss>))--TYPE--(poss())
(p2<root> / --LEX--  :ARG2 (e<o>)  :topic-of (b<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(l<root> / --LEX--  :ARG2-of (r / rate-entity-91  :frequency-of (s<mod>)))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (p4 / person  :compared-to-of (w<mod>)))--TYPE--(mod())
(t<root> / thing  :name (n / --LEX--)  :manner-of (w<mod>))--TYPE--(mod())
(c<root> / --LEX--  :poss (s<poss>)  :prep-for-of (t<mod>))--TYPE--(mod(), poss())
(p<root> / --LEX--  :ARG2 (t<s>)  :prep-with-of (p3<mod>))--TYPE--(mod(), s())
(p<root> / --LEX--  :ARG0 (p2<s>)  :ARG4 (p3<o2>)  :ARG7 (p4<o3>)  :ARG1 (g<o>))--TYPE--(o(), o2(), o3(), s())
(g<root> / game  :name (n4 / --LEX--)  :mod-of (c<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (c2 / country  :direction-of (w<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :ARG2 (w<o2>)  :ARG0 (p<s>)  :time-of (e<mod>))--TYPE--(mod(), o2(), s())
(d<root> / --LEX--  :ARG1 (c2<o>)  :ARG2 (l<s>))--TYPE--(o(poss_UNIFY_s()), s())
(w2<root> / world-region  :name (n / --LEX--)  :source-of (h<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (w / world-region  :beneficiary-of (h<mod>)))--TYPE--(mod())
(d<root> / distance-quantity  :quant (explicitanon0 / --LEX--)  :domain (g<dom>))--TYPE--(dom())
(a2<root> / --LEX--  :op2 (s2<op2>)  :op1 (b2<op1>)  :compared-to-of (s<mod>))--TYPE--(mod(), op1(s_UNIFY_s()), op2(s_UNIFY_s()))
(b2<root> / --LEX--  :op1 (n3 / now)  :duration-of (b<mod>))--TYPE--(mod())
(a<root> / --LEX--  :ARG2 (w<o2>)  :ARG1 (h<s>))--TYPE--(o2(), s())
(g2<root> / --LEX--  :ARG0-of (g / govern-01  :ARG1 (c<s>)))--TYPE--(s())
(l<root> / lawyer  :name (n3 / --LEX--))--TYPE--()
(r2<root> / river  :name (n / --LEX--))--TYPE--()
(d<root> / date-entity  :month (explicitanon7 / 3)  :year (explicitanon9 / --LEX--)  :time-of (s<mod>))--TYPE--(mod())
(n<root> / --LEX--  :name-of (c2 / company  :example-of (c<mod>)))--TYPE--(mod())
(s<root> / --LEX--  :domain (i<dom>)  :concession-of (t<mod>))--TYPE--(dom(), mod(s_UNIFY_dom()))
(m2<root> / most  :degree-of (w / --LEX--  :manner-of (s2<mod>)))--TYPE--(mod())
(r<root> / --LEX--  :part-of (p2<poss>)  :direction-of (s<mod>))--TYPE--(mod(), poss())
(m<root> / most  :degree-of (c2 / --LEX--  :ARG2 (a3<s>)))--TYPE--(s())
(p3<root> / political-party  :name (n / --LEX--)  :prep-against-of (v<mod>))--TYPE--(mod())
(g<root> / --LEX--  :ARG4 (a2<s>)  :topic-of (i2<mod>))--TYPE--(mod(), s())
(c<root> / country  :name (n / --LEX--)  :prep-for-of (g<mod>))--TYPE--(mod())
(p2<root> / person  :ARG2-of (i / --LEX--  :ARG3 (m2<s>)  :ARG1 (p5<o>)))--TYPE--(o(), s())
(n2<root> / --LEX--  :name-of (e / event  :mod-of (p<mod>)))--TYPE--(mod())
(c<root> / car-make  :name (n / --LEX--)  :mod-of (v<mod>))--TYPE--(mod())
(t<root> / thing  :name (n / --LEX--)  :topic-of (f<mod>))--TYPE--(mod())
(l2<root> / --LEX--  :ARG0 (y<s>)  :ARG1 (c<o>)  :compared-to-of (s<mod>))--TYPE--(mod(), o(poss_UNIFY_s()), s())
(p<root> / person  :prep-to-of (i<mod>)  :ARG0-of (f / --LEX--))--TYPE--(mod())
(m2<root> / --LEX--  :ARG2 (d<o>)  :purpose-of (f<mod>))--TYPE--(mod(), o())
(n2<root> / --LEX--  :name-of (l2 / law  :mod-of (l<mod>)))--TYPE--(mod())
(p<root> / --LEX--  :ARG0 (p3<s>  :ARG1-of p)  :condition-of (t<mod>))--TYPE--(mod(), s())
(b2<root> / building  :name (n3 / --LEX--)  :location-of (g5<mod>))--TYPE--(mod())
(s<root> / --LEX--  :ARG1 (t3<o>)  :ARG0 (h<s>)  :ARG2 (i<o2>))--TYPE--(o(), o2(o_UNIFY_s()), s())
(explicitanon0<root> / -  :polarity-of (e / --LEX--  :purpose-of (p<mod>)))--TYPE--(mod())
(m<root> / --LEX--  :ARG1 (a2<s>)  :ARG0 (p<o>  :ARG2-of m))--TYPE--(o(), s())
(t3<root> / temperature-quantity  :unit (d / --LEX--))--TYPE--()
(p2<root> / person  :topic-of (r<mod>)  :ARG0-of (h / have-org-role-91  :ARG2 (p3 / --LEX--)))--TYPE--(mod())
(b<root> / --LEX--  :op1 (c2<op1>)  :consist (t<mod>))--TYPE--(mod(), op1())
(d3<root> / date-entity  :weekday (w / --LEX--  :domain (d4<dom>)))--TYPE--(dom())
(o<root> / --LEX--  :op3 (t<op3>)  :op2 (d<op2>)  :op1 (p2<op1>)  :op4 (a<op4>)  :op5 (s<op5>))--TYPE--(op1(s_UNIFY_s()), op2(s_UNIFY_s()), op3(s_UNIFY_s()), op4(s_UNIFY_s()), op5(s_UNIFY_s()))
(d<root> / date-entity  :month (explicitanon5 / 10)  :year (explicitanon6 / --LEX--)  :time-of (e<mod>))--TYPE--(mod())
(r3<root> / revolution  :name (n2 / --LEX--))--TYPE--()
(r2<root> / river  :name (n4 / --LEX--)  :mod-of (r<mod>))--TYPE--(mod())
(d<root> / --LEX--  :ARG1 (a<o>)  :ARG0 (s<s>)  :prep-as-of (m<mod>))--TYPE--(mod(), o(), s())
(t2<root> / thing  :ARG1-of (a2 / --LEX--)  :condition-of (b<mod>))--TYPE--(mod())
(p<root> / person  :name (n / --LEX--)  :part-of (b<poss>))--TYPE--(poss())
(m<root> / --LEX--  :prep-in-addition-to-of (a<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (g2 / government-organization  :compared-to-of (p3<mod>)))--TYPE--(mod())
(u<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG0 (y<s>)  :ARG2 (d<o2>)  :ARG1 (b<o>))--TYPE--(o(), o2(s_UNIFY_s()), s())
(h<root> / --LEX--  :poss (p<poss>)  :prep-to-of (a<mod>))--TYPE--(mod(), poss())
(l<root> / --LEX--  :ARG1 (a2<mod>  :condition l))--TYPE--(mod())
(g<root> / --LEX--  :ARG1 (c<s>)  :ARG2 (p<o>)  :topic-of (h2<mod>))--TYPE--(mod(), o(), s(s_UNIFY_o()))
(c4<root> / --LEX--  :name (n2 / name  :op1 (explicitanon3 / China)))--TYPE--()
(f2<root> / --LEX--  :ARG0 (g<s>)  :ARG1 (i<o>)  :condition-of (m<mod>))--TYPE--(mod(s_UNIFY_o()), o(), s())
(s<root> / --LEX--  :ARG2-of (h / have-rel-role-91  :ARG0 (p4 / person  :compared-to-of (l<mod>))))--TYPE--(mod())
(g<root> / --LEX--  :ARG0 (p<s>)  :ARG1 (w<o>)  :time-of (p2<mod>))--TYPE--(mod(s_UNIFY_s()), o(poss_UNIFY_s()), s())
(p2<root> / --LEX--  :ARG1 (u<o>  :manner p2))--TYPE--(o())
(c3<root> / county  :name (n2 / --LEX--)  :mod-of (l<mod>))--TYPE--(mod())
(b<root> / --LEX--  :op1 (t<op1>)  :example-of (p<mod>))--TYPE--(mod(), op1())
(p<root> / person  :ARG0-of (h / have-rel-role-91  :ARG1 (p2 / person)  :ARG3 (o<s>)  :ARG2 (m / --LEX--)))--TYPE--(s())
(m<root> / --LEX--  :ARG1 (c2<s>)  :prep-on-of (l<mod>))--TYPE--(mod(), s())
(t2<root> / --LEX--  :quant (explicitanon1 / 1))--TYPE--()
(w2<root> / woman  :quant (m2 / --LEX--))--TYPE--()
(t2<root> / theory  :name (n / --LEX--))--TYPE--()
(w2<root> / worm  :name (n / --LEX--))--TYPE--()
(a2<root> / --LEX--  :op2 (c3<op2>)  :op1 (c2<op1>)  :prep-among-of (a<mod>))--TYPE--(mod(), op1(), op2())
(n3<root> / --LEX--  :name-of (s2 / sea  :mod-of (p2<mod>)))--TYPE--(mod())
(s3<root> / --LEX--  :ARG1 (c<s>)  :ARG3 (p2<o>)  :topic-of (p<mod>))--TYPE--(mod(), o(), s())
(n4<root> / --LEX--  :name-of (s2 / ship  :location-of (c2<mod>)))--TYPE--(mod())
(r2<root> / --LEX--  :ARG1 (s4<s>)  :ARG3 (s5<o>)  :concession-of (r<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(i2<root> / --LEX--  :ARG2 (s<o>)  :ARG0 (c<s>))--TYPE--(o(), s(mod_UNIFY_o()))
(c2<root> / --LEX--  :prep-amid-of (h<mod>))--TYPE--(mod())
(a<root> / --LEX--  :op1 (f<op1>)  :op2 (b<op2>)  :time (n3 / now))--TYPE--(op1(), op2())
(explicitanon4<root> / --LEX--  :decade-of (d3<mod>))--TYPE--(mod())
(s2<root> / --LEX--  :op3 (t4<op3>)  :op2 (t3<op2>)  :op1 (t2<op1>)  :duration-of (r<mod>))--TYPE--(mod(), op1(), op2(), op3())
(c<root> / city  :name (n2 / --LEX--)  :part-of (r<poss>))--TYPE--(poss())
(j<root> / --LEX--  :ARG3 (v2<o2>)  :ARG0 (p<s>)  :ARG1 (s<o>))--TYPE--(o(s_UNIFY_s()), o2(s_UNIFY_s()), s())
(n3<root> / --LEX--  :name-of (l3 / law  :topic-of (l2<mod>)))--TYPE--(mod())
(g<root> / --LEX--  :ARG1 (c<s>)  :ARG4 (g4<o2>))--TYPE--(o2(), s())
(q<root> / --LEX--  :ARG1 (t<s>)  :ARG2 (b<o>)  :mod-of (w2<mod>))--TYPE--(mod(), o(o_UNIFY_s()), s())
(explicitanon0<root> / -  :polarity-of (e / --LEX--  :topic-of (n<mod>)))--TYPE--(mod())
(p<root> / political-party  :name (n3 / --LEX--)  :source-of (a<mod>))--TYPE--(mod())
(d4<root> / --LEX--  :poss (p<poss>)  :purpose-of (s2<mod>))--TYPE--(mod(s_UNIFY_poss()), poss())
(n2<root> / --LEX--  :name-of (m2 / military  :ARG2-of (h2 / have-org-role-91  :ARG0 (p<s>))))--TYPE--(s())
(t2<root> / thing  :ARG1-of (d2 / --LEX--  :ARG0 (t<s>)  :ARG2 (w<o2>)  :condition-of (c<mod>)))--TYPE--(mod(), o2(), s())
(s3<root> / star  :name (n / --LEX--))--TYPE--()
(t<root> / team  :name (n / --LEX--)  :beneficiary-of (f2<mod>))--TYPE--(mod())
(p3<root> / person  :name (n2 / --LEX--)  :prep-as-of (t<mod>))--TYPE--(mod())
(p<root> / person  :ARG0-of (h / have-rel-role-91  :ARG2 (p3 / --LEX--)  :ARG1 (p2<o>)  :ARG3 (k<s>)))--TYPE--(o(), s())
(d2<root> / dynasty  :name (n / --LEX--))--TYPE--()
(p<root> / park  :name (n / --LEX--)  :destination-of (r<mod>))--TYPE--(mod())
(c3<root> / criminal-organization  :name (n5 / --LEX--)  :beneficiary-of (l<mod>))--TYPE--(mod())
(explicitanon2<root> / Great  :op1-of (n2 / --LEX--  :op2 (explicitanon3<op2>)  :name-of (c3<mod>)))--TYPE--(mod(), op2())
(d<root> / --LEX--  :ARG1 (c3<o>)  :ARG2 (p<o2>)  :ARG0 (c<s>)  :time-of (w<mod>))--TYPE--(mod(), o(), o2(s_UNIFY_o()), s())
(r<root> / --LEX--  :ARG3 (o<o2>)  :ARG2 (g2<o>)  :ARG0 (g<s>))--TYPE--(o(), o2(s_UNIFY_o()), s())
(r2<root> / --LEX--  :ARG1 (c3<s>)  :polarity (explicitanon6 / -)  :manner-of (d<mod>))--TYPE--(mod(), s())
(c6<root> / --LEX--  :ARG0 (i<s>)  :prep-with-of (c3<mod>))--TYPE--(mod(), s())
(r<root> / --LEX--  :ARG2 (c3<s>)  :prep-as-of (o<mod>))--TYPE--(mod(), s())
(p3<root> / person  :prep-with-of (d<mod>)  :ARG0-of (p4 / --LEX--))--TYPE--(mod())
(s3<root> / small-molecule  :name (n2 / --LEX--)  :mod-of (l<mod>))--TYPE--(mod())
(l<root> / --LEX--  :ARG1 (j<o>)  :ARG0 (p<s>)  :concession-of (a<mod>))--TYPE--(mod(), o(poss_UNIFY_s()), s())
(c3<root> / car-make  :domain (a<dom>)  :name (n / --LEX--))--TYPE--(dom())
(s2<root> / ship  :name (n2 / --LEX--)  :example-of (s<mod>))--TYPE--(mod())
(p<root> / person  :ARG0-of (k2 / --LEX--  :ARG1 (k3<s>)  :mod-of (h<mod>)))--TYPE--(mod(), s())
(a<root> / --LEX--  :op4 (e<op4>)  :op1 (c2<op1>)  :op2 (c3<op2>)  :op3 (c4<op3>)  :location-of (c<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4())
(d<root> / --LEX--  :ARG4 (p2<o3>)  :ARG3 (h<o2>)  :ARG1 (b<o>)  :ARG0 (c2<s>))--TYPE--(o(poss_UNIFY_s()), o2(), o3(), s())
(d<root> / date-entity  :value (explicitanon4 / --LEX--))--TYPE--()
(n3<root> / --LEX--  :name-of (c2 / county  :mod-of (l<mod>)))--TYPE--(mod())
(n3<root> / natural-object  :name (n4 / --LEX--)  :mod-of (s<mod>))--TYPE--(mod())
(g<root> / --LEX--  :ARG1 (i<s>)  :degree (m / most)  :manner-of (t<mod>))--TYPE--(mod(), s())
(b2<root> / --LEX--  :op2 (a3<op2>)  :location-of (b<mod>))--TYPE--(mod(), op2())
(n4<root> / --LEX--  :name-of (l / language  :manner-of (n<mod>)))--TYPE--(mod())
(c2<root> / car-make  :name (n4 / --LEX--)  :purpose-of (t3<mod>))--TYPE--(mod())
(explicitanon2<root> / -  :polarity-of (d / --LEX--  :duration-of (s<mod>)))--TYPE--(mod())
(explicitanon0<root> / imperative  :mode-of (f2 / --LEX--  :ARG0 (w<s>)  :ARG1 (h4<o>)))--TYPE--(o(), s())
(s2<root> / --LEX--  :ARG0 (p2<s>)  :accompanier-of (d<mod>))--TYPE--(mod(), s())
(n2<root> / --LEX--  :name-of (p4 / province  :mod-of (m<mod>)))--TYPE--(mod())
(v<root> / --LEX--  :ARG0 (y<s>)  :prep-in-of (n<mod>))--TYPE--(mod(), s())
(p3<root> / plan  :name (n3 / --LEX--))--TYPE--()
(p<root> / --LEX--  :ARG3 (t2<s>)  :compared-to-of (a2<mod>))--TYPE--(mod(), s())
(r2<root> / --LEX--  :ARG2 (s<s>)  :ARG1 (p<o>)  :time-of (c<mod>))--TYPE--(mod(), o(), s())
(w<root> / --LEX--  :ARG1 (s3<s>  :time w))--TYPE--(s())
(explicitanon1<root> / imperative  :mode-of (c / --LEX--  :ARG0 (y / you)  :ARG1 (o<s>)))--TYPE--(s())
(p<root> / person  :part-of (h<poss>)  :ARG0-of (m / --LEX--))--TYPE--(poss())
(s<root> / --LEX--  :ARG0 (r2<s>)  :degree (m2 / more))--TYPE--(s())
(s3<root> / --LEX--  :ARG2 (t / thing  :location-of (c4<mod>)))--TYPE--(mod())
(b4<root> / brand  :name (n2 / --LEX--))--TYPE--()
(r<root> / --LEX--  :ARG3 (c2<o>)  :ARG1 (p2<s>))--TYPE--(o(mod_UNIFY_s()), s())
(t3<root> / --LEX--  :quant (explicitanon1 / 30)  :unit (y2 / year))--TYPE--()
(s3<root> / ship  :name (n4 / --LEX--)  :mod-of (e2<mod>))--TYPE--(mod())
(t2<root> / thing  :ARG1-of (g2 / --LEX--  :ARG0 (i2<s>)  :ARG2 (w<o2>)))--TYPE--(o2(s_UNIFY_s()), s())
(g<root> / --LEX--  :ARG2 (b<o>)  :mod-of (a2<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(d2<root> / --LEX--  :ARG1 (t<o>)  :ARG0 (p<s>)  :compared-to-of (o<mod>))--TYPE--(mod(mod_UNIFY_o()), o(), s())
(p4<root> / person  :manner-of (a<mod>)  :ARG0-of (h3 / have-org-role-91  :ARG2 (g / --LEX--)))--TYPE--(mod())
(p2<root> / person  :ARG0-of (d / --LEX--  :polarity (explicitanon0 / -)))--TYPE--()
(p<root> / --LEX--  :ARG4 (u<o>)  :ARG5 (b<o2>)  :ARG1 (a<s>))--TYPE--(o(), o2(), s())
(s2<root> / --LEX--  :ARG3 (t2<o2>)  :ARG1 (l<o>)  :ARG0 (h<s>)  :manner-of (n<mod>))--TYPE--(mod(), o(), o2(), s())
(p3<root> / product  :name (n / --LEX--)  :source-of (t2<mod>))--TYPE--(mod())
(t<root> / thing  :ARG3-of (t2 / --LEX--  :ARG2 (c2<s>)))--TYPE--(s())
(c<root> / city  :name (n2 / --LEX--)  :part-of (p3<poss>)  :location-of (i2<mod>))--TYPE--(mod(), poss())
(a<root> / agency  :name (n / --LEX--))--TYPE--()
(t<root> / thing  :ARG0-of (r2 / --LEX--  :ARG3 (a2<s>)))--TYPE--(s())
(a2<root> / aircraft  :quant (explicitanon4 / --LEX--))--TYPE--()
(r2<root> / --LEX--  :ARG2 (t2<o>)  :ARG1 (u<s>)  :prep-with-of (c<mod>))--TYPE--(mod(), o(), s())
(b2<root> / book  :name (n2 / --LEX--)  :location-of (m<mod>))--TYPE--(mod())
(s<root> / --LEX--  :ARG1 (i<o>  :ARG0-of s)  :ARG3 (b<s>))--TYPE--(o(), s())
(r5<root> / restaurant  :name (n3 / --LEX--))--TYPE--()
(t<root> / --LEX--  :ARG1 (p<s>)  :ARG2 (d<o>)  :part-of (r2<poss>))--TYPE--(o(), poss(), s())
(h<root> / --LEX--  :prep-out-of (a2<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (m / military  :beneficiary-of (b<mod>)))--TYPE--(mod())
(p4<root> / province  :name (n / --LEX--)  :source-of (l2<mod>))--TYPE--(mod())
(a<root> / --LEX--  :op1 (d2<op1>)  :op2 (d3<op2>)  :concession-of (c<mod>))--TYPE--(mod(), op1(o_UNIFY_o(), s_UNIFY_s()), op2(o_UNIFY_o(), s_UNIFY_s()))
(a<root> / --LEX--  :op5 (i<op5>)  :op2 (m<op2>)  :op1 (d<op1>)  :op3 (c<op3>)  :op4 (c2<op4>)  :topic-of (p<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4(), op5())
(p2<root> / --LEX--  :ARG1 (c<s>)  :ARG2 (a<o>)  :purpose-of (i<mod>))--TYPE--(mod(), o(o_UNIFY_s()), s())
(p3<root> / person  :ARG0-of (f / --LEX--  :ARG1 (d2<s>)  :time-of (m<mod>)))--TYPE--(mod(), s())
(t<root> / thing  :ARG1-of (u / --LEX--  :manner-of (s2<mod>)))--TYPE--(mod())
(c<root> / continent  :name (n2 / --LEX--)  :compared-to-of (l3<mod>))--TYPE--(mod())
(explicitanon6<root> / -  :polarity-of (i2 / --LEX--  :ARG1 (m<s>)  :condition-of (s<mod>)))--TYPE--(mod(), s())
(t2<root> / temporal-quantity  :unit (d / --LEX--)  :part-of (l<poss>)  :duration-of (w2<mod>))--TYPE--(mod(), poss())
(a<root> / --LEX--  :op2 (s<op2>)  :op1 (b<op1>)  :subevent-of (d<mod>))--TYPE--(mod(), op1(s_UNIFY_s()), op2(s_UNIFY_s()))
(n2<root> / --LEX--  :name-of (m3 / magazine  :beneficiary-of (d<mod>)))--TYPE--(mod())
(b<root> / blog  :name (n3 / --LEX--))--TYPE--()
(s<root> / --LEX--  :ARG0 (p3<o2>)  :ARG2 (p2<s>)  :ARG1 (l<o>)  :purpose-of (e<mod>))--TYPE--(mod(), o(), o2(), s())
(m2<root> / more  :degree-of (s2 / --LEX--  :ARG0 (p2<s>)))--TYPE--(s())
(p<root> / percentage-entity  :value (explicitanon5 / --LEX--)  :extent-of (g<mod>))--TYPE--(mod())
(d<root> / date-entity  :day (explicitanon12 / 14)  :year (explicitanon14 / --LEX--)  :time-of (s<mod>))--TYPE--(mod())
(c3<root> / country  :polarity (explicitanon1 / -)  :name (n3 / --LEX--)  :mod-of (p2<mod>))--TYPE--(mod())
(i2<root> / --LEX--  :ARG1 (p<s>)  :ARG0 (p2<o>)  :medium-of (t<mod>))--TYPE--(mod(), o(), s())
(explicitanon2<root> / --LEX--  :quant-of (m2 / monetary-quantity  :mod-of (d<mod>)))--TYPE--(mod())
(w2<root> / work-of-art  :name (n2 / --LEX--)  :location-of (t<mod>))--TYPE--(mod())
(d2<root> / --LEX--  :part-of (p<poss>)  :beneficiary-of (c3<mod>))--TYPE--(mod(), poss())
(h<root> / --LEX--  :degree (m2 / more)  :ARG1 (r3<s>)  :condition-of (r2<mod>))--TYPE--(mod(), s())
(r<root> / --LEX--  :ARG0 (c3<s>)  :time-of (w2<mod>))--TYPE--(mod(s_UNIFY_s()), s())
(r3<root> / religious-group  :name (n / --LEX--)  :prep-among-of (s2<mod>))--TYPE--(mod())
(s<root> / scale  :quant (l2 / --LEX--)  :mod-of (a3<mod>))--TYPE--(mod())
(c2<root> / --LEX--  :ARG2 (p<o>)  :ARG1 (g2<s>)  :beneficiary-of (v2<mod>))--TYPE--(mod(), o(), s())
(b<root> / --LEX--  :ARG1 (d<o>)  :ARG2 (h<o2>)  :ARG0 (p2<s>)  :subevent-of (s<mod>))--TYPE--(mod(), o(), o2(), s())
(o2<root> / --LEX--  :ARG3 (s6<o>)  :ARG1 (v<s>)  :concession-of (p2<mod>))--TYPE--(mod(), o(), s())
(a<root> / --LEX--  :op3 (s2<op3>)  :op9 (g<op9>)  :op1 (m2<op1>)  :op5 (o2<op5>)  :op4 (m3<op4>)  :op10 (g2<op10>)  :op11 (c<op11>)  :op7 (m4<op7>)  :op8 (m5<op8>)  :op2 (b<op2>)  :op12 (c2<op12>)  :op6 (b2<op6>))--TYPE--(op1(), op10(), op11(), op12(), op2(), op3(), op4(), op5(), op6(), op7(), op8(), op9())
(p2<root> / possible-01  :polarity (explicitanon1 / -)  :ARG1 (d2 / --LEX--))--TYPE--()
(t2<root> / temporal-quantity  :unit (y / --LEX--)  :ARG3-of (r / rate-entity-91  :ARG4 (s<s>)))--TYPE--(s())
(r<root> / research-institute  :name (n2 / --LEX--)  :part-of (u<poss>))--TYPE--(poss())
(m4<root> / moon  :name (n5 / --LEX--))--TYPE--()
(h3<root> / hospital  :name (n5 / --LEX--)  :location-of (r<mod>))--TYPE--(mod())
(v<root> / --LEX--  :ARG2-of (h4 / have-rel-role-91  :ARG0 (p / person  :accompanier-of (l<mod>))))--TYPE--(mod())
(t<root> / title  :name (n5 / --LEX--))--TYPE--()
(c2<root> / --LEX--  :ARG0 (g<s>)  :ARG1 (t<o>)  :part-of (e<poss>))--TYPE--(o(), poss(s_UNIFY_s()), s())
(l2<root> / --LEX--  :ARG1 (b<o>)  :ARG0 (a2<s>)  :manner-of (p2<mod>))--TYPE--(mod(o_UNIFY_s()), o(), s())
(a2<root> / --LEX--  :op2 (c5<op2>)  :op1 (c3<op1>)  :op3 (c2<op3>)  :destination-of (b<mod>))--TYPE--(mod(), op1(), op2(), op3())
(s4<root> / service  :name (n3 / --LEX--))--TYPE--()
(w<root> / work-of-art  :name (n / --LEX--)  :topic-of (s<mod>))--TYPE--(mod())
(p4<root> / political-movement  :name (n3 / --LEX--)  :topic-of (t2<mod>))--TYPE--(mod())
(p3<root> / person  :ARG1-of (e / --LEX--  :time-of (p2<mod>)))--TYPE--(mod())
(u<root> / --LEX--  :ARG0 (o<s>)  :ARG2 (l<o2>)  :ARG1 (m<o>)  :purpose-of (a<mod>))--TYPE--(mod(), o(), o2(s_UNIFY_s()), s())
(s2<root> / --LEX--  :ARG0 (d<s>)  :ARG1 (o<o>)  :beneficiary-of (s<mod>))--TYPE--(mod(), o(), s())
(r2<root> / --LEX--  :ARG4 (e2<o>)  :ARG1 (y<s>)  :condition-of (p2<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(t3<root> / television  :name (n3 / --LEX--))--TYPE--()
(u<root> / --LEX--  :ARG0 (c2<o2>)  :ARG1 (c<o>)  :ARG2 (e<s>))--TYPE--(o(), o2(), s(s_UNIFY_o2()))
(n5<root> / --LEX--  :name-of (d2 / disease  :purpose-of (v2<mod>)))--TYPE--(mod())
(e<root> / --LEX--  :ARG3 (d<o2>)  :ARG0 (c<s>)  :ARG4 (d2<o3>)  :ARG1 (c2<o>))--TYPE--(o(s_UNIFY_s()), o2(), o3(), s())
(w<root> / website  :quant (s4 / --LEX--))--TYPE--()
(a<root> / --LEX--  :op2 (p4<op2>)  :op1 (l<op1>)  :manner-of (s<mod>))--TYPE--(mod(), op1(o_UNIFY_o(), s_UNIFY_s()), op2(o_UNIFY_o(), s_UNIFY_s()))
(l3<root> / language  :name (n2 / --LEX--)  :manner-of (c5<mod>))--TYPE--(mod())
(e4<root> / energy-quantity  :quant (explicitanon4 / --LEX--))--TYPE--()
(a3<root> / --LEX--  :op4 (b3<op4>)  :op1 (p<op1>)  :op5 (s3<op5>)  :op3 (b2<op3>)  :op7 (g<op7>)  :op8 (s4<op8>)  :op2 (s2<op2>)  :op6 (t<op6>)  :example-of (a2<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4(), op5(), op6(), op7(), op8())
(c4<root> / country  :quant (explicitanon7 / --LEX--)  :location-of (s<mod>))--TYPE--(mod())
(explicitanon0<root> / --LEX--  :quant-of (d2 / dimension  :mod-of (w3<mod>)))--TYPE--(mod())
(h2<root> / have-org-role-91  :ARG2 (t4 / thing  :name (n2 / --LEX--)))--TYPE--()
(m2<root> / monetary-quantity  :quant (explicitanon6 / --LEX--)  :instrument-of (a2<mod>))--TYPE--(mod())
(r<root> / --LEX--  :part-of (c4<poss>)  :duration-of (p2<mod>))--TYPE--(mod(), poss())
(a<root> / --LEX--  :op6 (c8<op6>)  :op2 (c4<op2>)  :op4 (c6<op4>)  :op5 (c7<op5>)  :op7 (c9<op7>)  :op1 (c3<op1>)  :op3 (c5<op3>)  :example-of (c2<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4(), op5(), op6(), op7())
(a<root> / --LEX--  :op2 (s<op2>)  :op3 (g<op3>)  :op1 (d2<op1>)  :op4 (n5<op4>)  :beneficiary-of (p<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4())
(e<root> / --LEX--  :ARG2-of (h4 / have-org-role-91  :ARG0 (p2 / person  :beneficiary-of (m2<mod>))))--TYPE--(mod())
(a2<root> / --LEX--  :part-of (n5<poss>)  :medium-of (r<mod>))--TYPE--(mod(), poss())
(n3<root> / --LEX--  :name-of (p8 / publication  :medium-of (s2<mod>)))--TYPE--(mod())
(t<root> / thing  :ARG1-of (d3 / --LEX--  :ARG0 (p4<s>)  :topic-of (c2<mod>)))--TYPE--(mod(), s())
(t2<root> / thing  :time-of (h2<mod>)  :ARG1-of (o / --LEX--))--TYPE--(mod())
(p3<root> / person  :beneficiary-of (o<mod>)  :ARG0-of (h2 / have-org-role-91  :ARG2 (o4 / --LEX--)))--TYPE--(mod())
(d2<root> / date-entity  :timezone (explicitanon13 / --LEX--))--TYPE--()
(m2<root> / more  :degree-of (f4 / --LEX--  :consist (a3<mod>)))--TYPE--(mod())
(m2<root> / --LEX--  :ARG0 (m<s>)  :degree (m5 / most))--TYPE--(s())
(d<root> / date-entity  :day (explicitanon12 / 30)  :year (explicitanon14 / --LEX--)  :time-of (a<mod>))--TYPE--(mod())
(d4<root> / documentary  :name (n6 / --LEX--))--TYPE--()
(n4<root> / --LEX--  :name-of (p7 / product  :mod-of (s3<mod>)))--TYPE--(mod())
(s<root> / show  :name (n / --LEX--)  :topic-of (t2<mod>))--TYPE--(mod())
(d<root> / --LEX--  :ARG0 (t2<s>  :ARG1-of d)  :ARG3 (p2<o2>))--TYPE--(o2(), s())
(t<root> / thing  :ARG2-of (s / --LEX--)  :mod-of (d4<mod>))--TYPE--(mod())
(m<root> / --LEX--  :snt5 (s<snt5>)  :snt1 (f<snt1>)  :snt4 (d2<snt4>)  :snt6 (k<snt6>)  :snt2 (b4<snt2>)  :snt3 (c2<snt3>))--TYPE--(snt1(), snt2(), snt3(), snt4(), snt5(), snt6())
(m<root> / --LEX--  :snt6 (w<snt6>)  :snt4 (c3<snt4>)  :snt2 (t2<snt2>)  :snt5 (p6<snt5>)  :snt1 (o<snt1>)  :snt7 (p7<snt7>)  :snt3 (m2<snt3>)  :snt8 (p8<snt8>))--TYPE--(snt1(), snt2(), snt3(), snt4(), snt5(), snt6(), snt7(), snt8())
(m<root> / --LEX--  :snt9 (c9<snt9>)  :snt1 (c<snt1>)  :snt7 (c6<snt7>)  :snt2 (p<snt2>)  :snt6 (a3<snt6>)  :snt4 (w6<snt4>)  :snt8 (o2<snt8>)  :snt5 (a<snt5>)  :snt3 (c2<snt3>))--TYPE--(snt1(), snt2(), snt3(), snt4(), snt5(), snt6(), snt7(), snt8(), snt9())
(p2<root> / person  :topic-of (i2<mod>)  :ARG1-of (k / --LEX--))--TYPE--(mod())
(n3<root> / --LEX--  :name-of (g2 / government-organization  :prep-under-of (g<mod>)))--TYPE--(mod())
(t4<root> / thing  :ARG1-of (i / --LEX--  :polarity (explicitanon3 / -)  :mod-of (e2<mod>)))--TYPE--(mod())
(m6<root> / magazine  :poss (c<poss>)  :name (t2 / --LEX--))--TYPE--(poss())
(u<root> / --LEX--  :ARG2 (p<o>)  :ARG3 (m5<o2>)  :ARG4 (m<s>))--TYPE--(o(), o2(), s())
(p<root> / --LEX--  :value (explicitanon0 / 18005551212))--TYPE--()
(m<root> / --LEX--  :domain (i<dom>  :part m))--TYPE--(dom())
(t<root> / --LEX--  :ARG1-of (i / imitate-01))--TYPE--()
(i<root> / --LEX--  :ARG0 (p / person  :domain (a<dom>)))--TYPE--(dom())
(c<root> / company  :ARG0-of (m / --LEX--  :ARG1 (c2<s>)))--TYPE--(s())
(t<root> / thing  :prep-for-of (d<mod>)  :ARG1-of (t2 / --LEX--))--TYPE--(mod())
(explicitanon1<root> / Al-Qaeda  :op1-of (n / --LEX--  :name-of (c<mod>)))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (n / nucleic-acid  :location-of (i<mod>)))--TYPE--(mod())
(w<root> / weatherman  :ARG2-of (h / --LEX--  :ARG0 (p<s>)))--TYPE--(s())
(p<root> / person  :ARG0-of (h / hold-01  :ARG1 (s / --LEX--)))--TYPE--()
(r<root> / --LEX--  :manner (p / peace)  :ARG1 (y<s>))--TYPE--(s())
(c<root> / --LEX--  :name (n / name  :op1 (explicitanon1 / Yemen)))--TYPE--()
(l<root> / local-region  :name (n / --LEX--)  :topic-of (f<mod>))--TYPE--(mod())
(p<root> / person  :op1 (p2<op1>)  :name (n / --LEX--))--TYPE--(op1())
(a<root> / area-quantity  :quant (explicitanon0 / --LEX--))--TYPE--()
(d<root> / date-entity  :year2 (explicitanon1 / 2012)  :season (w / --LEX--))--TYPE--()
(d<root> / date-entity  :timezone (s / state  :name (n / --LEX--)))--TYPE--()
(s<root> / --LEX--  :op2 (h / he)  :op1 (s2<op1>))--TYPE--(op1())
(p<root> / person  :poss (s2<poss>)  :domain (i<dom>)  :ARG0-of (s / --LEX--))--TYPE--(dom(), poss())
(s<root> / --LEX--  :ARG1-of (s2 / same-01))--TYPE--()
(d<root> / --LEX--  :time-of (s<mod>)  :ARG1-of (d2 / differ-02))--TYPE--(mod())
(t<root> / --LEX--  :domain (d<mod>  :manner t))--TYPE--(mod())
(g<root> / --LEX--  :ARG0 (y<s>)  :ARG3 (d2<o2>)  :ARG1 (j<o>))--TYPE--(o(poss_UNIFY_s()), o2(s_UNIFY_s()), s())
(p<root> / project  :domain (t<dom>)  :name (n / --LEX--))--TYPE--(dom())
(m2<root> / moron  :quant (b / --LEX--)  :domain (y<dom>))--TYPE--(dom())
(l<root> / law  :name (n2 / --LEX--)  :domain (p<dom>))--TYPE--(dom())
(l<root> / --LEX--  :ARG3 (o<s>)  :ARG0 (i / i))--TYPE--(s())
(t2<root> / thing  :polarity (explicitanon0 / -)  :domain (t<dom>)  :ARG0-of (s / --LEX--))--TYPE--(dom())
(d<root> / --LEX--  :ARG2 (t<s>)  :ARG1-of (p / possible-01  :polarity (explicitanon0 / -)))--TYPE--(s())
(p<root> / --LEX--  :name (n / name  :op1 (explicitanon2 / Jesus)))--TYPE--()
(t<root> / --LEX--  :domain (t3<dom>)  :ARG1 (p<s>))--TYPE--(dom(mod_UNIFY_s()), s())
(g<root> / --LEX--  :poss (i / i)  :mod (o / oh  :mode (explicitanon0 / expressive)))--TYPE--()
(p<root> / --LEX--  :ARG1 (b / believe-01)  :polarity (explicitanon0 / -))--TYPE--()
(r<root> / religious-group  :name (n / --LEX--)  :manner-of (o<mod>))--TYPE--(mod())
(g<root> / --LEX--  :polarity (explicitanon0 / -)  :ARG0 (i<s>)  :ARG1 (i2 / it))--TYPE--(s())
(r<root> / rule-01  :name (n / --LEX--)  :topic-of (a<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (n / newspaper  :location-of (s<mod>)))--TYPE--(mod())
(u<root> / university  :domain (w<dom>)  :name (n / --LEX--))--TYPE--(dom())
(s<root> / square  :name (n / --LEX--)  :location-of (m<mod>))--TYPE--(mod())
(p<root> / person  :accompanier-of (t<mod>)  :ARG0-of (n / --LEX--))--TYPE--(mod())
(s<root> / state  :name (n / --LEX--)  :topic-of (k<mod>))--TYPE--(mod())
(n<root> / number  :value (explicitanon0 / --LEX--))--TYPE--()
(p<root> / person  :name (n / --LEX--)  :prep-for-of (w<mod>))--TYPE--(mod())
(a<root> / --LEX--  :op2 (s<op2>)  :op4 (t<op4>)  :op1 (i<op1>))--TYPE--(op1(), op2(), op4())
(p3<root> / person  :name (n / --LEX--)  :prep-without-of (p<mod>))--TYPE--(mod())
(a<root> / aircraft-type  :name (n / --LEX--)  :mod-of (s<mod>))--TYPE--(mod())
(explicitanon1<root> / Aegis  :op1-of (n / --LEX--  :name-of (p<mod>)))--TYPE--(mod())
(g<root> / government-organization  :name (n / --LEX--)  :topic-of (s<mod>))--TYPE--(mod())
(o<root> / --LEX--  :ARG2 (g<s>)  :prep-without-of (k<mod>))--TYPE--(mod(), s())
(d<root> / date-entity  :year2 (explicitanon1 / 2012)  :year (explicitanon0 / --LEX--))--TYPE--()
(p<root> / possible-01  :ARG1 (s / --LEX--  :ARG1 (i<s>)  :ARG2 (c<o>))  :polarity (explicitanon0 / -))--TYPE--(o(), s())
(p2<root> / person  :name (n2 / --LEX--)  :path-of (t<mod>))--TYPE--(mod())
(explicitanon1<root> / Abather  :op1-of (n / --LEX--  :name-of (p2<mod>)))--TYPE--(mod())
(q<root> / --LEX--  :ARG0 (i<s>)  :prep-without-of (p<mod>))--TYPE--(mod(), s())
(i<root> / --LEX--  :polarity (explicitanon0 / -)  :domain (y<dom>)  :mod-of (h<mod>))--TYPE--(dom(), mod())
(h<root> / have-rel-role-91  :mode (explicitanon0 / imperative)  :ARG0 (y2 / you)  :ARG1 (i<s>)  :ARG2 (g2 / --LEX--))--TYPE--(s())
(l<root> / --LEX--  :ARG1 (w / wage))--TYPE--()
(t<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG0 (y<s>)  :ARG2 (p<o>))--TYPE--(o(poss_UNIFY_s()), s())
(explicitanon0<root> / 258  :op1-of (s / --LEX--  :op2 (explicitanon1<op2>)  :manner-of (l<mod>)))--TYPE--(mod(), op2())
(m<root> / --LEX--  :ARG2 (i<s>)  :ARG0 (y / you)  :ARG1-of (p / personal-02))--TYPE--(s())
(o<root> / --LEX--  :op1 (a / ass  :mod (f / fucking)))--TYPE--()
(t<root> / --LEX--  :ARG1 (c<o>  :ARG0-of t)  :ARG4 (m<s>))--TYPE--(o(), s())
(p<root> / person  :ARG0-of (h / --LEX--  :ARG2 (c / congressperson)  :ARG1 (g<s>)))--TYPE--(s())
(g<root> / --LEX--  :ARG0 (g2 / government-organization)  :ARG1 (h<s>))--TYPE--(s())
(l<root> / law  :name (n / --LEX--)  :concession-of (o<mod>))--TYPE--(mod())
(p<root> / --LEX--  :ARG8 (c<o>)  :ARG4 (n<s>))--TYPE--(o(), s())
(p2<root> / person  :name (n / --LEX--)  :instrument-of (p<mod>))--TYPE--(mod())
(p2<root> / --LEX--  :ARG9 (p<o>)  :ARG0 (p3<s>))--TYPE--(o(), s())
(t<root> / --LEX--  :ARG3 (a<o>)  :ARG2 (s2<s>)  :time-of (s<mod>))--TYPE--(mod(), o(), s())
(r<root> / rate-entity-91  :ARG3 (e / --LEX--)  :ARG2 (m<s>)  :frequency-of (b<mod>))--TYPE--(mod(), s())
(d<root> / --LEX--  :polarity (explicitanon2 / -)  :ARG1 (c2<s>  :ARG0-of d))--TYPE--(s())
(o2<root> / ocean  :name (n4 / --LEX--)  :direction-of (p<mod>))--TYPE--(mod())
(c<root> / --LEX--  :ARG1 (n / narcotic)  :ARG0 (o<s>))--TYPE--(s())
(a<root> / amusement-park  :name (n / --LEX--)  :destination-of (s<mod>))--TYPE--(mod())
(p2<root> / publication  :domain (e<dom>)  :name (n2 / --LEX--))--TYPE--(dom())
(explicitanon3<root> / -  :polarity-of (d / --LEX--  :ARG0 (p2 / person  :prep-as-of (p<mod>))))--TYPE--(mod())
(t<root> / thing  :ARG4-of (g / --LEX--  :ARG3 (h<s>)))--TYPE--(s())
(w<root> / world-region  :name (n / --LEX--)  :beneficiary-of (g<mod>))--TYPE--(mod())
(s<root> / --LEX--  :domain (t<dom>)  :poss (i2<poss>)  :instrument-of (e<mod>))--TYPE--(dom(), mod(), poss())
(explicitanon1<root> / United  :op1-of (n / --LEX--  :op2 (explicitanon2 / Kingdom)  :name-of (c<mod>)))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (t2 / territory  :beneficiary-of (n<mod>)))--TYPE--(mod())
(p<root> / person  :op2 (p3<op2>)  :op1 (p2<op1>)  :name (n / --LEX--))--TYPE--(op1(), op2())
(c<root> / company  :name (n3 / --LEX--)  :prep-from-of (n2<mod>))--TYPE--(mod())
(a<root> / aircraft-type  :name (n / --LEX--)  :location-of (s<mod>))--TYPE--(mod())
(t<root> / --LEX--  :quant (explicitanon0 / 2)  :unit (w / week))--TYPE--()
(explicitanon1<root> / United  :op1-of (n / name  :op2 (explicitanon2 / States)  :name-of (c / country  :ARG1-of (o / --LEX--  :ARG0 (p<s>)))))--TYPE--(s())
(n2<root> / --LEX--  :name-of (c2 / city  :path-of (g<mod>)))--TYPE--(mod())
(t<root> / temperature-quantity  :quant (explicitanon0 / --LEX--)  :destination-of (h<mod>))--TYPE--(mod())
(b<root> / bridge  :name (n2 / --LEX--))--TYPE--()
(n2<root> / --LEX--  :name-of (m / museum  :location-of (v<mod>)))--TYPE--(mod())
(m<root> / musical-note  :name (n / --LEX--))--TYPE--()
(a<root> / amr-unintelligible  :value (explicitanon0 / --LEX--)  :domain (d<dom>))--TYPE--(dom())
(m3<root> / magazine  :name (n / --LEX--)  :source-of (p<mod>))--TYPE--(mod())
(v<root> / variable  :name (n2 / --LEX--))--TYPE--()
(explicitanon2<root> / Jewish  :op1-of (n / --LEX--  :name-of (r<mod>)))--TYPE--(mod())
(y<root> / you  :ARG0-of (l / --LEX--))--TYPE--()
(n<root> / --LEX--  :name-of (t2 / thing  :location-of (b2<mod>)))--TYPE--(mod())
(g<root> / government-organization  :name (n / --LEX--)  :ARG1-of (g2 / govern-01  :ARG0 (p<s>)))--TYPE--(s())
(e<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (h<o>)  :ARG3 (y / you))--TYPE--(o(), s())
(t<root> / thing  :quant (m / --LEX--)  :purpose-of (c<mod>))--TYPE--(mod())
(t<root> / thing  :ARG1-of (b / --LEX--  :degree (m / more)))--TYPE--()
(g<root> / --LEX--  :domain (i<dom>)  :time (n / now))--TYPE--(dom())
(p<root> / --LEX--  :ARG2 (l<s>)  :ARG1 (i<o>)  :ARG0 (y / you)  :mode (explicitanon0 / imperative))--TYPE--(o(), s(poss_UNIFY_o()))
(l<root> / language  :poss (i<poss>)  :name (n / --LEX--))--TYPE--(poss())
(s<root> / --LEX--  :ARG1 (a / amr-unknown  :mod (f / fuck  :mode (explicitanon0 / expressive)))  :ARG2 (p<s>))--TYPE--(s())
(s<root> / --LEX--  :ARG0 (y / you)  :ARG1 (t / thing  :manner-of (w<mod>)))--TYPE--(mod())
(c<root> / criminal-organization  :name (n / --LEX--)  :topic-of (m<mod>))--TYPE--(mod())
(c<root> / --LEX--  :ARG1 (d<o>)  :ARG2 (o<o2>)  :ARG3 (h<s>))--TYPE--(o(), o2(), s())
(p<root> / person  :name (n / --LEX--)  :concession-of (r<mod>))--TYPE--(mod())
(e<root> / --LEX--  :ARG3 (o<o2>)  :ARG1 (y<s>  :ARG0-of e)  :topic-of (m<mod>))--TYPE--(mod(), o2(), s())
(d<root> / --LEX--  :ARG1 (e<s>)  :ARG3 (p<o>)  :time (n / now))--TYPE--(o(), s())
(r<root> / --LEX--  :ARG1 (l<o>)  :ARG0 (t<s>  :ARG2-of r))--TYPE--(o(poss_UNIFY_s()), s())
(b<root> / brother  :ARG2-of (h2 / --LEX--  :ARG0 (p<s>)))--TYPE--(s())
(p<root> / person  :ARG1-of (h / have-rel-role-91  :ARG2 (c / --LEX--)  :ARG0 (p2 / person  :topic-of (a<mod>))))--TYPE--(mod())
(f<root> / father  :ARG2-of (h2 / --LEX--  :ARG0 (p<s>)))--TYPE--(s())
(p<root> / --LEX--  :ARG3 (i<s>)  :ARG0 (y / you))--TYPE--(s())
(d<root> / --LEX--  :ARG1 (g<o>)  :ARG0 (t4<s>  :time d))--TYPE--(o(), s())
(g<root> / --LEX--  :ARG4 (p<s>)  :ARG1 (y / you))--TYPE--(s())
(l<root> / --LEX--  :ARG1 (t / thing)  :topic-of (h<mod>))--TYPE--(mod())
(m<root> / mister  :ARG0-of (h2 / have-org-role-91  :ARG2 (p / --LEX--)))--TYPE--()
(p<root> / --LEX--  :ARG0-of (p2 / post-01))--TYPE--()
(e2<root> / event  :name (n / --LEX--)  :example-of (t<mod>))--TYPE--(mod())
(c<root> / city  :name (n / --LEX--)  :instrument-of (p<mod>))--TYPE--(mod())
(v<root> / --LEX--  :mod (explicitanon0 / 12)  :part-of (c<poss>))--TYPE--(poss())
(v<root> / --LEX--  :mod (explicitanon0 / 5)  :part-of (c<poss>))--TYPE--(poss())
(s<root> / --LEX--  :ARG1 (i<o>)  :ARG0 (c<s>))--TYPE--(o(), s(dom_UNIFY_o()))
(p2<root> / --LEX--  :name (n2 / name  :op1 (explicitanon4 / AP)))--TYPE--()
(t<root> / --LEX--  :ARG2 (r<o2>)  :ARG0 (i<o>)  :ARG1 (y<s>))--TYPE--(o(), o2(o_UNIFY_s(), s_UNIFY_o()), s())
(p<root> / --LEX--  :consist (l<mod>)  :part-of (s<poss>))--TYPE--(mod(), poss())
(e2<root> / energy-quantity  :unit (m2 / --LEX--)  :quant-of (e<mod>))--TYPE--(mod())
(p<root> / park  :poss (w<poss>)  :name (n / --LEX--))--TYPE--(poss())
(b<root> / --LEX--  :ARG1 (h<s>)  :degree (m2 / most)  :time-of (w2<mod>))--TYPE--(mod(), s())
(explicitanon1<root> / Australia  :op1-of (n / --LEX--  :name-of (c<mod>)))--TYPE--(mod())
(b<root> / --LEX--  :domain (i<dom>)  :poss (y<poss>)  :concession-of (p<mod>))--TYPE--(dom(), mod(), poss())
(s2<root> / --LEX--  :op1 (d<op1>)  :op2 (s / say-01  :ARG1 (a2 / amr-unknown)))--TYPE--(op1())
(w<root> / --LEX--  :ARG1 (o<o>)  :ARG0 (y<s>)  :condition-of (g<mod>))--TYPE--(mod(), o(dom_UNIFY_s()), s())
(e2<root> / --LEX--  :domain (t3<dom>  :compared-to e2))--TYPE--(dom())
(m<root> / music-key  :name (n / --LEX--))--TYPE--()
(m<root> / --LEX--  :snt1 (i<snt1>)  :snt2 (a2<snt2>))--TYPE--(snt1(), snt2(dom_UNIFY_snt1()))
(s<root> / --LEX--  :op1 (n / nail)  :op2 (h<op2>))--TYPE--(op2())
(h<root> / have-rel-role-91  :ARG0 (s<s>)  :ARG1 (h2<o>)  :ARG4 (s2<o3>)  :ARG2 (l / --LEX--))--TYPE--(o(), o3(), s())
(h<root> / have-rel-role-91  :ARG0 (p<s>)  :ARG1 (p2<o>)  :ARG3 (w<o3>)  :ARG2 (h2 / --LEX--))--TYPE--(o(), o3(), s())
(a<root> / aircraft  :name (n3 / --LEX--)  :manner-of (c<mod>))--TYPE--(mod())
(v<root> / volume-quantity  :quant (explicitanon1 / --LEX--)  :unit (g / gallon))--TYPE--()
(c<root> / city-district  :name (n / --LEX--)  :mod-of (v<mod>))--TYPE--(mod())
(p3<root> / publication  :name (n2 / --LEX--)  :ARG2-of (h / have-org-role-91  :ARG3 (r<o2>)  :ARG0 (p2<s>)))--TYPE--(o2(), s())
(t<root> / --LEX--  :quant-of (b / before  :op1 (n / now)  :time-of (d<mod>)))--TYPE--(mod())
(s<root> / --LEX--  :ARG3 (explicitanon1<o2>)  :ARG1 (a<s>)  :ARG2 (explicitanon0<o>)  :degree-of (p<mod>))--TYPE--(mod(), o(), o2(), s())
(a2<root> / acidity-quantity  :quant (explicitanon0 / --LEX--))--TYPE--()
(s<root> / --LEX--  :ARG2 (g / gun))--TYPE--()
(c<root> / child  :ARG2-of (h / --LEX--  :ARG1 (t<o>)  :ARG0 (b<s>)))--TYPE--(o(), s())
(m<root> / monetary-quantity  :quant (explicitanon0 / --LEX--)  :extent-of (d<mod>))--TYPE--(mod())
(m<root> / --LEX--  :quant-of (c2 / car  :mod-of (a<mod>)))--TYPE--(mod())
(explicitanon1<root> / Louisiana  :op1-of (n / --LEX--  :name-of (s<mod>)))--TYPE--(mod())
(d<root> / --LEX--  :ARG1 (n<o>)  :ARG0 (p<s>)  :prep-on-behalf-of (c<mod>))--TYPE--(mod(poss_UNIFY_s()), o(poss_UNIFY_s()), s())
(g<root> / --LEX--  :ARG1 (t2 / thing)  :ARG0 (y / you))--TYPE--()
(t<root> / --LEX--  :ARG0 (o<o>)  :ARG1 (s<s>)  :time-of (b<mod>))--TYPE--(mod(), o(), s(s_UNIFY_o()))
(w<root> / --LEX--  :ARG4 (p<o2>)  :ARG2 (d<o>)  :ARG0 (y<s>))--TYPE--(o(o_UNIFY_o2(), s_UNIFY_s()), o2(), s())
(l<root> / --LEX--  :ARG0 (t<s>)  :ARG1 (h<o>)  :time-of (g<mod>))--TYPE--(mod(), o(dom_UNIFY_s()), s())
(w<root> / --LEX--  :ARG1 (p<o>)  :ARG0 (w2<s>)  :ARG3 (w3<o2>))--TYPE--(o(o_UNIFY_s()), o2(s_UNIFY_s()), s())
(f<root> / --LEX--  :ARG1 (r<o>)  :ARG0 (y<s>)  :manner-of (c3<mod>))--TYPE--(mod(), o(s_UNIFY_mod()), s())
(s2<root> / --LEX--  :op2 (p / paste-01)  :op1 (c<op1>))--TYPE--(op1())
(o<root> / --LEX--  :mod (a / another))--TYPE--()
(r2<root> / --LEX--  :manner (l / laugh-01  :ARG0 (i / i  :poss-of (b / butt  :ARG1-of l)  :ARG1-of r2)  :manner (o / off))  :ARG2 (f / floor))--TYPE--()
(m<root> / --LEX--  :ARG2 (i<s>)  :ARG0 (y<o2>))--TYPE--(o2(), s())
(t<root> / --LEX--  :ARG1 (w<o>)  :ARG2 (o<o2>)  :ARG0 (s<s>)  :manner-of (r<mod>))--TYPE--(mod(), o(s_UNIFY_o2()), o2(), s())
(c<root> / --LEX--  :domain (r<dom>  :time c))--TYPE--(dom())
(f<root> / --LEX--  :ARG1 (a<mod>  :purpose f))--TYPE--(mod())
(p<root> / political-movement  :name (n / --LEX--)  :source-of (g<mod>))--TYPE--(mod())
(s<root> / --LEX--  :ARG2 (f<s>)  :ARG0 (i<o>  :ARG1-of s))--TYPE--(o(s_UNIFY_s()), s())
(t<root> / thing  :ARG1-of (q / --LEX--  :ARG2 (p2 / person)))--TYPE--()
(t<root> / thing  :source-of (a<mod>)  :ARG3-of (l / --LEX--))--TYPE--(mod())
(explicitanon0<root> / imperative  :mode-of (s / --LEX--  :ARG1 (t<o>)  :ARG0 (y<s>)  :condition-of (p<mod>)))--TYPE--(mod(), o(), s())
(a<root> / amr-unintelligible  :poss (i<poss>)  :value (explicitanon2 / --LEX--)  :mod-of (p<mod>))--TYPE--(mod(), poss())
(e<root> / --LEX--  :ARG0 (y<o>  :ARG1-of e)  :ARG2 (s<o2>))--TYPE--(o(), o2(s_UNIFY_o()))
(h2<root> / have-rel-role-91  :ARG0 (h3 / he)  :ARG1 (p<s>)  :ARG2 (h4 / --LEX--))--TYPE--(s())
(o<root> / --LEX--  :domain (p<dom>)  :ord-of (r<mod>))--TYPE--(dom(), mod())
(p2<root> / person  :consist (c<mod>)  :name (n / --LEX--))--TYPE--(mod())
(t<root> / thing  :ARG0-of (e / --LEX--  :subevent-of (t2<mod>)))--TYPE--(mod())
(m<root> / most  :degree-of (c2 / --LEX--  :ARG2 (c<o>)  :ARG1 (h<s>)))--TYPE--(o(), s())
(g<root> / --LEX--  :ARG2 (p<o>)  :ARG1 (a<s>)  :ARG3 (w<o2>))--TYPE--(o(), o2(), s(s_UNIFY_o()))
(a<root> / --LEX--  :op2 (r<op2>)  :op1 (k<op1>))--TYPE--(op1(o_UNIFY_o(o_UNIFY_s()), s_UNIFY_s()), op2(o_UNIFY_o(o_UNIFY_s()), s_UNIFY_s()))
(p2<root> / --LEX--  :ARG0 (p<s>)  :ARG1 (t<o>)  :subevent-of (t2<mod>))--TYPE--(mod(o_UNIFY_o(), s_UNIFY_s()), o(), s())
(c<root> / criminal-organization  :name (n / --LEX--)  :example-of (o<mod>))--TYPE--(mod())
(o<root> / --LEX--  :ARG1 (c2<s>)  :topic-of (a<mod>))--TYPE--(mod(), s(mod_UNIFY_mod()))
(p3<root> / percentage-entity  :value (explicitanon0 / --LEX--)  :domain (t2<dom>))--TYPE--(dom())
(c<root> / --LEX--  :ARG2 (w<o2>)  :ARG1 (c2<o>)  :ARG3 (p<s>)  :purpose-of (b<mod>))--TYPE--(mod(), o(), o2(), s())
(d<root> / date-entity  :month (explicitanon3 / 5)  :year (explicitanon4 / --LEX--)  :time-of (s<mod>))--TYPE--(mod())
(t<root> / temporal-quantity  :poss (w<poss>)  :unit (y / --LEX--))--TYPE--(poss())
(a<root> / amusement-park  :name (n / --LEX--)  :beneficiary-of (c<mod>))--TYPE--(mod())
(n<root> / --LEX--  :name-of (o / organization  :destination-of (d2<mod>)))--TYPE--(mod())
(e<root> / --LEX--  :ARG0 (c<s>  :ARG1-of e)  :ARG2 (p<o2>)  :purpose-of (r<mod>))--TYPE--(mod(), o2(), s())
(w<root> / worship-place  :name (n / --LEX--)  :location-of (s<mod>))--TYPE--(mod())
(w<root> / --LEX--  :ARG1 (c<o>)  :ARG0 (y<s>)  :condition-of (p<mod>))--TYPE--(mod(), o(o_UNIFY_mod(), s_UNIFY_s()), s())
(r<root> / --LEX--  :ARG0 (y<s>)  :ARG2 (p3<o2>)  :ARG1 (p2<o>)  :condition-of (s<mod>))--TYPE--(mod(), o(), o2(poss_UNIFY_s()), s())
(n<root> / --LEX--  :name-of (c2 / company  :location-of (s<mod>)))--TYPE--(mod())
(p<root> / product  :name (n / --LEX--)  :example-of (f<mod>))--TYPE--(mod())
(p<root> / person  :condition-of (l<mod>)  :ARG0-of (i2 / --LEX--))--TYPE--(mod())
(g<root> / --LEX--  :ARG4 (w<s>)  :mod-of (p<mod>))--TYPE--(mod(), s())
(p<root> / --LEX--  :ARG0-of (h / have-rel-role-91  :ARG2 (b / brother)))--TYPE--()
(s<root> / --LEX--  :ARG1 (t<o>)  :ARG2 (p / person  :ARG0-of (h / have-rel-role-91  :ARG2 (b / brother)))  :ARG0 (c<s>))--TYPE--(o(), s())
(s<root> / --LEX--  :ARG1 (y<o>)  :ARG0 (c<s>)  :ARG2-of (l / laugh-01  :mode (explicitanon2 / expressive)  :manner (l2 / loud)  :ARG0 (i / i)))--TYPE--(o(), s())
(l<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG2 (h<s>)  :ARG1 (w<o>)  :ARG0 (y / you))--TYPE--(o(), s(o_UNIFY_o()))
(h<root> / --LEX--  :ARG0 (y<s>)  :ARG1 (l / luck))--TYPE--(s())
(s<root> / --LEX--  :ARG2 (v<o>)  :ARG1 (y<s>)  :condition-of (h<mod>))--TYPE--(mod(), o(poss_UNIFY_s()), s())
(g<root> / government-organization  :name (n / --LEX--)  :accompanier-of (s<mod>))--TYPE--(mod())
(i<root> / --LEX--  :ARG1 (m<o>)  :ARG2 (s<o2>)  :ARG0 (w<s>))--TYPE--(o(), o2(s_UNIFY_o()), s(mod_UNIFY_o2()))
(p<root> / --LEX--  :ARG1 (m<o>)  :ARG3 (r<o2>)  :ARG0 (c<s>))--TYPE--(o(), o2(o_UNIFY_s()), s())
(n<root> / numerical-quantity  :unit (m / --LEX--)  :quant-of (w2<mod>))--TYPE--(mod())
(m2<root> / mass-quantity  :quant (explicitanon1 / --LEX--))--TYPE--()
(a4<root> / aircraft  :name (n2 / --LEX--)  :destination-of (f<mod>))--TYPE--(mod())
(h<root> / --LEX--  :ARG2 (s / significant-other)  :ARG0 (p2<s>))--TYPE--(s())
(p<root> / --LEX--  :ARG0 (y / you)  :ARG1 (t / thing  :example-of (t2<mod>))  :mode (explicitanon0 / imperative))--TYPE--(mod())
(a<root> / --LEX--  :ARG2 (d<o2>)  :ARG1 (b<s>)  :ARG0 (c<o>)  :purpose-of (s<mod>))--TYPE--(mod(), o(), o2(s_UNIFY_o()), s())
(f<root> / --LEX--  :ARG1 (a<o>)  :ARG0 (g<s>)  :concession-of (f2<mod>))--TYPE--(mod(o_UNIFY_o(), s_UNIFY_s()), o(), s())
(u<root> / --LEX--  :ARG1 (f<o>)  :ARG2 (t<o2>)  :ARG0 (g<s>)  :manner-of (a<mod>))--TYPE--(mod(), o(), o2(s_UNIFY_s()), s())
(n2<root> / natural-disaster  :name (n3 / --LEX--)  :topic-of (e2<mod>))--TYPE--(mod())
(t<root> / thing  :ARG0-of (i / --LEX--  :ARG1 (t3 / thing  :degree-of (o<mod>))))--TYPE--(mod())
(f<root> / --LEX--  :ARG1 (c<o>)  :ARG0 (i<s>)  :ARG4 (r<o2>))--TYPE--(o(s_UNIFY_s()), o2(), s())
(d<root> / --LEX--  :ARG1 (s<o>)  :ARG2 (j<o2>)  :ARG0 (p<s>)  :time-of (e<mod>))--TYPE--(mod(), o(), o2(poss_UNIFY_s()), s())
(n4<root> / --LEX--  :poss (c2<poss>)  :accompanier-of (n2<mod>))--TYPE--(mod(), poss())
(d<root> / --LEX--  :ARG1 (t<s>)  :manner-of (g<mod>))--TYPE--(mod(s_UNIFY_s()), s())
(c<root> / company  :name (n / --LEX--)  :condition-of (f2<mod>))--TYPE--(mod())
(p<root> / person  :purpose-of (o<mod>)  :ARG1-of (v / --LEX--))--TYPE--(mod())
(s<root> / sentiment  :quant (s2 / --LEX--))--TYPE--()
(t2<root> / thing  :domain (t<dom>)  :ARG1-of (q / --LEX--)  :subevent-of (d<mod>))--TYPE--(dom(), mod())
(c<root> / company  :name (n / --LEX--)  :concession-of (s<mod>))--TYPE--(mod())
(m<root> / --LEX--  :ARG0 (i<s>)  :ARG2 (y<o>)  :ARG1-of (p / personal-02))--TYPE--(o(), s())
(explicitanon1<root> / Guantanamo  :op1-of (n / --LEX--  :op3 (explicitanon3<op3>)  :op2 (explicitanon2 / Bay)  :op4 (explicitanon4 / Base)  :name-of (f<mod>)))--TYPE--(mod(), op3())
(b<root> / --LEX--  :op1 (explicitanon1<op1>)  :op2 (explicitanon2 / 44))--TYPE--(op1())
(t3<root> / thing  :ARG2-of (r / --LEX--)  :source-of (t<mod>))--TYPE--(mod())
(r<root> / --LEX--  :domain (w<dom>)  :beneficiary-of (f<mod>))--TYPE--(dom(), mod())
(p3<root> / --LEX--  :ARG0 (p<s>)  :ARG7 (v<o2>)  :ARG1 (p2<o>))--TYPE--(o(), o2(), s())
(n3<root> / --LEX--  :name-of (c2 / country  :instrument-of (o2<mod>)))--TYPE--(mod())
(o<root> / --LEX--  :op1 (e<op1>  :op2-of o))--TYPE--(op1())
(w<root> / worship-place  :name (n / --LEX--)  :topic-of (d<mod>))--TYPE--(mod())
(a<root> / --LEX--  :op1 (s<op1>)  :op2 (c2<op2>))--TYPE--(op1(dom_UNIFY_dom(), poss_UNIFY_poss()), op2(dom_UNIFY_dom(), poss_UNIFY_poss()))
(o<root> / --LEX--  :domain (y<dom>)  :op1 (r<op1>))--TYPE--(dom(), op1(poss_UNIFY_dom()))
(s<root> / --LEX--  :ARG2 (p<o2>)  :ARG1 (g<o>)  :ARG0 (i<s>))--TYPE--(o(o_UNIFY_s(), s_UNIFY_o2()), o2(), s(s_UNIFY_o2()))
(w<root> / --LEX--  :time (n / now)  :condition-of (k<mod>))--TYPE--(mod())
(p<root> / person  :prep-from-of (e<mod>)  :ARG0-of (l / --LEX--))--TYPE--(mod())
(t<root> / thing  :degree (s / so)  :domain (t2<dom>)  :ARG2-of (b / --LEX--))--TYPE--(dom())
(h<root> / --LEX--  :ARG0 (p<s>)  :mod-of (s<mod>))--TYPE--(mod(s_UNIFY_s()), s())
(h<root> / --LEX--  :ARG2 (p3 / president)  :ARG0 (p<s>))--TYPE--(s())
(explicitanon0<root> / -  :polarity-of (r / --LEX--  :ARG1 (p3<o>)  :ARG0 (t<s>)  :manner-of (c<mod>)))--TYPE--(mod(), o(s_UNIFY_mod()), s())
(w<root> / --LEX--  :op1 (a<op1>)  :prep-on-of (c2<mod>))--TYPE--(mod(), op1())
(p3<root> / --LEX--  :ARG2-of (h / have-org-role-91  :ARG0 (p2<s>)  :purpose-of (p<mod>)))--TYPE--(mod(), s())
(m<root> / military  :name (n / --LEX--)  :topic-of (k<mod>))--TYPE--(mod())
(g<root> / --LEX--  :ARG4 (c2<o>)  :ARG0 (i<s>)  :time-of (a2<mod>))--TYPE--(mod(), o(poss_UNIFY_s()), s())
(a2<root> / --LEX--  :op2 (t3<op2>)  :duration-of (t2<mod>))--TYPE--(mod(), op2())
(m<root> / more  :degree-of (o / --LEX--  :domain (p<dom>)  :condition-of (e<mod>)))--TYPE--(dom(), mod())
(c<root> / --LEX--  :name (n2 / name  :op1 (explicitanon2 / England))  :mod-of (p2<mod>))--TYPE--(mod())
(b<root> / --LEX--  :op1 (p<op1>)  :domain (g<dom>  :concession b))--TYPE--(dom(), op1())
(s<root> / --LEX--  :ARG1 (t<o>)  :ARG0 (p<s>)  :time (n / now))--TYPE--(o(), s())
(t2<root> / --LEX--  :mode (explicitanon1 / expressive)  :ARG1 (y / you)  :ARG0 (i / i))--TYPE--()
(f<root> / --LEX--  :ARG1 (t2 / thing)  :ARG0 (w<s>)  :condition-of (p<mod>))--TYPE--(mod(), s())
(i<root> / island  :name (n / --LEX--)  :mod-of (p<mod>))--TYPE--(mod())
(p<root> / person  :ARG1-of (h3 / have-rel-role-91  :ARG2 (c / --LEX--)  :ARG0 p))--TYPE--()
(p<root> / political-movement  :mode (explicitanon3 / imperative)  :name (n2 / --LEX--))--TYPE--()
(t<root> / thing  :poss (c<poss>)  :name (n / --LEX--)  :topic-of (a<mod>))--TYPE--(mod(), poss())
(d2<root> / --LEX--  :year (explicitanon2 / 2001))--TYPE--()
(b<root> / broadcast-program  :domain (s<dom>)  :name (n / --LEX--))--TYPE--(dom())
(f<root> / --LEX--  :ARG1 (m<o>)  :ARG4 (t2<s>)  :purpose-of (e<mod>))--TYPE--(mod(), o(), s())
(c<root> / --LEX--  :ARG1 (e<s>)  :ARG2 (explicitanon0<o>)  :ARG5 (p<o2>))--TYPE--(o(), o2(), s())
(s<root> / --LEX--  :mod (c / computer)  :topic-of (p2<mod>))--TYPE--(mod())
(r2<root> / --LEX--  :ARG0 (c<s>)  :ARG3 (d<o2>)  :ARG1 (a2<o>))--TYPE--(o(o_UNIFY_s()), o2(), s())
(s<root> / --LEX--  :ARG2 (r<o>)  :ARG5 (d<o3>)  :ARG6 (explicitanon1<o4>)  :ARG4 (c<o2>)  :ARG1 (explicitanon0<s>))--TYPE--(o(), o2(), o3(), o4(), s())
(i2<root> / --LEX--  :ARG3 (i<o>)  :ARG1 (c<s>))--TYPE--(o(), s(poss_UNIFY_o()))
(b<root> / --LEX--  :ARG1 (i<s>)  :ARG2 (h<o>)  :manner-of (p<mod>))--TYPE--(mod(), o(poss_UNIFY_s()), s())
(n2<root> / --LEX--  :name (n3 / name  :op2 (explicitanon5 / Post)  :op1 (explicitanon4 / Washington)))--TYPE--()
(explicitanon4<root> / 10  :op1-of (v / --LEX--  :op2 (explicitanon5<op2>)  :mod-of (p<mod>)))--TYPE--(mod(), op2())
(r2<root> / religious-group  :name (n / --LEX--)  :example-of (r<mod>))--TYPE--(mod())
(i<root> / --LEX--  :ARG0 (i2<s>  :ARG3-of i))--TYPE--(s())
(r<root> / --LEX--  :ARG4 (g<o>)  :ARG1 (o2<s>)  :purpose-of (c<mod>))--TYPE--(mod(), o(), s())
(explicitanon1<root> / --LEX--  :quant-of (f / face  :mod-of (y<mod>)))--TYPE--(mod())
(f<root> / --LEX--  :ARG3 (d<o2>)  :ARG1 (w<s>)  :ARG0 (l<o>)  :time-of (v<mod>))--TYPE--(mod(), o(), o2(s_UNIFY_o()), s())
(l<root> / --LEX--  :ARG1 (y<o>)  :ARG0 (p<s>)  :ARG2 (s<o2>))--TYPE--(o(), o2(s_UNIFY_o()), s(poss_UNIFY_o()))
(p<root> / person  :prep-under-of (w<mod>)  :ARG0-of (l / --LEX--))--TYPE--(mod())
(p2<root> / --LEX--  :ARG1 (d<o>)  :prep-at-of (t<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(h<root> / --LEX--  :ARG0 (f<o2>)  :ARG1 (w<o>)  :ARG2 (y<s>))--TYPE--(o(dom_UNIFY_s()), o2(), s())
(o<root> / --LEX--  :op1 (m2<op1>)  :location-of (p2<mod>))--TYPE--(mod(s_UNIFY_op1()), op1())
(a<root> / --LEX--  :ARG0 (y / you)  :ARG2 (h<s>)  :ARG1 (p<o>)  :mode (explicitanon0 / imperative))--TYPE--(o(poss_UNIFY_s()), s())
(n2<root> / --LEX--  :name-of (l / law  :beneficiary-of (c<mod>)))--TYPE--(mod())
(c<root> / country  :ARG0-of (h / have-rel-role-91  :ARG2 (b / --LEX--)  :ARG1 (w<s>)))--TYPE--(s())
(b<root> / --LEX--  :ARG0 (p<s>  :ARG4-of b)  :ARG1 (t<o>)  :ARG2 (m<o2>))--TYPE--(o(poss_UNIFY_s()), o2(), s())
(s<root> / show  :name (n2 / --LEX--)  :location-of (a<mod>))--TYPE--(mod())
(c<root> / --LEX--  :ARG3 (d<o2>)  :ARG1 (n<s>)  :ARG2 (e2<o>)  :purpose-of (m<mod>))--TYPE--(mod(), o(), o2(), s())
(a<root> / --LEX--  :ARG4 (s<o2>)  :ARG0 (i<o>)  :ARG1 (t<s>))--TYPE--(o(), o2(), s())
(explicitanon0<root> / imperative  :mode-of (t2 / --LEX--  :ARG1 (m<s>)  :ARG0 (y / you)  :condition-of (l<mod>)))--TYPE--(mod(), s())
(explicitanon3<root> / expressive  :mode-of (w / --LEX--  :ARG0 (d<s>)))--TYPE--(s())
(s<root> / --LEX--  :ARG1 (m<o>)  :ARG2 (n<o2>)  :ARG0 (p<s>))--TYPE--(o(poss_UNIFY_o2()), o2(poss_UNIFY_s()), s())
(t2<root> / thing  :ARG1-of (c / --LEX--  :ARG0 (h<s>)  :manner-of (m2<mod>)))--TYPE--(mod(), s())
(g3<root> / government-organization  :poss (w<poss>)  :ARG1-of (g4 / --LEX--))--TYPE--(poss())
(s<root> / soldier  :ARG0-of (h / have-rel-role-91  :ARG2 (f / --LEX--)))--TYPE--()
(c<root> / --LEX--  :ARG1-of (r / resemble-01  :ARG2 (m2 / mother)))--TYPE--()
(c<root> / --LEX--  :ARG2 (i<o2>)  :ARG0 (p<s>  :purpose c)  :ARG1 (p3<o>))--TYPE--(o(), o2(poss_UNIFY_s()), s())
(n<root> / network  :name (n2 / --LEX--))--TYPE--()
(p2<root> / person  :ARG3-of (w / --LEX--))--TYPE--()
(a<root> / --LEX--  :op3 (c<op3>)  :op1 (m<op1>)  :op2 (w<op2>)  :instrument-of (f<mod>))--TYPE--(mod(), op1(), op2(), op3())
(g<root> / government-organization  :name (n2 / --LEX--)  :domain (o<dom>))--TYPE--(dom())
(t2<root> / thing  :ARG1-of (c / --LEX--)  :accompanier-of (g<mod>))--TYPE--(mod())
(r2<root> / --LEX--  :ARG1 (h / history)  :ARG0 (p2<s>))--TYPE--(s())
(explicitanon2<root> / Jesus  :op1-of (n / --LEX--  :name-of (p2<mod>)))--TYPE--(mod())
(r2<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (t / thing)  :concession-of (r<mod>))--TYPE--(mod(), s())
(o<root> / --LEX--  :ARG1 (y<s>  :ARG0-of o)  :ARG3 (r<o2>))--TYPE--(o2(s_UNIFY_s()), s())
(p<root> / person  :ARG1-of (e / --LEX--  :ARG2 (p2<o2>)  :ARG0 (y<s>)  :condition-of (g<mod>)))--TYPE--(mod(), o2(), s())
(s<root> / --LEX--  :ARG0 (y<s>)  :domain (s2<dom>)  :prep-on-behalf-of (e<mod>))--TYPE--(dom(s_UNIFY_s()), mod(), s())
(e<root> / --LEX--  :ARG1 (s<s>)  :ARG2 (p<o>))--TYPE--(o(), s(op1_UNIFY_o()))
(n2<root> / --LEX--  :name-of (e / ethnic-group  :source-of (l<mod>)))--TYPE--(mod())
(l2<root> / lake  :name (n / --LEX--))--TYPE--()
(a<root> / --LEX--  :op2 (d<op2>  :op1-of a)  :time-of (p<mod>))--TYPE--(mod(), op2())
(c<root> / canal  :name (n / --LEX--))--TYPE--()
(n2<root> / --LEX--  :name-of (l / local-region  :destination-of (d<mod>)))--TYPE--(mod())
(s<root> / --LEX--  :ARG3 (explicitanon1<o>)  :domain (h<dom>)  :ARG1 (explicitanon0<s>))--TYPE--(dom(), o(), s())
(t<root> / temporal-quantity  :quant (explicitanon1 / --LEX--)  :unit (h / hour))--TYPE--()
(a3<root> / --LEX--  :op1 (g<op1>  :op2-of a3))--TYPE--(op1(s_UNIFY_s()))
(d<root> / --LEX--  :ARG2 (s2<s>)  :ARG1 (s<mod>  :condition d))--TYPE--(mod(), s(s_UNIFY_mod()))
(c<root> / --LEX--  :ARG0 (y2 / you)  :ARG2 (b<o2>)  :ARG1 (i<s>)  :condition-of (l<mod>))--TYPE--(mod(), o2(), s())
(g<root> / game  :name (n / --LEX--)  :compared-to-of (a<mod>))--TYPE--(mod())
(b<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG0 (y / you)  :ARG1 (p<s>)  :prep-on-behalf-of (p2<mod>))--TYPE--(mod(), s())
(r2<root> / --LEX--  :ARG1 (r<s>)  :ARG4 (c<o>))--TYPE--(o(mod_UNIFY_s()), s())
(d<root> / --LEX--  :ARG1 (p<o>)  :ARG0 (c<s>)  :ARG4 (r<o2>))--TYPE--(o(s_UNIFY_s()), o2(s_UNIFY_s()), s())
(r2<root> / railway-line  :name (n / --LEX--)  :purpose-of (s<mod>))--TYPE--(mod())
(c2<root> / car-make  :quant (explicitanon2 / --LEX--))--TYPE--()
(explicitanon0<root> / -  :polarity-of (i / --LEX--  :time-of (a<mod>)))--TYPE--(mod())
(explicitanon2<root> / -  :polarity-of (d / --LEX--  :ARG1 (p2<s>)  :concession-of (p<mod>)))--TYPE--(mod(), s())
(w<root> / world-region  :name (n6 / --LEX--)  :prep-without-of (c<mod>))--TYPE--(mod())
(f2<root> / festival  :name (n3 / --LEX--)  :poss (p2<poss>))--TYPE--(poss())
(c<root> / --LEX--  :ARG0 (g<o2>)  :ARG2 (p<s>)  :ARG1 (b<o>))--TYPE--(o(o_UNIFY_o2(), s_UNIFY_s()), o2(), s())
(o<root> / --LEX--  :ARG1 (e2 / ethnic-group  :name (n2 / name  :op1 (explicitanon2 / Jew)))  :ARG0 (p<s>))--TYPE--(s())
(c<root> / --LEX--  :ARG2 (u<o>)  :domain (t2<dom>)  :ARG1 (n<s>)  :time-of (s<mod>))--TYPE--(dom(), mod(), o(), s())
(c<root> / --LEX--  :ARG2 (y<o>  :ARG0-of c)  :ARG1 (f<s>))--TYPE--(o(), s(s_UNIFY_o()))
(p<root> / --LEX--  :ARG0 (i<s>)  :ARG2 (l<o2>)  :ARG1 (d<o>)  :topic-of (c<mod>))--TYPE--(mod(), o(s_UNIFY_s()), o2(s_UNIFY_s()), s())
(s<root> / state  :poss (w<poss>)  :name (n / --LEX--)  :location-of (l<mod>))--TYPE--(mod(), poss())
(m<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (s2<o>)  :concession-of (a<mod>))--TYPE--(mod(o_UNIFY_s(), s_UNIFY_o()), o(), s())
(m<root> / --LEX--  :ARG0 (i2<o2>)  :ARG3 (i<s>)  :ARG1 (f<o>)  :concession-of (c<mod>))--TYPE--(mod(), o(s_UNIFY_s()), o2(), s())
(t<root> / team  :name (n / --LEX--)  :topic-of (f<mod>))--TYPE--(mod())
(r<root> / --LEX--  :ARG1 (o<o>  :concession r)  :ARG2 (s<s>))--TYPE--(o(), s())
(v2<root> / volume-quantity  :quant (explicitanon2 / --LEX--))--TYPE--()
(s<root> / sports-facility  :name (n / --LEX--)  :source-of (b<mod>))--TYPE--(mod())
(explicitanon1<root> / imperative  :mode-of (h / --LEX--  :ARG1 (s<s>)  :ARG0 (y / you)  :concession-of (k<mod>)))--TYPE--(mod(), s())
(t2<root> / --LEX--  :ARG1-of (w3 / work-12))--TYPE--()
(o<root> / --LEX--  :op1 (r<op1>)  :op2 (g<op2>)  :prep-as-of (c<mod>))--TYPE--(mod(), op1(s_UNIFY_s()), op2(s_UNIFY_s()))
(a<root> / --LEX--  :domain (p<dom>)  :poss (c<poss>))--TYPE--(dom(), poss(poss_UNIFY_dom()))
(s<root> / --LEX--  :op1 (p<op1>)  :op2 (p2 / person  :name (n3 / name  :op1 (explicitanon3 / Palin))))--TYPE--(op1())
(n<root> / --LEX--  :name-of (o / organization  :example-of (g<mod>)))--TYPE--(mod())
(s3<root> / --LEX--  :ARG0 (w2<s>  :ARG1-of s3)  :ARG2 (r<o2>))--TYPE--(o2(poss_UNIFY_s()), s())
(a2<root> / --LEX--  :ARG2 (p / person))--TYPE--()
(p<root> / protein  :name (n2 / --LEX--))--TYPE--()
(k<root> / --LEX--  :ARG1 (a<o>)  :ARG0 (i<s>)  :concession-of (s<mod>))--TYPE--(mod(o2_UNIFY_s()), o(s_UNIFY_s()), s())
(c<root> / company  :quant (l / --LEX--)  :source-of (s<mod>))--TYPE--(mod())
(t<root> / thing  :ARG1-of (k / --LEX--  :ARG0 (y<s>)  :mod-of (w2<mod>)))--TYPE--(mod(), s())
(b2<root> / book  :poss (p3<poss>)  :name (n / --LEX--))--TYPE--(poss())
(a2<root> / --LEX--  :poss (h<poss>)  :op2 (c<op2>)  :op1 (g<op1>)  :compared-to-of (m<mod>))--TYPE--(mod(), op1(), op2(), poss())
(n<root> / --LEX--  :name-of (c2 / city  :part-of (r<poss>)))--TYPE--(poss())
(r<root> / river  :name (n2 / --LEX--)  :location-of (p<mod>))--TYPE--(mod())
(a2<root> / --LEX--  :ARG1 (c<s>)  :ARG2 (h2<o>)  :instrument-of (a<mod>))--TYPE--(mod(), o(o_UNIFY_s()), s())
(s<root> / --LEX--  :ARG0 (p<o>)  :ARG3 (y<s>))--TYPE--(o(), s())
(p2<root> / person  :name (n2 / --LEX--)  :prep-on-of (a<mod>))--TYPE--(mod())
(r<root> / --LEX--  :ARG3 (p<s>)  :concession-of (l<mod>))--TYPE--(mod(), s())
(n2<root> / --LEX--  :name-of (n / natural-disaster  :compared-to-of (b2<mod>)))--TYPE--(mod())
(n2<root> / natural-disaster  :name (n3 / --LEX--)  :example-of (h2<mod>))--TYPE--(mod())
(b<root> / --LEX--  :ARG2 (d<o>)  :ARG1 (i<s>  :concession b))--TYPE--(o(), s())
(p<root> / --LEX--  :ARG3 (i<o>)  :ARG0 (t2<s>)  :condition-of (c2<mod>))--TYPE--(mod(), o(), s())
(n3<root> / --LEX--  :name-of (o / organization  :medium-of (s<mod>)))--TYPE--(mod())
(p<root> / --LEX--  :ARG3 (a2<o2>)  :ARG0 (y<s>)  :ARG1 (p2<o>)  :manner-of (w<mod>))--TYPE--(mod(), o(), o2(s_UNIFY_s()), s())
(d<root> / --LEX--  :ARG1 (t / thing)  :ARG2 (p2<o2>)  :ARG0 (w<s>))--TYPE--(o2(poss_UNIFY_s()), s())
(s2<root> / --LEX--  :ARG0 (a2<s>)  :ARG1 (t<o>)  :condition-of (s<mod>))--TYPE--(mod(o2_UNIFY_o()), o(), s())
(j2<root> / --LEX--  :ARG2-of (r / rate-entity-91  :ARG1 (j<s>)))--TYPE--(s())
(c<root> / --LEX--  :mode (explicitanon1 / imperative)  :ARG2 (t<o>)  :ARG0 (y / you)  :ARG3 (f<s>))--TYPE--(o(), s())
(f<root> / --LEX--  :part-of (p2<poss>)  :destination-of (j<mod>))--TYPE--(mod(), poss())
(t2<root> / --LEX--  :ARG0 (h<s>)  :domain (h2<dom>))--TYPE--(dom(s_UNIFY_s()), s())
(t2<root> / thing  :ARG2-of (i2 / --LEX--  :ARG3 (t3 / thing  :manner-of (c<mod>))))--TYPE--(mod())
(h<root> / --LEX--  :ARG1 (h2<s>)  :ARG0 (p2<o>)  :prep-as-of (d<mod>))--TYPE--(mod(), o(), s(poss_UNIFY_o()))
(s<root> / school  :name (n / --LEX--)  :topic-of (p<mod>))--TYPE--(mod())
(m2<root> / monetary-quantity  :quant (explicitanon1 / --LEX--)  :unit (d / dollar))--TYPE--()
(u<root> / ultra  :degree-of (w / --LEX--  :mod-of (p<mod>)))--TYPE--(mod())
(r<root> / --LEX--  :ARG2 (t / temporal-quantity  :quant (explicitanon1 / 1)  :unit (y / year))  :ARG1 (a<s>))--TYPE--(s())
(a<root> / --LEX--  :ARG0 (t2 / thing  :degree-of (e<mod>)))--TYPE--(mod())
(m2<root> / --LEX--  :ARG1 (t / thing  :frequency-of (s<mod>)))--TYPE--(mod())
(p3<root> / person  :purpose-of (v<mod>)  :ARG0-of (h / have-org-role-91  :ARG2 (p4 / --LEX--)))--TYPE--(mod())
(t<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG0 (y / you)  :ARG1 (t2 / thing  :manner-of (q<mod>)))--TYPE--(mod())
(s<root> / --LEX--  :op1 (p / person  :name (n / name  :op1 (explicitanon2 / Bush)))  :op2 (p2<op2>))--TYPE--(op2())
(p4<root> / political-movement  :name (n / --LEX--)  :location-of (p3<mod>))--TYPE--(mod())
(s<root> / --LEX--  :ARG1 (y<s>  :ARG0-of s)  :mod (f / fuck))--TYPE--(s())
(explicitanon1<root> / --LEX--  :quant-of (t / track  :mod-of (a<mod>)))--TYPE--(mod())
(n<root> / neoconservative  :op1-of (s2 / --LEX--  :op2 (t<op2>)  :mod-of (p<mod>)))--TYPE--(mod(), op2())
(t<root> / --LEX--  :ARG1 (c<o>)  :ARG0 (t3<s>)  :ARG3 (s<o2>))--TYPE--(o(mod_UNIFY_s()), o2(), s())
(f<root> / --LEX--  :poss (y<poss>)  :domain (f2<dom>))--TYPE--(dom(poss_UNIFY_poss()), poss())
(g3<root> / government-organization  :time-of (w<mod>)  :ARG0-of (g5 / --LEX--))--TYPE--(mod())
(p<root> / person  :accompanier-of (t<mod>)  :ARG1-of (d / --LEX--))--TYPE--(mod())
(i2<root> / incident  :name (n / --LEX--)  :time-of (h<mod>))--TYPE--(mod())
(l<root> / law  :poss (w<poss>)  :name (n / --LEX--)  :prep-under-of (r<mod>))--TYPE--(mod(), poss())
(g<root> / --LEX--  :ARG1 (h<s>)  :ARG0 (m2<o>)  :topic-of (p<mod>))--TYPE--(mod(), o(), s(s_UNIFY_o()))
(p2<root> / --LEX--  :ARG1 (k<o>)  :ARG2 (w<s>)  :ARG0 (e<o2>)  :time-of (r<mod>))--TYPE--(mod(), o(o_UNIFY_s(), s_UNIFY_o2()), o2(), s())
(t<root> / temporal-quantity  :quant (explicitanon0 / --LEX--)  :ARG2-of (r2 / rate-entity-91  :frequency-of (a<mod>)))--TYPE--(mod())
(g<root> / --LEX--  :ARG1 (e3<s>)  :part-of (l<poss>))--TYPE--(poss(poss_UNIFY_s()), s())
(t<root> / --LEX--  :ARG1 (v<s>)  :ARG2 (o<o>)  :prep-under-of (b2<mod>))--TYPE--(mod(), o(), s())
(n3<root> / --LEX--  :name-of (f / force  :consist (c2<mod>)))--TYPE--(mod())
(l<root> / local-region  :name (n / --LEX--)  :source-of (g<mod>))--TYPE--(mod())
(l<root> / lake  :domain (l2<dom>)  :name (n / --LEX--))--TYPE--(dom())
(d2<root> / date-entity  :year (explicitanon0 / --LEX--)  :domain (t<dom>))--TYPE--(dom())
(t2<root> / --LEX--  :quant (explicitanon1 / 5)  :unit (y2 / year))--TYPE--()
(s2<root> / --LEX--  :ARG3 (r<s>)  :medium-of (t<mod>))--TYPE--(mod(), s())
(p2<root> / --LEX--  :ARG0-of (h2 / have-rel-role-91  :ARG2 (m / mother)))--TYPE--()
(r3<root> / --LEX--  :ARG1 (h<s>)  :ARG2 (s<o>)  :compared-to-of (g<mod>))--TYPE--(mod(), o(dom_UNIFY_s()), s())
(b2<root> / book  :name (n / --LEX--)  :compared-to-of (l<mod>))--TYPE--(mod())
(explicitanon1<root> / Angels  :op1-of (n / --LEX--  :op3 (explicitanon3<op3>)  :op2 (explicitanon2 / and)  :name-of (b2<mod>)))--TYPE--(mod(), op3())
(a<root> / --LEX--  :op1 (m<op1>)  :op2 (c2<op2>)  :op3 (c3<op3>)  :op4 (c4<op4>)  :medium-of (h<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4())
(l<root> / --LEX--  :mod (n / nation)  :mod-of (i<mod>))--TYPE--(mod())
(d<root> / date-entity  :era (explicitanon2 / --LEX--))--TYPE--()
(d4<root> / --LEX--  :year (explicitanon4 / 1996))--TYPE--()
(n<root> / --LEX--  :name-of (t2 / treaty  :mod-of (c<mod>)))--TYPE--(mod())
(r<root> / railway-line  :name (n / --LEX--))--TYPE--()
(p4<root> / --LEX--  :ARG0 (p<o>)  :ARG1 (a<s>)  :prep-under-of (l<mod>))--TYPE--(mod(), o(), s())
(d<root> / distribute-01  :ARG1 (d2 / --LEX--  :ARG1 (s2<s>)  :manner-of (a<mod>)))--TYPE--(mod(), s())
(s<root> / --LEX--  :ARG0 (t3 / thing  :mod-of (f<mod>)))--TYPE--(mod())
(e2<root> / era  :name (n / --LEX--)  :time-of (e<mod>))--TYPE--(mod())
(p3<root> / --LEX--  :ARG2 (c3<o>)  :ARG1 (p2<s>)  :ARG3 (g2<o2>))--TYPE--(o(), o2(o_UNIFY_s()), s())
(c3<root> / car  :name (n2 / --LEX--))--TYPE--()
(w2<root> / work-of-art  :name (n3 / --LEX--)  :destination-of (c3<mod>))--TYPE--(mod())
(p<root> / person  :source-of (a<mod>)  :ARG1-of (e / --LEX--))--TYPE--(mod())
(c<root> / --LEX--  :name (n / name  :op1 (explicitanon3 / Australia))  :mod-of (p2<mod>))--TYPE--(mod())
(t<root> / temporal-quantity  :quant (explicitanon1 / --LEX--)  :ARG2-of (r / rate-entity-91  :ARG1 (w<s>)  :prep-without-of (i<mod>)))--TYPE--(mod(), s())
(j<root> / --LEX--  :ARG3 (p2<o2>)  :ARG1 (h2<s>)  :ARG0 (y<o>))--TYPE--(o(), o2(poss_UNIFY_s()), s())
(c<root> / --LEX--  :name (n / name  :op1 (explicitanon4 / Britain))  :mod-of (p<mod>))--TYPE--(mod())
(a<root> / --LEX--  :op2 (c<op2>)  :op4 (l2<op4>)  :op1 (h2<op1>)  :op3 (g<op3>)  :op5 (e<op5>)  :poss (p<poss>))--TYPE--(op1(), op2(), op3(), op4(), op5(), poss())
(p<root> / person  :ARG2-of (h / have-org-role-91  :ARG1 (o<s>))  :ARG0-of (i2 / --LEX--))--TYPE--(s())
(t4<root> / thing  :compared-to-of (t2<mod>)  :ARG2-of (w / --LEX--))--TYPE--(mod())
(w<root> / --LEX--  :ARG2 (b<o>)  :ARG1 (c<s>)  :degree (m / more))--TYPE--(o(s_UNIFY_s()), s())
(c<root> / --LEX--  :ARG0 (t2 / thing  :topic-of (r<mod>)))--TYPE--(mod())
(s<root> / --LEX--  :op3 (b / beef)  :op1 (c / chicken)  :op2 (p<op2>))--TYPE--(op2())
(u<root> / --LEX--  :ARG1 (t<o>)  :ARG2 (b<o2>)  :ARG0 (p<s>)  :condition-of (n<mod>))--TYPE--(mod(), o(), o2(o_UNIFY_o()), s())
(e<root> / estate  :name (n2 / --LEX--)  :poss (p<poss>))--TYPE--(poss())
(f<root> / fuel-consumption-quantity  :quant (explicitanon0 / --LEX--))--TYPE--()
(s<root> / speed-quantity  :quant (explicitanon1 / --LEX--))--TYPE--()
(s<root> / --LEX--  :ARG3 (c2<o3>)  :ARG1 (p2<o>)  :ARG2 (d<o2>)  :ARG0 (i<s>))--TYPE--(o(), o2(s_UNIFY_o()), o3(s_UNIFY_o()), s())
(explicitanon1<root> / McDonnaldAsinglequoteAs  :op1-of (n / --LEX--  :name-of (c<mod>)))--TYPE--(mod())
(s<root> / --LEX--  :ARG0 (c<s>)  :ARG1 (r<o>)  :ARG3 (a<o2>))--TYPE--(o(s_UNIFY_s()), o2(poss_UNIFY_s()), s())
(explicitanon1<root> / Democratic  :op1-of (n / --LEX--  :op2 (explicitanon2 / Party)  :name-of (p3<mod>)))--TYPE--(mod())
(g<root> / --LEX--  :ARG4 (t2<s>)  :ARG1 (t / thing)  :mod-of (p<mod>))--TYPE--(mod(), s())
(g2<root> / --LEX--  :ARG1 (t3 / thing)  :ARG4 (c<s>))--TYPE--(s())
(s<root> / survey  :name (n / --LEX--))--TYPE--()
(n3<root> / --LEX--  :name-of (w / worship-place  :location-of (i<mod>)))--TYPE--(mod())
(s<root> / --LEX--  :ARG3 (m<s>)  :ARG4 (e2<o>)  :purpose-of (b<mod>))--TYPE--(mod(), o(), s())
(h<root> / --LEX--  :ARG1 (p2<o>)  :ARG2 (s / significant-other)  :ARG0 (p<s>))--TYPE--(o(), s())
(n3<root> / --LEX--  :name-of (t2 / thing  :topic-of (t<mod>)))--TYPE--(mod())
(l<root> / --LEX--  :ARG2 (g<s>)  :example-of (t2<mod>))--TYPE--(mod(), s())
(t<root> / --LEX--  :ARG1-of (r / request-confirmation-91))--TYPE--()
(l<root> / language  :name (n / --LEX--)  :mod-of (p3<mod>))--TYPE--(mod())
(d<root> / --LEX--  :ARG2 (p<s>)  :time-of (h<mod>))--TYPE--(mod(s_UNIFY_s()), s())
(g<root> / government-organization  :name (n / --LEX--)  :path-of (g2<mod>))--TYPE--(mod())
(g<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG1 (m2<s>)  :ARG2 (t / they)  :ARG0 (w / we))--TYPE--(s())
(p<root> / --LEX--  :ARG2 (i<o>)  :ARG1 (b<s>)  :condition-of (i2<mod>))--TYPE--(mod(s_UNIFY_o()), o(), s(poss_UNIFY_o()))
(p<root> / political-party  :name (n2 / --LEX--)  :part-of (g<poss>))--TYPE--(poss())
(b3<root> / --LEX--  :ARG2-of (h / have-rel-role-91  :ARG0 (y<o2>)  :ARG1 (i<o>)))--TYPE--(o(), o2())
(e<root> / --LEX--  :mode (explicitanon1 / imperative)  :ARG0 (y<o2>  :ARG1-of e)  :ARG2 (p<s>))--TYPE--(o2(), s())
(d<root> / distance-quantity  :unit (m / --LEX--)  :location-of (s<mod>))--TYPE--(mod())
(s<root> / small-molecule  :name (n2 / --LEX--)  :compared-to-of (i<mod>))--TYPE--(mod())
(m<root> / --LEX--  :ARG1 (h<o>)  :ARG2 (t2<s>)  :ARG0 (t3 / thing))--TYPE--(o(), s(s_UNIFY_o()))
(c<root> / company  :name (n / --LEX--)  :part-of (n4<poss>)  :location-of (b<mod>))--TYPE--(mod(), poss())
(p2<root> / person  :name (n2 / --LEX--)  :direction-of (t<mod>))--TYPE--(mod())
(c<root> / --LEX--  :name (n / name  :op1 (explicitanon2 / Europe))  :location-of (w<mod>))--TYPE--(mod())
(r<root> / rate-entity-91  :ARG1 (explicitanon2 / --LEX--)  :ARG4 (b<s>))--TYPE--(s())
(p2<root> / percentage-entity  :value (v / variable  :name (n / --LEX--)))--TYPE--()
(f<root> / --LEX--  :ARG0 (p<s>)  :ARG1 (r<o>)  :domain (p3<dom>))--TYPE--(dom(), o(s_UNIFY_s()), s(mod_UNIFY_dom()))
(m<root> / military  :name (n / --LEX--)  :destination-of (p2<mod>))--TYPE--(mod())
(c<root> / --LEX--  :ARG2 (p<o>)  :ARG1-of (r2 / request-confirmation-91))--TYPE--(o(s_UNIFY_s()))
(d<root> / --LEX--  :ARG1 (t2<o>)  :location-of (p2<mod>))--TYPE--(mod(), o())
(c<root> / --LEX--  :ARG2 (r<s>  :condition c))--TYPE--(s())
(a2<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (p<o>)  :ARG2 (l<o2>))--TYPE--(o(s_UNIFY_o2()), o2(), s(mod_UNIFY_o()))
(m<root> / magazine  :name (n / --LEX--)  :mod-of (a<mod>))--TYPE--(mod())
(p<root> / --LEX--  :mod (c2 / country  :name (n / name  :op1 (explicitanon2 / Scotland))))--TYPE--()
(f2<root> / format  :name (n3 / --LEX--))--TYPE--()
(u<root> / university  :name (n / --LEX--)  :source-of (d<mod>))--TYPE--(mod())
(c<root> / --LEX--  :name (n / name  :op1 (explicitanon1 / Israel)))--TYPE--()
(a<root> / --LEX--  :ARG0 (c<s>)  :instrument-of (o2<mod>))--TYPE--(mod(s_UNIFY_s()), s())
(r<root> / --LEX--  :ARG2 (i<o2>)  :ARG1 (s<o>)  :ARG0 (t<s>))--TYPE--(o(), o2(mod_UNIFY_o()), s())
(a<root> / --LEX--  :op1 (b<op1>)  :op2 (w<op2>)  :domain (t<dom>)  :condition-of (r<mod>))--TYPE--(dom(), mod(), op1(), op2())
(h<root> / --LEX--  :manner-of (w<mod>  :part h))--TYPE--(mod())
(t2<root> / temporal-quantity  :quant (explicitanon3 / --LEX--)  :op1-of (m4 / multiple  :time-of (p<mod>)))--TYPE--(mod())
(c<root> / --LEX--  :ARG0 (p / person  :prep-as-of (h<mod>)))--TYPE--(mod())
(m<root> / --LEX--  :quant (explicitanon0 / 100000))--TYPE--()
(b<root> / --LEX--  :op1 (m<op1>)  :op2 (m2 / monetary-quantity  :quant (explicitanon1 / 999999)))--TYPE--(op1())
(g<root> / --LEX--  :ARG0 (w<s>)  :ARG4 (s<o>)  :condition-of (p<mod>))--TYPE--(mod(), o(), s())
(c3<root> / city  :location-of (n<mod>)  :ARG0-of (h / have-org-role-91  :ARG2 (c / --LEX--)))--TYPE--(mod())
(c<root> / city-district  :name (n / --LEX--)  :part-of (c2<poss>)  :mod-of (p3<mod>))--TYPE--(mod(), poss())
(d<root> / date-entity  :season (s / --LEX--)  :domain (s2<dom>))--TYPE--(dom())
(r<root> / --LEX--  :poss (c<poss>)  :direction-of (t<mod>))--TYPE--(mod(), poss())
(f<root> / facility  :name (n3 / --LEX--)  :source-of (l<mod>))--TYPE--(mod())
(p4<root> / president  :ARG2-of (h2 / --LEX--  :ARG0 (p2<s>)))--TYPE--(s())
(c2<root> / company  :name (n2 / --LEX--)  :accompanier-of (v<mod>))--TYPE--(mod())
(h2<root> / --LEX--  :ARG1 (m2<o>)  :ARG0 (c2<s>  :concession h2))--TYPE--(o(), s())
(a<root> / amusement-park  :poss (w<poss>)  :name (n / --LEX--))--TYPE--(poss())
(f<root> / --LEX--  :degree (m / most)  :extent-of (a<mod>))--TYPE--(mod())
(b<root> / book  :poss (p2<poss>)  :name (n2 / --LEX--)  :source-of (d<mod>))--TYPE--(mod(), poss())
(r<root> / --LEX--  :ARG2 (b<s>)  :ARG5 (p2<o>))--TYPE--(o(), s())
(t<root> / --LEX--  :ARG1 (t2<s>)  :ARG2 (a<o>)  :concession-of (c2<mod>))--TYPE--(mod(s_UNIFY_o()), o(), s())
(explicitanon0<root> / imperative  :mode-of (w3 / --LEX--  :ARG1 (y / you)  :ARG2 (w<s>)))--TYPE--(s())
(t<root> / --LEX--  :ARG3 (l<o>)  :ARG0 (a2<s>)  :purpose-of (n<mod>))--TYPE--(mod(s_UNIFY_s()), o(), s())
(c<root> / country  :quant (a / --LEX--  :op1 (s<op1>)))--TYPE--(op1())
(d<root> / --LEX--  :ARG1 (o2<o>)  :ARG0 (t<o2>)  :ARG2 (y<s>))--TYPE--(o(poss_UNIFY_s()), o2(), s())
(explicitanon2<root> / -  :polarity-of (e / ethnic-group  :name (n / --LEX--)  :mod-of (m<mod>)))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (e2 / event  :prep-under-of (g<mod>)))--TYPE--(mod())
(p<root> / political-party  :name (n / --LEX--)  :prep-under-of (s2<mod>))--TYPE--(mod())
(c5<root> / --LEX--  :ARG1 (c2<o>)  :condition-of (c3<mod>))--TYPE--(mod(), o(o_UNIFY_mod(), s_UNIFY_s()))
(m<root> / --LEX--  :snt2 (s<snt2>)  :domain (m3<dom>)  :snt1 (p<snt1>))--TYPE--(dom(), snt1(), snt2())
(explicitanon3<root> / TheStudentRoom  :op1-of (n2 / --LEX--  :name-of (w<mod>)))--TYPE--(mod())
(u<root> / --LEX--  :ARG1 (p2<o>)  :ARG2 (p3<o2>)  :ARG0 (p<s>))--TYPE--(o(), o2(op2_UNIFY_o()), s())
(p<root> / product  :name (n / --LEX--)  :prep-with-of (a2<mod>))--TYPE--(mod())
(a<root> / --LEX--  :op4 (t<op4>)  :op2 (r<op2>)  :op1 (l<op1>)  :op3 (c<op3>))--TYPE--(op1(o_UNIFY_o(), s_UNIFY_s()), op2(o_UNIFY_o(), s_UNIFY_s()), op3(o_UNIFY_o(), s_UNIFY_s()), op4(o_UNIFY_o(), s_UNIFY_s()))
(r<root> / rate-entity-91  :ARG2 (t<o>)  :ARG1 (m<s>)  :quant (m5 / --LEX--))--TYPE--(o(), s())
(r<root> / --LEX--  :ARG4 (a<s>)  :ARG3 (t<o>)  :frequency-of (c<mod>))--TYPE--(mod(), o(), s())
(t<root> / temporal-quantity  :quant (explicitanon0 / --LEX--)  :unit (d3 / day))--TYPE--()
(s<root> / --LEX--  :ARG1 (m3<o>)  :ARG0 (b<s>)  :topic-of (a<mod>))--TYPE--(mod(), o(mod_UNIFY_s()), s())
(b<root> / --LEX--  :ARG4 (s2<o2>)  :ARG1 (s<o>)  :ARG0 (o2<s>))--TYPE--(o(), o2(), s(s_UNIFY_o()))
(f<root> / facility  :domain (m2<dom>)  :name (n / --LEX--))--TYPE--(dom())
(p5<root> / poet  :name (n2 / --LEX--))--TYPE--()
(p2<root> / planet  :ARG0-of (h / have-rel-role-91  :ARG1 (p<s>)  :ARG2 (s / --LEX--)))--TYPE--(s())
(n<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (a<o>)  :condition-of (k<mod>))--TYPE--(mod(o_UNIFY_s()), o(), s())
(h2<root> / hotel  :name (n / --LEX--)  :location-of (h<mod>))--TYPE--(mod())
(m2<root> / --LEX--  :ARG3 (s<s>  :ARG0-of m2)  :ARG1 (t<o>)  :ARG2 (t2<o2>))--TYPE--(o(), o2(), s())
(r<root> / religious-group  :name (n / --LEX--)  :concession-of (g<mod>))--TYPE--(mod())
(b<root> / --LEX--  :ARG0 (y<s>)  :ARG2 (p2<o2>)  :ARG1 (p<o>)  :condition-of (e<mod>))--TYPE--(mod(), o(), o2(s_UNIFY_o()), s())
(g<root> / --LEX--  :ARG1 (j<o>)  :ARG0 (y<s>)  :condition-of (k<mod>))--TYPE--(mod(o_UNIFY_o()), o(), s())
(i<root> / --LEX--  :ARG1 (p<s>)  :ARG4 (c<o>)  :time (n / now))--TYPE--(o(s_UNIFY_s()), s())
(p2<root> / --LEX--  :ARG1 (t / thing)  :ARG2 (h<o>))--TYPE--(o())
(b<root> / --LEX--  :ARG1 (s2<s>)  :ARG2 (a2<o>)  :time-of (s<mod>))--TYPE--(mod(), o(o_UNIFY_s()), s())
(g2<root> / government-organization  :name (n3 / --LEX--)  :prep-under-of (s<mod>))--TYPE--(mod())
(m2<root> / multiple  :op1 (explicitanon1 / --LEX--)  :condition-of (g2<mod>))--TYPE--(mod())
(r<root> / religious-group  :name (n / --LEX--)  :condition-of (a<mod>))--TYPE--(mod())
(t<root> / thing  :ARG1-of (q / --LEX--  :ARG3 (w<o2>)  :ARG2 (h<s>)))--TYPE--(o2(s_UNIFY_s()), s())
(t<root> / thing  :ARG5-of (r / --LEX--  :ARG3 (p2<o>)  :ARG4 (p<s>)))--TYPE--(o(), s())
(p<root> / --LEX--  :value (explicitanon1 / 20))--TYPE--()
(g<root> / government-organization  :location-of (c<mod>)  :ARG0-of (g2 / --LEX--))--TYPE--(mod())
(p3<root> / person  :ARG1-of (h / --LEX--  :ARG0 (p<s>)  :topic-of (m2<mod>)))--TYPE--(mod(), s())
(m<root> / monetary-quantity  :unit (d3 / --LEX--)  :value-of (d2<mod>))--TYPE--(mod())
(p2<root> / person  :poss (h2<poss>)  :ARG1-of (e / --LEX--))--TYPE--(poss())
(t2<root> / --LEX--  :ARG3-of (r / rate-entity-91  :ARG4 (m2<s>)  :ARG1 (m<o>)))--TYPE--(o(), s())
(t<root> / thing  :ARG0-of (d / --LEX--  :ARG1-of (p3 / possible-01)))--TYPE--()
(e<root> / --LEX--  :ARG1 (r<o>)  :ARG0 (p<s>)  :purpose-of (s<mod>))--TYPE--(mod(mod_UNIFY_s()), o(), s())
(c<root> / --LEX--  :ARG0 (o<mod>  :purpose c))--TYPE--(mod())
(v<root> / --LEX--  :ARG1-of (m / murder-01))--TYPE--()
(e<root> / --LEX--  :ARG3 (r2<s>)  :prep-for-of (p2<mod>))--TYPE--(mod(), s())
(w<root> / war-01  :quant (explicitanon2 / --LEX--)  :time-of (d<mod>))--TYPE--(mod())
(s3<root> / show  :name (n2 / --LEX--)  :medium-of (c<mod>))--TYPE--(mod())
(p3<root> / person  :concession-of (s<mod>)  :ARG0-of (l2 / --LEX--))--TYPE--(mod())
(g<root> / --LEX--  :ARG2 (c<o>)  :compared-to-of (d2<mod>))--TYPE--(mod(), o())
(l2<root> / --LEX--  :degree (m / more)  :concession-of (a<mod>))--TYPE--(mod())
(a<root> / aircraft  :domain (h2<dom>)  :name (n3 / --LEX--))--TYPE--(dom())
(m2<root> / more  :degree-of (f / --LEX--  :extent-of (d<mod>)))--TYPE--(mod())
(c<root> / --LEX--  :ARG1 (p2<mod>  :condition c)  :ARG2 (t2<s>))--TYPE--(mod(), s())
(a2<root> / --LEX--  :ARG4 (c3<s>)  :purpose-of (c<mod>))--TYPE--(mod(), s())
(c3<root> / child  :quant (explicitanon0 / --LEX--))--TYPE--()
(n2<root> / --LEX--  :name-of (c2 / company  :medium-of (t<mod>)))--TYPE--(mod())
(g<root> / government-organization  :prep-against-of (c<mod>)  :ARG0-of (g2 / --LEX--))--TYPE--(mod())
(p<root> / person  :ARG0-of (h2 / have-org-role-91  :ARG2 (c / company  :name (n / --LEX--))  :ARG1 (p2<s>)))--TYPE--(s())
(g2<root> / --LEX--  :ARG4 (o<o>)  :ARG0 (h<s>)  :time-of (e<mod>))--TYPE--(mod(s_UNIFY_s()), o(), s())
(n<root> / --LEX--  :name-of (u3 / university  :mod-of (f<mod>)))--TYPE--(mod())
(a<root> / animal  :quant (explicitanon0 / --LEX--))--TYPE--()
(n2<root> / now  :time-of (o / --LEX--  :ARG1 (m<s>)))--TYPE--(s())
(h<root> / have-rel-role-91  :ARG2 (f / --LEX--)  :ARG0 (c<s>)  :concession-of (r<mod>))--TYPE--(mod(), s())
(d<root> / date-entity  :day (explicitanon3 / 25)  :month (explicitanon4 / --LEX--))--TYPE--()
(explicitanon5<root> / --LEX--  :year-of (d2 / date-entity  :day (explicitanon7 / 26)  :month (explicitanon6 / 12)  :time-of (s<mod>)))--TYPE--(mod())
(c<root> / --LEX--  :ARG0 (a<s>  :purpose c)  :ARG1 (s<o>)  :ARG2 (w<o2>))--TYPE--(o(), o2(), s())
(t<root> / thing  :ARG2-of (o / --LEX--  :subevent-of (a<mod>)))--TYPE--(mod())
(d<root> / date-entity  :month (explicitanon7 / 12)  :year (explicitanon6 / --LEX--)  :day (explicitanon8 / 27)  :time-of (s<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (w / world-region  :poss (c<poss>)))--TYPE--(poss())
(p3<root> / --LEX--  :ARG1 (p<s>)  :ARG3 (d<o>))--TYPE--(o(), s(op2_UNIFY_o()))
(b<root> / --LEX--  :ARG2 (c<s>)  :degree (m / most)  :manner-of (a2<mod>))--TYPE--(mod(), s())
(n2<root> / --LEX--  :name-of (v / valley  :location-of (s<mod>)))--TYPE--(mod())
(p<root> / --LEX--  :poss (c2<poss>)  :condition-of (b2<mod>))--TYPE--(mod(s_UNIFY_poss()), poss())
(s3<root> / state  :ARG0-of (h / have-org-role-91  :ARG2 (m / --LEX--)  :ARG1 (o<s>)))--TYPE--(s())
(s2<root> / --LEX--  :ARG2 (t / thing  :concession-of (c<mod>)))--TYPE--(mod())
(explicitanon3<root> / 5  :month-of (d / date-entity  :year (explicitanon4 / --LEX--)  :time-of (a<mod>)))--TYPE--(mod())
(v2<root> / virus  :ARG1-of (c2 / --LEX--  :ARG0 (s2<s>)))--TYPE--(s())
(t<root> / temperature-quantity  :quant (explicitanon0 / --LEX--)  :extent-of (w2<mod>))--TYPE--(mod())
(u<root> / --LEX--  :op1 (c2<op1>)  :time-of (i<mod>))--TYPE--(mod(o_UNIFY_op1()), op1())
(a3<root> / --LEX--  :ARG0 (p2<s>)  :prep-on-of (t<mod>))--TYPE--(mod(), s())
(c<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (p<o>  :ARG3-of c))--TYPE--(o(), s())
(a<root> / amr-unintelligible  :value (explicitanon5 / --LEX--)  :mod-of (c<mod>))--TYPE--(mod())
(a<root> / --LEX--  :mode (explicitanon1 / imperative)  :ARG2 (i<s>)  :ARG0 (y<o2>)  :ARG1 (a2<o>))--TYPE--(o(), o2(), s())
(n2<root> / --LEX--  :name-of (m2 / military  :prep-with-of (b<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :ARG2 (l<o2>)  :ARG0 (y<s>)  :ARG1 (e2<o>)  :mode (explicitanon0 / imperative))--TYPE--(o(), o2(poss_UNIFY_s()), s())
(t2<root> / thing  :ARG1-of (p / --LEX--)  :prep-against-of (v<mod>))--TYPE--(mod())
(r2<root> / --LEX--  :ARG5 (m2<s>))--TYPE--(s())
(p2<root> / --LEX--  :ARG1 (t / thing  :source-of (a<mod>)))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (e / event  :beneficiary-of (p<mod>)))--TYPE--(mod())
(explicitanon0<root> / 16  :op1-of (s2 / --LEX--  :op2 (explicitanon1<op2>)  :quant-of (t<mod>)))--TYPE--(mod(), op2())
(c<root> / --LEX--  :mode (explicitanon0 / imperative)  :domain (y<dom>))--TYPE--(dom())
(w<root> / --LEX--  :domain (a2<dom>)  :manner-of (g<mod>))--TYPE--(dom(), mod(s_UNIFY_dom()))
(h2<root> / high  :op2-of (s2 / --LEX--  :op1 (m<op1>)  :mod-of (s<mod>)))--TYPE--(mod(), op1())
(a<root> / --LEX--  :op3 (d<op3>)  :op5 (w<op5>)  :op2 (h<op2>)  :op6 (d2<op6>)  :op4 (f<op4>)  :op7 (l<op7>)  :op1 (c<op1>))--TYPE--(op1(s_UNIFY_s()), op2(s_UNIFY_s()), op3(s_UNIFY_s()), op4(s_UNIFY_s()), op5(s_UNIFY_s()), op6(s_UNIFY_s()), op7(s_UNIFY_s()))
(b<root> / --LEX--  :ARG1 (p2 / person  :consist (c4<mod>)))--TYPE--(mod())
(a3<root> / --LEX--  :op2 (c2<op2>)  :op1 (r / radical)  :mod-of (v<mod>))--TYPE--(mod(), op2())
(h<root> / --LEX--  :quant-of (p / person  :part-of (w<poss>)))--TYPE--(poss())
(p<root> / --LEX--  :mod (c / country  :name (n / name  :op1 (explicitanon2 / America))))--TYPE--()
(c<root> / country  :name (n / --LEX--)  :prep-on-of (r<mod>))--TYPE--(mod())
(s2<root> / --LEX--  :ARG1 (m<o>)  :ARG0 (p2<s>)  :subevent-of (t2<mod>))--TYPE--(mod(), o(), s(mod_UNIFY_mod()))
(s<root> / sentence-01  :quant (explicitanon1 / --LEX--)  :ARG2 (l<s>))--TYPE--(s())
(explicitanon1<root> / Israel  :op1-of (n / --LEX--  :name-of (c<mod>)))--TYPE--(mod())
(t<root> / --LEX--  :ARG1 (p<s>)  :location (d2 / department  :topic (a / and  :op2 (e / emergency)  :op1 (a2 / accident))))--TYPE--(s())
(explicitanon1<root> / Somalia  :op1-of (n / --LEX--  :name-of (c<mod>)))--TYPE--(mod())
(w2<root> / --LEX--  :poss (p<poss>)  :mod-of (t<mod>))--TYPE--(mod(s_UNIFY_poss()), poss())
(n2<root> / --LEX--  :name-of (w / work-of-art  :location-of (d<mod>)))--TYPE--(mod())
(s<root> / --LEX--  :ARG0 (y<s>)  :ARG1 (p2<o>)  :ARG2 (i2<o2>)  :mode (explicitanon5 / imperative)  :example-of (h<mod>))--TYPE--(mod(), o(poss_UNIFY_s()), o2(), s())
(s<root> / --LEX--  :mod (s2 / social))--TYPE--()
(p3<root> / --LEX--  :ARG0 (c<o>)  :ARG1 (s2<s>)  :manner-of (s<mod>))--TYPE--(mod(), o(), s(s_UNIFY_o()))
(explicitanon0<root> / -  :polarity-of (i / --LEX--  :ARG3 (y<o>)  :condition-of (p<mod>)))--TYPE--(mod(), o())
(p<root> / person  :ARG0-of (p2 / --LEX--  :ARG3 (t / tax)))--TYPE--()
(i<root> / --LEX--  :ARG4 (b2<o3>)  :ARG1 (w2<o>)  :ARG0 (s<s>)  :ARG3 (b<o2>))--TYPE--(o(poss_UNIFY_s()), o2(s_UNIFY_s()), o3(), s())
(p<root> / --LEX--  :ARG2-of (h2 / have-org-role-91  :purpose-of (c<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :op3 (q<op3>  :op1-of a)  :op2 (q2<op2>)  :op4 (c<op4>))--TYPE--(op2(), op3(), op4())
(p<root> / person  :compared-to-of (f<mod>)  :ARG0-of (h / have-rel-role-91  :ARG2 (p2 / --LEX--)))--TYPE--(mod())
(a<root> / --LEX--  :op1 (p<op1>)  :op2 (l<op2>)  :direction-of (s<mod>))--TYPE--(mod(), op1(s_UNIFY_s()), op2(s_UNIFY_s()))
(p4<root> / pubication  :name (n3 / --LEX--)  :source-of (p<mod>))--TYPE--(mod())
(s<root> / --LEX--  :ARG1 (s3<o>)  :ARG0 (p<s>)  :ARG2 (h<o2>)  :ARG2-of (l / laugh-01  :mode (explicitanon2 / expressive)  :manner (l2 / loud)  :ARG0 (i / i)))--TYPE--(o(), o2(), s())
(t<root> / thing  :ARG2-of (p2 / --LEX--  :ARG1 (a2<s>)  :subevent-of (d<mod>)))--TYPE--(mod(), s())
(t2<root> / thing  :ARG2-of (n2 / --LEX--)  :manner-of (n<mod>))--TYPE--(mod())
(h2<root> / have-org-role-91  :ARG0 (h / he)  :ARG2 (p / --LEX--))--TYPE--()
(m<root> / monetary-quantity  :unit (d / --LEX--)  :prep-at-of (c<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (c2 / city  :part-of (s<poss>)  :location-of (r<mod>)))--TYPE--(mod(), poss())
(e<root> / --LEX--  :polarity (explicitanon4 / -)  :compared-to-of (l2<mod>))--TYPE--(mod())
(p3<root> / patient  :quant (f / --LEX--))--TYPE--()
(d2<root> / --LEX--  :mod (m / medicine))--TYPE--()
(p<root> / person  :poss (y<poss>)  :compared-to-of (o<mod>)  :ARG1-of (a / --LEX--))--TYPE--(mod(), poss())
(h2<root> / have-rel-role-91  :ARG1 (p<o>)  :ARG2 (f2 / --LEX--)  :ARG0 (p2<s>))--TYPE--(o(), s(mod_UNIFY_o()))
(explicitanon1<root> / -  :polarity-of (c2 / --LEX--  :ARG1 (s<s>)  :ARG1-of (p3 / possible-01)))--TYPE--(s())
(d2<root> / --LEX--  :unit (m / mile))--TYPE--()
(t2<root> / thing  :quant (m / --LEX--)  :domain (t4<dom>)  :part-of (t3<poss>))--TYPE--(dom(), poss())
(n2<root> / nationality  :name (n3 / --LEX--)  :mod-of (r2<mod>))--TYPE--(mod())
(o<root> / --LEX--  :mode (explicitanon0 / expressive)  :poss (i<poss>))--TYPE--(poss())
(b<root> / byline-91  :ARG0 (p2<s>)  :ARG1 (p / person  :name (n2 / --LEX--)))--TYPE--(s())
(r<root> / rate-entity-91  :ARG4 (w<s>)  :ARG3 (o2 / --LEX--)  :frequency-of (t<mod>))--TYPE--(mod(), s())
(c<root> / continent  :domain (p2<dom>)  :name (n / --LEX--))--TYPE--(dom())
(y<root> / you  :ARG0-of (k / --LEX--  :ARG1 (m2<s>)))--TYPE--(s())
(l2<root> / life  :quant (f / --LEX--))--TYPE--()
(s<root> / scale  :name (n2 / --LEX--)  :mod-of (l2<mod>))--TYPE--(mod())
(explicitanon1<root> / Israel  :op1-of (n / name  :name-of (c / country  :ARG1-of (s / support-01  :op1-of (s2 / --LEX--  :op2 (w<op2>)  :mod-of (p<mod>))))))--TYPE--(mod(), op2())
(t2<root> / thing  :ARG1-of (h / --LEX--  :ARG0 (a2<s>)  :time-of (d<mod>)))--TYPE--(mod(), s())
(a2<root> / --LEX--  :op2 (e<op2>  :op1-of a2))--TYPE--(op2())
(s<root> / --LEX--  :ARG1 (t2<o>)  :ARG0 (h<s>)  :domain (t<dom>))--TYPE--(dom(), o(o2_UNIFY_s()), s())
(a2<root> / --LEX--  :op2 (f<op2>)  :op1 (g<op1>)  :conj-as-if-of (a<mod>))--TYPE--(mod(), op1(s_UNIFY_s()), op2(s_UNIFY_s()))
(e2<root> / --LEX--  :domain (s<dom>)  :ARG1 (b<s>)  :conj-as-if-of (a<mod>))--TYPE--(dom(), mod(), s())
(e<root> / --LEX--  :ARG1 (a<o>)  :ARG2 (e2<o2>)  :ARG0 (i<s>))--TYPE--(o(mod_UNIFY_o2()), o2(), s())
(g2<root> / --LEX--  :ARG4 (p3<s>)  :compared-to-of (b<mod>))--TYPE--(mod(), s())
(f<root> / festival  :poss (i<poss>)  :name (n / --LEX--)  :time-of (w<mod>))--TYPE--(mod(s_UNIFY_poss()), poss())
(d4<root> / --LEX--  :poss (h<poss>)  :mod (o4 / only))--TYPE--(poss())
(p<root> / person  :ARG0-of (h / have-rel-role-91  :ARG1 (p2 / person)  :ARG2 (f / --LEX--)))--TYPE--()
(b<root> / --LEX--  :op1 (n / now)  :mod-of (w<mod>))--TYPE--(mod())
(c<root> / city-district  :name (n / --LEX--)  :part-of (c2<poss>))--TYPE--(poss())
(c<root> / --LEX--  :ARG2 (s<o>)  :ARG4 (k<s>))--TYPE--(o(s_UNIFY_s()), s())
(s3<root> / string-entity  :value (explicitanon2 / --LEX--)  :mod-of (c3<mod>))--TYPE--(mod())
(m<root> / medication  :name (n / --LEX--))--TYPE--()
(c2<root> / --LEX--  :ARG2 (h<s>)  :subevent-of (e<mod>))--TYPE--(mod(), s())
(s<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG0 (y / you)  :ARG1 (t<o>)  :ARG2 (i<s>))--TYPE--(o(), s(s_UNIFY_o()))
(n<root> / --LEX--  :name-of (c2 / county  :source-of (s<mod>)))--TYPE--(mod())
(i<root> / island  :quant (explicitanon3 / --LEX--))--TYPE--()
(p<root> / person  :poss (c<poss>)  :quant (m / --LEX--))--TYPE--(poss())
(o<root> / --LEX--  :ARG0 (s<s>)  :prep-into-of (l<mod>))--TYPE--(mod(), s())
(s2<root> / --LEX--  :ARG1 (a<s>)  :ARG4 (s3<o2>)  :ARG0 (c<o>)  :purpose-of (l<mod>))--TYPE--(mod(), o(), o2(), s())
(r<root> / religious-group  :name (n3 / --LEX--)  :prep-against-of (t<mod>))--TYPE--(mod())
(explicitanon3<root> / Parliament  :op1-of (n2 / name  :name-of (g / government-organization  :ARG1-of (h / --LEX--  :ARG2 (m<o2>)  :ARG0 (p<s>)))))--TYPE--(o2(), s())
(s2<root> / station  :name (n2 / --LEX--)  :location-of (b<mod>))--TYPE--(mod())
(s<root> / --LEX--  :ARG1 (p<o>)  :ARG3 (a<o3>)  :ARG2 (p2<o2>)  :ARG0 (c<s>))--TYPE--(o(), o2(), o3(s_UNIFY_o()), s())
(r<root> / --LEX--  :ARG2 (g<o2>)  :ARG3 (p3<o3>)  :ARG0 (a<s>)  :ARG1 (a3<o>))--TYPE--(o(), o2(), o3(o_UNIFY_s(), s_UNIFY_o2()), s())
(l<root> / league  :name (n / --LEX--)  :mod-of (c2<mod>))--TYPE--(mod())
(a<root> / amusement-park  :name (n2 / --LEX--)  :direction-of (r<mod>))--TYPE--(mod())
(p2<root> / person  :op1 (m<op1>)  :ARG1-of (d / --LEX--))--TYPE--(op1())
(i<root> / idea  :name (n / --LEX--))--TYPE--()
(e<root> / --LEX--  :quant-of (o / oil))--TYPE--()
(a<root> / --LEX--  :op2 (s<op2>)  :op1 (r<op1>)  :concession-of (m<mod>))--TYPE--(mod(), op1(o_UNIFY_o()), op2(o_UNIFY_o()))
(a<root> / --LEX--  :op1 (c2<op1>)  :op2 (c3<op2>)  :op3 (c4<op3>)  :op4 (c5<op4>)  :prep-among-of (a3<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4())
(explicitanon3<root> / --LEX--  :quant-of (m / morning  :frequency-of (s<mod>)))--TYPE--(mod())
(e<root> / --LEX--  :name (n / name  :op1 (explicitanon2 / Semite)))--TYPE--()
(n<root> / --LEX--  :name-of (c2 / continent  :topic-of (t2<mod>)))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (i2 / island  :prep-with-of (s<mod>)))--TYPE--(mod())
(p2<root> / publication  :name (n / --LEX--)  :prep-at-of (v<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (w2 / world-region  :compared-to-of (p<mod>)))--TYPE--(mod())
(p2<root> / --LEX--  :prep-toward-of (a2<mod>))--TYPE--(mod())
(d<root> / --LEX--  :ARG1 (b<o>)  :ARG4 (t<o2>)  :ARG0 (c3<s>)  :condition-of (r<mod>))--TYPE--(mod(), o(), o2(), s())
(r2<root> / --LEX--  :ARG2 (l<o>)  :degree-of (t<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(explicitanon1<root> / United  :op1-of (n2 / --LEX--  :op4 (explicitanon4<op4>)  :op3 (explicitanon3 / of)  :op2 (explicitanon2 / States)  :name-of (c2<mod>)))--TYPE--(mod(), op4())
(n2<root> / --LEX--  :op3 (explicitanon6<op3>)  :op2 (explicitanon5<op2>)  :op4 (explicitanon7 / America)  :op1 (explicitanon4 / United)  :name-of (c2<mod>))--TYPE--(mod(), op2(), op3())
(g<root> / --LEX--  :ARG1 (t3<o>)  :ARG0 (h<s>)  :ARG3 (r<o2>)  :purpose-of (w<mod>))--TYPE--(mod(), o(), o2(s_UNIFY_s()), s())
(t2<root> / --LEX--  :mode (explicitanon3 / imperative)  :ARG2 (s<o2>)  :ARG1 (t3<o>)  :ARG0 (y<s>))--TYPE--(o(s_UNIFY_o2()), o2(), s())
(w<root> / --LEX--  :ARG2-of (d / destroy-01  :degree (m / mass)))--TYPE--()
(a<root> / --LEX--  :op2 (s3<op2>)  :op1 (p2<op1>)  :domain (y<dom>)  :topic-of (p<mod>))--TYPE--(dom(), mod(), op1(), op2())
(n2<root> / --LEX--  :name-of (g / game  :location-of (p<mod>)))--TYPE--(mod())
(n3<root> / --LEX--  :name-of (f2 / facility  :source-of (m<mod>)))--TYPE--(mod())
(v<root> / --LEX--  :ARG1 (w<o>)  :ARG0 (p2<s>)  :location-of (f<mod>))--TYPE--(mod(s_UNIFY_s()), o(), s())
(s<root> / --LEX--  :ARG1 (h<o>)  :ARG2 (h3<o2>)  :ARG0 (a<s>))--TYPE--(o(), o2(s_UNIFY_o()), s(s_UNIFY_o()))
(u<root> / --LEX--  :ARG2 (c3<o2>)  :ARG1 (c2<o>)  :ARG0 (m<s>)  :purpose-of (c<mod>))--TYPE--(mod(), o(mod_UNIFY_mod()), o2(), s())
(c9<root> / country  :name (n5 / --LEX--)  :prep-in-addition-to-of (v<mod>))--TYPE--(mod())
(l2<root> / law  :name (n / --LEX--)  :part-of (c<poss>))--TYPE--(poss())
(r<root> / religious-group  :name (n3 / --LEX--)  :location-of (p2<mod>))--TYPE--(mod())
(p<root> / --LEX--  :ARG0 (y<o>)  :ARG1 (p2<s>)  :ARG2 (c<o2>))--TYPE--(o(), o2(), s(poss_UNIFY_o()))
(t<root> / thing  :ARG1-of (c / --LEX--)  :destination-of (e<mod>))--TYPE--(mod())
(m<root> / --LEX--  :ARG2 (p4<o>)  :ARG0 (p2<s>)  :purpose-of (n<mod>))--TYPE--(mod(s_UNIFY_s()), o(), s())
(a<root> / --LEX--  :poss (w<poss>)  :op1 (r<op1>)  :op2 (r2<op2>)  :op3 (l<op3>)  :consist (c<mod>))--TYPE--(mod(), op1(), op2(), op3(), poss())
(g2<root> / government-organization  :direction-of (t<mod>)  :ARG0-of (g3 / --LEX--))--TYPE--(mod())
(n<root> / --LEX--  :ARG1 (p<s>)  :ARG0 (w3 / we))--TYPE--(s())
(v<root> / --LEX--  :op2 (a<op2>)  :op1 (h<op1>))--TYPE--(op1(mod_UNIFY_op2()), op2())
(m2<root> / --LEX--  :mod (i / intercontinental))--TYPE--()
(b<root> / --LEX--  :ARG1 (e<o>)  :ARG0 (w2<s>)  :ARG2 (d3<o2>)  :mode (explicitanon2 / imperative)  :concession-of (p2<mod>))--TYPE--(mod(), o(), o2(), s())
(p<root> / person  :name (n / --LEX--)  :condition-of (e<mod>))--TYPE--(mod())
(s<root> / --LEX--  :ARG0 (p3 / person  :ARG2-of (h2 / have-org-role-91  :ARG1 (g<o>)  :ARG0 (i<s>)  :manner-of (c<mod>))))--TYPE--(mod(), o(), s())
(t2<root> / thing  :quant (m / multiple  :op1 (explicitanon1 / --LEX--))  :topic-of (e<mod>))--TYPE--(mod())
(a2<root> / --LEX--  :op1 (p2<op1>)  :op3 (p4<op3>)  :op2 (p3<op2>)  :beneficiary-of (p<mod>))--TYPE--(mod(), op1(), op2(), op3())
(c2<root> / --LEX--  :ARG2 (c3<o>)  :ARG1 (m<s>)  :condition-of (p<mod>))--TYPE--(mod(), o(dom_UNIFY_s()), s())
(e<root> / --LEX--  :polarity (explicitanon6 / -)  :time-of (s<mod>))--TYPE--(mod())
(g<root> / --LEX--  :ARG4 (a<o2>)  :ARG1 (t<s>)  :ARG2 (p<o>)  :condition-of (s<mod>))--TYPE--(mod(), o(), o2(mod_UNIFY_s()), s())
(p2<root> / --LEX--  :mod (f2 / fellow)  :ARG0-of (p3 / pay-01  :ARG1 (t / tax-01)))--TYPE--()
(s<root> / --LEX--  :ARG4 (c<s>)  :manner-of (d<mod>))--TYPE--(mod(), s())
(explicitanon1<root> / --LEX--  :year-of (d / date-entity  :topic-of (t<mod>)))--TYPE--(mod())
(p3<root> / political-movement  :domain (p<dom>)  :name (n3 / --LEX--)  :mod-of (p2<mod>))--TYPE--(dom(), mod())
(p2<root> / percentage-entity  :value (n / --LEX--  :op1 (explicitanon0<op1>)))--TYPE--(op1())
(explicitanon0<root> / -  :polarity-of (d / --LEX--  :ARG2 (f<s>)  :ARG1-of (p2 / possible-01)))--TYPE--(s())
(s2<root> / --LEX--  :ARG0 (d<mod>  :condition s2)  :ARG1 (l<s>))--TYPE--(mod(), s())
(e3<root> / equipment  :quant (m4 / --LEX--))--TYPE--()
(v<root> / --LEX--  :ARG3 (p<o>)  :ARG4 (p2<s>)  :topic-of (s<mod>))--TYPE--(mod(), o(), s())
(e<root> / event  :quant (explicitanon0 / --LEX--)  :location-of (s<mod>))--TYPE--(mod())
(e2<root> / event  :quant (explicitanon1 / --LEX--))--TYPE--()
(l<root> / law  :name (n / --LEX--)  :location-of (l2<mod>))--TYPE--(mod())
(s2<root> / --LEX--  :ARG0 (g<o2>)  :ARG1 (p<o>)  :ARG2 (s<s>)  :time-of (f<mod>))--TYPE--(mod(), o(poss_UNIFY_s()), o2(), s())
(q<root> / --LEX--  :ARG2 (c3<s>)  :accompanier-of (u<mod>))--TYPE--(mod(), s())
(d<root> / distance-quantity  :quant (explicitanon2 / --LEX--)  :unit (m / millimeter))--TYPE--()
(t4<root> / --LEX--  :ARG0 (t3<s>)  :concession-of (s<mod>))--TYPE--(mod(mod_UNIFY_s()), s())
(p2<root> / person  :ARG1-of (c / --LEX--  :ARG2 (r2<o2>)  :ARG0 (p<s>)  :topic-of (s2<mod>)))--TYPE--(mod(), o2(), s())
(explicitanon2<root> / --LEX--  :quant-of (s / seismic-quantity  :mod-of (e<mod>)))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (l / local-region  :prep-as-of (a<mod>)))--TYPE--(mod())
(b<root> / --LEX--  :ARG1 (i<o>)  :ARG3 (a<o3>)  :ARG0 (t<s>)  :ARG2 (u<o2>))--TYPE--(o(), o2(op1_UNIFY_s()), o3(s_UNIFY_s()), s())
(c2<root> / chemical  :name (n2 / --LEX--))--TYPE--()
(p<root> / post-01  :ARG1 (t3 / thing  :ARG2-of (i2 / --LEX--  :ARG3 (m<s>)  :ARG1 (t2<o>))))--TYPE--(o(), s())
(r3<root> / --LEX--  :ARG4 (e<o>)  :ARG1 (y<s>)  :purpose-of (g<mod>))--TYPE--(mod(), o(poss_UNIFY_s()), s())
(a<root> / --LEX--  :op2 (l<op2>)  :op1 (p<op1>))--TYPE--(op1(o2_UNIFY_o2(), o_UNIFY_o(), s_UNIFY_s()), op2(o2_UNIFY_o2(), o_UNIFY_o(), s_UNIFY_s()))
(t<root> / --LEX--  :ARG0 (y<o>)  :ARG1 (f<s>)  :ARG2 (a<o2>))--TYPE--(o(), o2(), s(s_UNIFY_o()))
(a2<root> / --LEX--  :op2 (b4<op2>)  :op1 (s2<op1>)  :destination-of (f<mod>))--TYPE--(mod(), op1(poss_UNIFY_poss()), op2(poss_UNIFY_poss()))
(d<root> / --LEX--  :ARG0 (f<s>)  :ARG1 (b<o>)  :concession-of (a<mod>))--TYPE--(mod(o_UNIFY_o(), s_UNIFY_s()), o(s_UNIFY_s()), s())
(p<root> / palace  :name (n / --LEX--))--TYPE--()
(p<root> / person  :domain (t<dom>)  :ARG0-of (h / have-rel-role-91  :ARG2 (b / --LEX--)))--TYPE--(dom())
(p3<root> / --LEX--  :ARG1 (e<s>)  :prep-under-of (a<mod>))--TYPE--(mod(), s())
(r2<root> / --LEX--  :ARG3 (t<o>)  :ARG1 (m<s>)  :frequency-of (p<mod>))--TYPE--(mod(), o(), s())
(j<root> / jet  :name (n3 / --LEX--))--TYPE--()
(p2<root> / person  :prep-against-of (f<mod>)  :ARG0-of (h / have-rel-role-91  :ARG2 (e / --LEX--)))--TYPE--(mod())
(e<root> / ethnic-group  :poss (o<poss>)  :name (n4 / --LEX--))--TYPE--(poss())
(t2<root> / thing  :ARG4-of (p / --LEX--  :ARG1 (p2<s>)))--TYPE--(s())
(d<root> / date-entity  :month (explicitanon5 / 2)  :day (explicitanon4 / 2)  :year (explicitanon6 / --LEX--))--TYPE--()
(explicitanon7<root> / 5  :day-of (d2 / date-entity  :year (explicitanon9 / 2003)  :month (explicitanon8 / 2)  :op2-of (d3 / --LEX--  :op1 (d<op1>)  :time-of (v<mod>))))--TYPE--(mod(), op1())
(t<root> / treaty  :poss (w<poss>)  :name (n / --LEX--)  :topic-of (c2<mod>))--TYPE--(mod(), poss())
(s4<root> / --LEX--  :location (c2 / country  :name (n5 / name  :op1 (explicitanon4 / India))))--TYPE--()
(c3<root> / company  :quant (s2 / --LEX--)  :range-of (o<mod>))--TYPE--(mod())
(d<root> / date-entity  :month (explicitanon3 / 2)  :year (explicitanon4 / --LEX--)  :mod-of (w<mod>))--TYPE--(mod())
(c<root> / --LEX--  :ARG2 (a<o>)  :location-of (e<mod>))--TYPE--(mod(), o())
(c<root> / club  :name (n / --LEX--))--TYPE--()
(f<root> / --LEX--  :ARG1 (t<mod>  :manner f)  :ARG0 (p<s>))--TYPE--(mod(), s())
(i<root> / --LEX--  :polarity (explicitanon1 / -)  :ARG1 (p<s>)  :ARG2 (s<o>))--TYPE--(o(poss_UNIFY_s()), s())
(a<root> / --LEX--  :op1 (i<op1>)  :op2 (c2<op2>)  :conj-as-if-of (i2<mod>))--TYPE--(mod(), op1(o_UNIFY_o(poss_UNIFY_s()), s_UNIFY_s()), op2(o_UNIFY_o(poss_UNIFY_s()), s_UNIFY_s()))
(s4<root> / --LEX--  :op1 (r<op1>)  :op2 (t2 / tax-01)  :mod-of (s<mod>))--TYPE--(mod(), op1())
(s<root> / small-molecule  :domain (i2<dom>)  :name (n / --LEX--))--TYPE--(dom())
(o2<root> / --LEX--  :ARG1 (t / thing  :concession-of (o<mod>)))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (v / variable  :value-of (o / ordinal-entity  :degree-of (e<mod>))))--TYPE--(mod())
(d<root> / --LEX--  :ARG4-of (r / rate-entity-91  :time-of (c<mod>)))--TYPE--(mod())
(h<root> / --LEX--  :domain (p<dom>)  :poss (h2<poss>)  :topic-of (f<mod>))--TYPE--(dom(s_UNIFY_poss()), mod(), poss())
(p<root> / person  :prep-with-of (a<mod>)  :ARG0-of (h / have-rel-role-91  :ARG2 (c / --LEX--)))--TYPE--(mod())
(s<root> / --LEX--  :ARG1 (p<s>)  :ARG0 (g<o>)  :ARG2 (c<o2>)  :time-of (a<mod>))--TYPE--(mod(), o(), o2(s_UNIFY_s()), s())
(f<root> / --LEX--  :ARG2 (h<o>)  :manner-of (l<mod>))--TYPE--(mod(), o())
(b<root> / --LEX--  :ARG2 (n3<s>)  :ARG1 (a<mod>  :manner b))--TYPE--(mod(), s())
(a2<root> / --LEX--  :op1 (p<op1>)  :op2 (p2<op2>)  :prep-along-with-of (t<mod>))--TYPE--(mod(), op1(), op2())
(r<root> / --LEX--  :op1 (c3<op1>)  :prep-in-of (c2<mod>))--TYPE--(mod(), op1())
(i<root> / --LEX--  :op1 (p2<op1>)  :op2 (p3<op2>)  :location-of (t<mod>))--TYPE--(mod(), op1(), op2(poss_UNIFY_op1()))
(p<root> / --LEX--  :domain (a<dom>)  :polarity (explicitanon0 / -)  :degree-of (r<mod>))--TYPE--(dom(), mod())
(b<root> / --LEX--  :op1 (e<op1>)  :time-of (f<mod>))--TYPE--(mod(), op1(o_UNIFY_mod()))
(w<root> / --LEX--  :ARG1 (d<o>)  :ARG0 (y<s>)  :beneficiary-of (r<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(f<root> / feedback  :name (n2 / --LEX--))--TYPE--()
(w<root> / --LEX--  :ARG0 (c3<s>)  :prep-toward-of (a<mod>))--TYPE--(mod(), s())
(p2<root> / possible-01  :ARG1 (w2 / --LEX--  :ARG2 (w3<s>))  :polarity (explicitanon2 / -))--TYPE--(s())
(h2<root> / --LEX--  :ARG2 (m2<o2>)  :ARG0 (p<s>)  :ARG1 (f<o>))--TYPE--(o(mod_UNIFY_s()), o2(), s())
(g<root> / --LEX--  :mode (explicitanon0 / imperative)  :mod (a2 / as-well)  :ARG1 (w<o>  :ARG0-of g)  :ARG2 (o<o2>))--TYPE--(o(), o2(s_UNIFY_o()))
(b<root> / broadcast-program  :quant (m2 / --LEX--)  :topic-of (h<mod>))--TYPE--(mod())
(t<root> / thing  :domain (p2<dom>)  :ARG1-of (d / --LEX--)  :compared-to-of (c3<mod>))--TYPE--(dom(), mod())
(a<root> / --LEX--  :op1 (p2<op1>)  :op2 (w<op2>)  :prep-to-of (d<mod>))--TYPE--(mod(), op1(s_UNIFY_s()), op2(s_UNIFY_s()))
(a<root> / --LEX--  :op3 (s4<op3>)  :op1 (p2<op1>)  :op2 (e<op2>)  :poss (c3<poss>)  :op4 (e2<op4>))--TYPE--(op1(), op2(), op3(), op4(), poss())
(c<root> / conference  :poss (p2<poss>)  :name (n3 / --LEX--)  :time-of (e2<mod>))--TYPE--(mod(), poss())
(p2<root> / person  :prep-for-of (d<mod>)  :ARG1-of (l / --LEX--))--TYPE--(mod())
(w<root> / --LEX--  :ARG0 (w2<s>)  :ARG1 (d<mod>  :purpose w))--TYPE--(mod(), s())
(n2<root> / --LEX--  :op1 (explicitanon4 / Jesus)  :name-of (p2<mod>))--TYPE--(mod())
(t3<root> / thing  :domain (f<dom>)  :ARG0-of (g / --LEX--)  :part-of (b<poss>)  :mod-of (p<mod>))--TYPE--(dom(), mod(), poss())
(explicitanon1<root> / -  :polarity-of (u2 / --LEX--  :ARG1 (p<o>)  :ARG0 (y<s>)  :condition-of (c<mod>)))--TYPE--(mod(), o(), s())
(s<root> / --LEX--  :ARG2 (n<o>)  :ARG3 (e<s>)  :manner-of (v<mod>))--TYPE--(mod(), o(), s())
(l<root> / --LEX--  :manner (l2 / loud)  :ARG0 (i<s>))--TYPE--(s())
(e<root> / --LEX--  :ARG0 (m2<s>)  :poss (i2<poss>))--TYPE--(poss(), s())
(g<root> / --LEX--  :ARG1 (l<s>)  :degree (m / more)  :direction-of (t2<mod>))--TYPE--(mod(), s())
(l2<root> / law  :name (n2 / --LEX--)  :instrument-of (i<mod>))--TYPE--(mod())
(c3<root> / charge-quantity  :quant (explicitanon0 / --LEX--))--TYPE--()
(t2<root> / temporal-quantity  :quant (explicitanon1 / --LEX--)  :ARG2-of (r / rate-entity-91  :ARG1 (c3<s>)  :mod-of (b<mod>)))--TYPE--(mod(), s())
(p2<root> / person  :ARG0-of (h / have-rel-role-91  :ARG2 (p3 / --LEX--)  :ARG3 (c<s>)))--TYPE--(s())
(d2<root> / --LEX--  :ARG3 (t2<s>)  :ARG2 (p2<o>)  :ARG0 (i<o2>))--TYPE--(o(), o2(), s())
(a<root> / --LEX--  :op1 (g<op1>)  :op2 (g3<op2>)  :topic-of (a2<mod>))--TYPE--(mod(), op1(o2_UNIFY_o2()), op2(o2_UNIFY_o2()))
(m<root> / --LEX--  :op1 (f<op1>)  :prep-as-of (g<mod>))--TYPE--(mod(), op1())
(b<root> / --LEX--  :ARG0 (i<s>)  :ARG3 (y3 / you)  :ARG2 (p<o>))--TYPE--(o(), s())
(t<root> / temporal-quantity  :quant (explicitanon0 / --LEX--)  :mod-of (t2<mod>))--TYPE--(mod())
(c2<root> / country  :name (n3 / --LEX--)  :domain (d2<dom>)  :concession-of (s<mod>))--TYPE--(dom(), mod())
(s2<root> / --LEX--  :poss (s<poss>)  :op1 (m<op1>)  :op2 (m2<op2>)  :op3 (n2 / norm))--TYPE--(op1(), op2(), poss())
(g2<root> / --LEX--  :ARG1 (v<o>)  :ARG0 (i<o2>)  :ARG2 (p<s>))--TYPE--(o(poss_UNIFY_o2()), o2(), s())
(e<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (p<o>)  :ARG4 (f3<o3>)  :ARG3 (f2<o2>))--TYPE--(o(), o2(), o3(), s(s_UNIFY_o()))
(p2<root> / --LEX--  :ARG1 (n<s>)  :ARG5 (explicitanon9<o>)  :ARG7 (v<o2>))--TYPE--(o(), o2(), s())
(t<root> / thing  :prep-to-of (c<mod>)  :ARG1-of (t2 / --LEX--))--TYPE--(mod())
(d<root> / --LEX--  :mode (explicitanon2 / imperative)  :ARG1 (t3<o>)  :ARG0 (y<s>)  :topic-of (t<mod>))--TYPE--(mod(), o(), s())
(s4<root> / species  :quant (explicitanon1 / --LEX--))--TYPE--()
(r<root> / --LEX--  :ARG2 (b<o>)  :consist (l<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(explicitanon2<root> / England  :op1-of (n2 / --LEX--  :name-of (c<mod>)))--TYPE--(mod())
(a<root> / and  :op1 (p<op1>)  :op2 (s2<op2>)  :quant (m / --LEX--))--TYPE--(op1(), op2())
(y<root> / --LEX--  :op1-of (m / multiple  :duration-of (g<mod>)))--TYPE--(mod())
(d<root> / --LEX--  :ARG1 (p<s>  :ARG0-of d)  :concession-of (a<mod>))--TYPE--(mod(), s())
(f<root> / facility  :name (n / --LEX--)  :topic-of (d2<mod>))--TYPE--(mod())
(s<root> / --LEX--  :ARG2 (c2<o>)  :ARG0 (p2<s>)  :degree (m / most))--TYPE--(o(), s())
(a3<root> / --LEX--  :op1 (e2<op1>)  :op2 (w<op2>)  :path-of (r2<mod>))--TYPE--(mod(), op1(poss_UNIFY_poss()), op2(poss_UNIFY_poss()))
(g<root> / --LEX--  :ARG0 (p2<s>)  :ARG3 (s<o2>)  :ARG1 (i<o>))--TYPE--(o(), o2(o_UNIFY_o(), s_UNIFY_s()), s())
(explicitanon1<root> / -  :polarity-of (p3 / possible-01  :ARG1 (a / --LEX--  :ARG0 (p2<s>)  :ARG1 (c<o>))))--TYPE--(o(), s())
(explicitanon0<root> / -  :polarity-of (p2 / --LEX--  :ARG1 (a2<s>)  :consist (w<mod>)))--TYPE--(mod(), s())
(s<root> / --LEX--  :mode (explicitanon3 / imperative)  :ARG1 (l<o>)  :ARG0 (y<s>)  :ARG2 (p2<o2>))--TYPE--(o(o_UNIFY_o2(), s_UNIFY_s()), o2(), s())
(p<root> / person  :ARG1-of (e / --LEX--  :ARG2-of (h / have-org-role-91)))--TYPE--()
(c<root> / city  :name (n / --LEX--)  :path-of (m<mod>))--TYPE--(mod())
(t<root> / thing  :destination-of (s<mod>)  :ARG0-of (i2 / --LEX--))--TYPE--(mod())
(o<root> / --LEX--  :subset-of (p3<mod>))--TYPE--(mod())
(c<root> / --LEX--  :ARG2 (d<o>)  :ARG1 (p3<s>)  :consist (p2<mod>))--TYPE--(mod(), o(), s())
(f<root> / --LEX--  :polarity (explicitanon2 / -)  :ARG2 (c<o>))--TYPE--(o())
(c<root> / --LEX--  :ARG4 (c4<o>)  :ARG1 (y2<s>)  :time-of (s<mod>))--TYPE--(mod(), o(mod_UNIFY_s()), s())
(d2<root> / --LEX--  :ARG0 (a2<s>)  :ARG2 (c<o2>)  :ARG1 (d<o>))--TYPE--(o(), o2(), s(o_UNIFY_o2()))
(d2<root> / --LEX--  :quant (explicitanon3 / 7)  :unit (i / inch))--TYPE--()
(h<root> / --LEX--  :ARG1 (p2<o>)  :ARG2 (m / mother)  :ARG0 (p<s>))--TYPE--(o(), s())
(a2<root> / --LEX--  :mod (s / small))--TYPE--()
(d<root> / --LEX--  :ARG2 (w2<s>)  :degree (m / mass))--TYPE--(s())
(d2<root> / date-entity  :day (explicitanon6 / 31)  :year (explicitanon8 / --LEX--)  :time-of (s<mod>))--TYPE--(mod())
(t<root> / thing  :ARG3-of (s3 / --LEX--  :ARG4 (r2<s>)))--TYPE--(s())
(h<root> / have-org-role-91  :ARG2 (p4 / person  :ARG1-of (n3 / --LEX--))  :ARG1 (p2<o>)  :ARG0 (p<s>))--TYPE--(o(), s())
(c<root> / city  :name (n2 / --LEX--)  :compared-to-of (p3<mod>))--TYPE--(mod())
(g2<root> / game  :name (n / --LEX--)  :topic-of (b2<mod>))--TYPE--(mod())
(t2<root> / thing  :ARG3-of (m / --LEX--  :ARG1 (i2<s>)  :mod-of (t<mod>)))--TYPE--(mod(), s())
(r<root> / --LEX--  :ARG0 (p2 / person  :beneficiary-of (t<mod>)))--TYPE--(mod())
(p3<root> / --LEX--  :ARG0 (p2<s>)  :mod (o / original))--TYPE--(s())
(p2<root> / possible-01  :ARG1 (a3 / --LEX--  :ARG2 (o2<s>)))--TYPE--(s())
(d<root> / dimension  :quant (explicitanon4 / --LEX--)  :manner-of (s<mod>))--TYPE--(mod())
(u<root> / --LEX--  :ARG1 (d<o>)  :ARG0 (p<s>)  :domain (l<dom>))--TYPE--(dom(s_UNIFY_s()), o(s_UNIFY_s()), s())
(s<root> / --LEX--  :ARG1 (p2<s>)  :ARG2 (a<o>)  :source-of (r<mod>))--TYPE--(mod(), o(), s())
(s<root> / --LEX--  :ARG1 (w<o>)  :ARG0 (t2<s>)  :ARG2 (i<o2>)  :domain (t<dom>))--TYPE--(dom(), o(s_UNIFY_s()), o2(), s())
(n3<root> / --LEX--  :name-of (w / work-of-art  :time-of (s<mod>)))--TYPE--(mod())
(p2<root> / --LEX--  :ARG2-of (h / have-org-role-91  :ARG1 (c2<o>)  :ARG0 (p<s>)  :manner-of (g<mod>)))--TYPE--(mod(), o(), s())
(y<root> / you  :ARG0-of (g2 / --LEX--  :ARG1 (a<s>)  :topic-of (l2<mod>)))--TYPE--(mod(), s())
(v<root> / vehicle  :quant (explicitanon3 / --LEX--))--TYPE--()
(a<root> / --LEX--  :op1 (s<op1>)  :op2 (s2<op2>))--TYPE--(op1(o2_UNIFY_o2()), op2(o2_UNIFY_o2()))
(m<root> / market-sector  :name (n / --LEX--)  :concession-of (c2<mod>))--TYPE--(mod())
(t3<root> / --LEX--  :ARG4 (a5<s>)  :beneficiary-of (h2<mod>))--TYPE--(mod(), s())
(a<root> / --LEX--  :op3 (h<op3>)  :op2 (o3<op2>)  :op1 (a2<op1>))--TYPE--(op1(o_UNIFY_o()), op2(o_UNIFY_o()), op3(o_UNIFY_o()))
(a2<root> / --LEX--  :op4 (p5<op4>)  :op2 (p3<op2>)  :op5 (e<op5>)  :op1 (p2<op1>)  :op3 (p4<op3>)  :consist (a<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4(), op5())
(t<root> / --LEX--  :ARG3 (p2<o2>)  :ARG2 (i3<o>)  :ARG0 (y<s>)  :condition-of (r<mod>))--TYPE--(mod(), o(), o2(s_UNIFY_o()), s())
(n5<root> / --LEX--  :name-of (f2 / facility  :poss (p2<poss>)  :location-of (d<mod>)))--TYPE--(mod(), poss())
(n2<root> / --LEX--  :name-of (l / law  :poss (s<poss>)  :medium-of (c2<mod>)))--TYPE--(mod(), poss())
(b<root> / --LEX--  :ARG2 (t3 / thing  :instrument-of (a<mod>)))--TYPE--(mod())
(u2<root> / --LEX--  :ARG2 (a3 / ass)  :ARG1 (h<s>))--TYPE--(s())
(s3<root> / --LEX--  :ARG0 (y<s>)  :ARG2 (u2<o2>)  :ARG1 (h<o>)  :concession-of (s4<mod>))--TYPE--(mod(), o(poss_UNIFY_s()), o2(s_UNIFY_o()), s())
(s2<root> / --LEX--  :ARG4 (c<o>)  :ARG1 (p<s>)  :subevent-of (p3<mod>))--TYPE--(mod(), o(), s())
(t<root> / --LEX--  :ARG2 (t2<o2>)  :ARG0 (g<s>)  :ARG1 (c2<o>)  :domain (t4<dom>))--TYPE--(dom(), o(), o2(), s())
(j<root> / job  :name (n / --LEX--))--TYPE--()
(w<root> / --LEX--  :ARG1 (t2 / thing  :destination-of (g<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :ARG2 (p2<o>)  :ARG1 (p<s>)  :time (t3 / then))--TYPE--(o(), s())
(c<root> / --LEX--  :purpose (o / operate-01  :ARG1 (n / network-01)))--TYPE--()
(u<root> / --LEX--  :ARG1 (m<o>)  :ARG0 (p<s>)  :ARG2 (a2<o2>)  :topic-of (i<mod>))--TYPE--(mod(), o(), o2(s_UNIFY_s()), s())
(v<root> / --LEX--  :polarity (explicitanon0 / -)  :ARG0 (s4<s>)  :ARG1 (c<o>))--TYPE--(o(), s(poss_UNIFY_o()))
(s4<root> / state  :poss (c<poss>)  :name (n2 / --LEX--))--TYPE--(poss())
(p<root> / project  :poss (h2<poss>)  :name (n / --LEX--))--TYPE--(poss())
(p<root> / --LEX--  :ARG0-of (h / have-org-role-91  :ARG2 (o / officer  :mod (c / chief)  :mod (e / executive))))--TYPE--()
(p<root> / --LEX--  :domain (y / you)  :beneficiary-of (s<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (s2 / show  :medium-of (s<mod>)))--TYPE--(mod())
(m3<root> / military  :name (n / --LEX--)  :compared-to-of (b<mod>))--TYPE--(mod())
(r<root> / --LEX--  :ARG1 (e<mod>  :concession r))--TYPE--(mod())
(l<root> / --LEX--  :ARG4 (l2<o2>)  :ARG0 (p<s>  :ARG1-of l))--TYPE--(o2(), s())
(d<root> / department  :name (n / --LEX--)  :example-of (a<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (m / machine  :mod-of (c2<mod>)))--TYPE--(mod())
(explicitanon2<root> / U-boat  :op1-of (n / --LEX--  :name-of (s<mod>)))--TYPE--(mod())
(u<root> / --LEX--  :domain (p2<dom>)  :ARG0 (t<s>)  :ARG2 (a2<o2>)  :ARG1 (n<o>))--TYPE--(dom(), o(), o2(s_UNIFY_s()), s())
(n4<root> / --LEX--  :name-of (i / incident  :time-of (w<mod>)))--TYPE--(mod())
(w<root> / war  :name (n2 / --LEX--)  :duration-of (b<mod>))--TYPE--(mod())
(c<root> / --LEX--  :ARG2 (t3 / thing  :purpose-of (l<mod>)))--TYPE--(mod())
(p2<root> / --LEX--  :ARG4 (j<s>)  :ARG7 (v<o>)  :location-of (t<mod>))--TYPE--(mod(), o(), s())
(n<root> / natural-object  :name (n7 / --LEX--)  :example-of (t<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (e / event  :location-of (d<mod>)))--TYPE--(mod())
(n2<root> / --LEX--  :op1 (explicitanon5 / America)  :name-of (c2<mod>))--TYPE--(mod())
(b<root> / --LEX--  :ARG1 (c<s>)  :ARG2 (c2<o>)  :prep-without-of (k<mod>))--TYPE--(mod(), o(), s())
(u<root> / university  :quant (l / --LEX--))--TYPE--()
(o<root> / ordinal-entity  :value (explicitanon0 / --LEX--)  :mod-of (m2<mod>))--TYPE--(mod())
(explicitanon1<root> / General  :op1-of (n / --LEX--  :op3 (explicitanon3<op3>)  :op2 (explicitanon2<op2>)  :op5 (explicitanon5 / Education)  :op4 (explicitanon4 / Secondary)  :name-of (q<mod>)))--TYPE--(mod(), op2(), op3())
(s2<root> / --LEX--  :ARG1 (i<o>)  :ARG0 (h<s>)  :location-of (p<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(n2<root> / --LEX--  :name-of (l / league  :prep-in-of (p<mod>)))--TYPE--(mod())
(s3<root> / snow  :quant (g3 / --LEX--))--TYPE--()
(b2<root> / beach  :name (n2 / --LEX--))--TYPE--()
(s2<root> / store  :name (n / --LEX--)  :poss (i<poss>))--TYPE--(poss())
(h<root> / --LEX--  :ARG0 (i<s>)  :ARG3 (u<o2>)  :ARG1 (h2<o>))--TYPE--(o(poss_UNIFY_s()), o2(s_UNIFY_o()), s())
(p<root> / --LEX--  :ARG1 (p3<o>)  :ARG6 (explicitanon1<o4>)  :ARG4 (j<o2>)  :ARG0 (p2<s>)  :ARG7 (v<o5>)  :ARG5 (explicitanon0<o3>))--TYPE--(o(), o2(), o3(), o4(), o5(), s())
(s<root> / --LEX--  :ARG1 (p<o>)  :ARG5 (w<o2>)  :ARG0 (h<s>))--TYPE--(o(), o2(poss_UNIFY_o()), s())
(explicitanon1<root> / China  :op1-of (n2 / --LEX--  :name-of (c2<mod>)))--TYPE--(mod())
(b2<root> / book  :quant (explicitanon2 / --LEX--))--TYPE--()
(r<root> / --LEX--  :ARG0 (y / you)  :ARG1 (r2<o>)  :ARG3 (m<s>))--TYPE--(o(), s())
(h2<root> / have-org-role-91  :ARG2 (o / --LEX--)  :time-of (d<mod>))--TYPE--(mod())
(a<root> / --LEX--  :ARG2 (y / you)  :ARG0 (i<s>)  :prep-on-behalf-of (p2<mod>))--TYPE--(mod(), s())
(f<root> / --LEX--  :ARG1 (a<s>)  :ARG2 (c2<o>)  :polarity (explicitanon9 / -))--TYPE--(o(), s(o_UNIFY_o()))
(p5<root> / person  :ARG1-of (h2 / have-org-role-91  :ARG2 (p4 / --LEX--)  :ARG0 (p3<s>)))--TYPE--(s())
(f<root> / --LEX--  :ARG1 (a2<o>)  :ARG0 (i2<s>)  :purpose-of (r<mod>))--TYPE--(mod(), o(), s(poss_UNIFY_mod()))
(c2<root> / car  :quant (explicitanon3 / --LEX--))--TYPE--()
(w<root> / --LEX--  :poss (c2<poss>)  :instrument-of (c3<mod>))--TYPE--(mod(s_UNIFY_poss()), poss())
(p2<root> / --LEX--  :ARG2 (c<o>)  :ARG1 (p4<s>)  :time (n / now))--TYPE--(o(), s())
(a2<root> / --LEX--  :op2 (f<op2>)  :op1 (s2<op1>)  :location-of (a<mod>))--TYPE--(mod(), op1(poss_UNIFY_poss()), op2(poss_UNIFY_poss()))
(c3<root> / --LEX--  :ARG2 (d2<o>)  :ARG3 (d<o2>)  :ARG1 (y<s>)  :time-of (m<mod>))--TYPE--(mod(), o(), o2(), s())
(explicitanon4<root> / Spain  :op1-of (n / --LEX--  :name-of (c3<mod>)))--TYPE--(mod())
(c5<root> / country  :quant (explicitanon0 / --LEX--)  :domain (a<dom>))--TYPE--(dom())
(o2<root> / --LEX--  :ARG2-of (h2 / have-org-role-91  :ARG0 (p4 / person  :direction-of (o<mod>))))--TYPE--(mod())
(a<root> / --LEX--  :op3 (p4<op3>)  :op2 (c<op2>)  :op1 (f<op1>)  :op4 (d<op4>)  :concession-of (s<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4())
(c<root> / --LEX--  :ARG3 (w<o>)  :ARG0 (c4<s>)  :purpose-of (o<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(a2<root> / aircraft  :poss (c2<poss>)  :quant (explicitanon2 / --LEX--))--TYPE--(poss())
(o<root> / organization  :name (n / --LEX--)  :time-of (d<mod>))--TYPE--(mod())
(p2<root> / person  :beneficiary-of (l2<mod>)  :ARG2-of (c2 / --LEX--))--TYPE--(mod())
(r<root> / --LEX--  :ARG2 (i / insurgency)  :ARG1 (v<s>))--TYPE--(s())
(o<root> / --LEX--  :op3 (g<op3>)  :op2 (s3<op2>)  :op1 (l<op1>)  :op4 (l2<op4>)  :condition-of (p<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4())
(h4<root> / hot-dog  :quant (explicitanon3 / --LEX--))--TYPE--()
(explicitanon1<root> / WWII  :op1-of (n / name  :name-of (w / --LEX--  :mod-of (h<mod>))))--TYPE--(mod())
(t2<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (w<o>)  :concession-of (l<mod>))--TYPE--(mod(s_UNIFY_o()), o(s_UNIFY_s()), s())
(s<root> / --LEX--  :ARG5 (u<o3>)  :ARG1 (p2<o>)  :ARG4 (h<o2>)  :ARG0 (d<s>))--TYPE--(o(), o2(s_UNIFY_o()), o3(), s())
(p2<root> / --LEX--  :ARG1 (r2<s>)  :manner-of (r<mod>))--TYPE--(mod(), s(s_UNIFY_mod()))
(c<root> / --LEX--  :ARG2 (s3<o>)  :ARG1 (s2<s>)  :manner-of (s<mod>))--TYPE--(mod(), o(), s(s_UNIFY_mod()))
(a<root> / --LEX--  :op1 (h<op1>)  :op2 (s2<op2>)  :extent-of (g<mod>))--TYPE--(mod(), op1(o_UNIFY_o()), op2(o_UNIFY_o()))
(c<root> / country  :name (n2 / --LEX--)  :prep-without-of (w<mod>))--TYPE--(mod())
(w<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (c<o>)  :concession-of (w2<mod>))--TYPE--(mod(s_UNIFY_s()), o(s_UNIFY_s()), s())
(n<root> / --LEX--  :name-of (s2 / state  :prep-in-of (f<mod>)))--TYPE--(mod())
(n<root> / --LEX--  :poss (l<mod>  :manner n))--TYPE--(mod())
(f<root> / --LEX--  :part-of (p3<poss>)  :extent-of (p2<mod>))--TYPE--(mod(), poss())
(n2<root> / --LEX--  :name-of (n / nail  :purpose-of (p<mod>)))--TYPE--(mod())
(l<root> / lipgloss  :name (n4 / --LEX--))--TYPE--()
(l2<root> / lash  :name (n5 / --LEX--))--TYPE--()
(a<root> / --LEX--  :op4 (o<op4>)  :op3 (l2<op3>)  :op1 (p<op1>)  :op2 (l<op2>)  :op6 (p2<op6>))--TYPE--(op1(), op2(), op3(), op4(), op6())
(n4<root> / --LEX--  :name-of (w / war  :prep-in-of (a2<mod>)))--TYPE--(mod())
(c2<root> / car-make  :name (n2 / --LEX--)  :prep-in-of (r4<mod>))--TYPE--(mod())
(u<root> / --LEX--  :ARG1 (l<o>)  :ARG2 (b<o2>)  :ARG0 (g<s>))--TYPE--(o(o_UNIFY_s()), o2(o_UNIFY_s()), s())
(d<root> / date-entity  :year (explicitanon4 / --LEX--)  :compared-to-of (i<mod>))--TYPE--(mod())
(e2<root> / --LEX--  :ARG0 (p<s>)  :ARG2 (p4<o>)  :purpose-of (r<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(p<root> / person  :condition-of (n<mod>)  :ARG1-of (t2 / --LEX--))--TYPE--(mod())
(p<root> / person  :ARG1-of (i2 / --LEX--  :degree (m2 / most)))--TYPE--()
(t<root> / --LEX--  :quant (explicitanon0 / 13)  :unit (y / year))--TYPE--()
(a3<root> / area-quantity  :quant (explicitanon1 / --LEX--)  :op1-of (m3 / multiple  :quant-of (f<mod>)))--TYPE--(mod())
(t<root> / --LEX--  :ARG2 (t2<o>)  :ARG0 (a3<s>))--TYPE--(o(), s(s_UNIFY_o()))
(p5<root> / person  :ARG0-of (h / --LEX--  :ARG1 (c<s>)  :ARG2 (p6 / president)))--TYPE--(s())
(p2<root> / person  :prep-on-of (a4<mod>)  :ARG0-of (h2 / have-rel-role-91  :ARG2 (w / --LEX--)))--TYPE--(mod())
(s<root> / --LEX--  :ARG0 (y / you)  :ARG2 (i<s>)  :ARG1 (e<o>)  :condition-of (t<mod>))--TYPE--(mod(), o(), s())
(explicitanon2<root> / --LEX--  :quant-of (s2 / step  :mod-of (s<mod>)))--TYPE--(mod())
(s2<root> / --LEX--  :ARG2 (s3<o>)  :ARG0 (p<s>)  :condition-of (d<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(t3<root> / thing  :ARG1-of (p6 / --LEX--  :ARG0 (p5 / person  :source-of (d<mod>))))--TYPE--(mod())
(p<root> / --LEX--  :ARG2 (v<o>)  :ARG1 (b<s>)  :medium-of (r<mod>))--TYPE--(mod(), o(), s())
(v<root> / --LEX--  :op1 (explicitanon3<op1>)  :op2 (explicitanon4 / 22))--TYPE--(op1())
(a<root> / --LEX--  :op3 (t<op3>)  :op1 (r<op1>))--TYPE--(op1(s_UNIFY_s()), op3(s_UNIFY_s()))
(s<root> / --LEX--  :ARG1 (c<s>)  :mod (c2 / common))--TYPE--(s())
(a<root> / --LEX--  :op3 (l<op3>)  :op2 (l2<op2>)  :op1 (c<op1>)  :path-of (r<mod>))--TYPE--(mod(), op1(), op2(), op3())
(p<root> / --LEX--  :ARG1 (y<o>  :ARG0-of p)  :ARG3 (a<s>)  :mode (explicitanon0 / imperative))--TYPE--(o(), s())
(r<root> / --LEX--  :ARG1 (s3<s>)  :ARG2 (b<o>)  :example-of (t<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(m2<root> / multiple  :op1 (y / --LEX--)  :duration-of (t2<mod>))--TYPE--(mod())
(p5<root> / person  :subevent-of (h<mod>)  :ARG0-of (h2 / have-org-role-91  :ARG2 (p4 / --LEX--)))--TYPE--(mod())
(e<root> / ethnic-group  :domain (p3<dom>)  :name (n / --LEX--))--TYPE--(dom())
(p4<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG3 (b<o>)  :ARG0 (y<s>))--TYPE--(o(s_UNIFY_s()), s())
(a2<root> / --LEX--  :op2 (w<op2>)  :source-of (p<mod>))--TYPE--(mod(), op2())
(g<root> / --LEX--  :ARG1 (a<s>)  :ARG2 (n2<o>)  :concession-of (r<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(d<root> / --LEX--  :year (explicitanon4 / 1942))--TYPE--()
(w<root> / --LEX--  :ARG0 (w3<s>)  :ARG1 (d2<o>)  :ARG1-of (r2 / request-confirmation-91))--TYPE--(o(), s())
(a3<root> / --LEX--  :op2 (a4<op2>)  :op1 (d<op1>)  :poss (t2<poss>)  :time-of (a<mod>))--TYPE--(mod(), op1(), op2(), poss())
(s<root> / --LEX--  :ARG1 (p<o>)  :ARG0 (a5<s>)  :accompanier-of (a<mod>))--TYPE--(mod(), o(), s())
(p7<root> / person  :domain (y<dom>)  :mod-of (c<mod>)  :ARG0-of (l / --LEX--))--TYPE--(dom(), mod())
(n6<root> / --LEX--  :name-of (j / journal  :location-of (p5<mod>)))--TYPE--(mod())
(p4<root> / --LEX--  :ARG3 (h<o2>)  :ARG0 (w<s>)  :compared-to-of (p3<mod>))--TYPE--(mod(), o2(), s())
(h<root> / --LEX--  :ARG1 (p2<s>)  :ARG3 (u<o>)  :example-of (p<mod>))--TYPE--(mod(), o(), s(s_UNIFY_mod()))
(g<root> / --LEX--  :ARG2 (t2 / thing  :compared-to-of (f<mod>)))--TYPE--(mod())
(t2<root> / temporal-quantity  :unit (c3 / --LEX--)  :extent-of (p<mod>))--TYPE--(mod())
(p4<root> / person  :ARG3-of (w2 / --LEX--  :topic-of (t2<mod>)))--TYPE--(mod())
(t2<root> / --LEX--  :quant (explicitanon2 / 4))--TYPE--()
(n2<root> / --LEX--  :name-of (t / thing  :source-of (p3<mod>)))--TYPE--(mod())
(p2<root> / place  :name (n / --LEX--))--TYPE--()
(g<root> / --LEX--  :ARG1 (e<o>)  :ARG0 (w<s>)  :manner (t2 / together))--TYPE--(o(), s())
(d<root> / --LEX--  :ARG1 (t3 / thing  :domain (t4<dom>)  :condition-of (i<mod>)))--TYPE--(dom(), mod())
(n2<root> / --LEX--  :name-of (u / university  :beneficiary-of (e<mod>)))--TYPE--(mod())
(explicitanon1<root> / Knox  :op1-of (n / --LEX--  :name-of (p2<mod>)))--TYPE--(mod())
(e<root> / --LEX--  :domain (p2<dom>)  :ARG0 (i<s>)  :ARG1 (i2<o>))--TYPE--(dom(poss_UNIFY_s()), o(poss_UNIFY_s()), s())
(h<root> / have-rel-role-91  :ARG3 (e3<s>)  :ARG2 (e / --LEX--))--TYPE--(s())
(r<root> / road  :poss (c<poss>)  :name (n2 / --LEX--)  :location-of (f<mod>))--TYPE--(mod(), poss())
(s3<root> / seismic-quantity  :quant (explicitanon2 / --LEX--)  :mod-of (i<mod>))--TYPE--(mod())
(s3<root> / --LEX--  :ARG3 (p2<s>)  :ARG5 (b2<o>))--TYPE--(o(), s())
(p4<root> / --LEX--  :ARG2-of (h / have-rel-role-91  :topic-of (v<mod>)))--TYPE--(mod())
(d<root> / date-entity  :year (explicitanon7 / --LEX--)  :duration-of (f2<mod>))--TYPE--(mod())
(p<root> / --LEX--  :ARG1 (f<o>)  :ARG3 (p2<o3>)  :ARG0 (c<s>)  :ARG2 (c3<o2>))--TYPE--(o(), o2(), o3(s_UNIFY_s()), s())
(m<root> / monetary-quantity  :quant (explicitanon4 / --LEX--)  :consist (f<mod>))--TYPE--(mod())
(r<root> / --LEX--  :ARG1 (a3<o>)  :degree-of (a<mod>))--TYPE--(mod(), o())
(a<root> / --LEX--  :ARG2 (b<o2>)  :ARG0 (g<s>)  :ARG1 (c<o>))--TYPE--(o(mod_UNIFY_s()), o2(s_UNIFY_o()), s())
(d<root> / --LEX--  :ARG3 (p2<s>)  :poss (c<poss>))--TYPE--(poss(), s())
(d2<root> / --LEX--  :ARG0 (p<s>)  :ARG2 (w<o2>)  :ARG1 (c<o>)  :purpose-of (u<mod>))--TYPE--(mod(), o(s_UNIFY_s()), o2(), s())
(n<root> / --LEX--  :name-of (s2 / sea  :direction-of (l<mod>)))--TYPE--(mod())
(o2<root> / organization  :name (n / --LEX--)  :prep-with-of (p3<mod>))--TYPE--(mod())
(d<root> / date-entity  :day (explicitanon10 / 4)  :year (explicitanon12 / --LEX--)  :time-of (s<mod>))--TYPE--(mod())
(i<root> / --LEX--  :ARG2 (a4<o2>)  :ARG1 (p2<s>)  :ARG0 (l<o>)  :purpose-of (a3<mod>))--TYPE--(mod(), o(), o2(), s())
(n3<root> / --LEX--  :name-of (w / war  :topic-of (a<mod>)))--TYPE--(mod())
(i2<root> / island  :name (n4 / --LEX--)  :part-of (l3<poss>))--TYPE--(poss())
(p2<root> / --LEX--  :ARG3 (s2<o>)  :ARG0 (p<s>)  :purpose-of (s<mod>))--TYPE--(mod(o_UNIFY_s()), o(), s())
(n3<root> / --LEX--  :name-of (t3 / thing  :compared-to-of (v<mod>)))--TYPE--(mod())
(o<root> / --LEX--  :ARG0 (g2<s>)  :ARG1 (s2<o>)  :ARG3 (h<o2>))--TYPE--(o(o_UNIFY_o2(), s_UNIFY_s()), o2(), s())
(a2<root> / --LEX--  :conj-as-if-of (t2<mod>))--TYPE--(mod())
(s<root> / slash  :quant (s4 / --LEX--)  :op1 (t3<op1>)  :op2 (t2<op2>))--TYPE--(op1(), op2())
(n<root> / --LEX--  :name-of (o / organization  :topic-of (c3<mod>)))--TYPE--(mod())
(o2<root> / --LEX--  :domain (y<dom>)  :op6 (w2<op6>)  :op1 (w<op1>)  :op3 (b<op3>)  :op2 (f<op2>)  :op5 (e<op5>)  :op4 (p3<op4>)  :condition-of (p<mod>))--TYPE--(dom(), mod(), op1(), op2(), op3(), op4(), op5(), op6())
(n2<root> / --LEX--  :name-of (e2 / empire  :mod-of (p2<mod>)))--TYPE--(mod())
(g<root> / --LEX--  :ARG0 (y / you)  :ARG4 (a2<s>)  :condition-of (s<mod>))--TYPE--(mod(), s())
(explicitanon3<root> / United  :op1-of (n3 / --LEX--  :op3 (explicitanon5<op3>)  :op2 (explicitanon4<op2>)  :op4 (explicitanon6 / America)  :name-of (c3<mod>)))--TYPE--(mod(), op2(), op3())
(t<root> / thing  :ARG1-of (g2 / --LEX--  :ARG2 (c2<s>)  :degree (m / most)))--TYPE--(s())
(n2<root> / --LEX--  :name-of (m2 / military  :location-of (s3<mod>)))--TYPE--(mod())
(a2<root> / --LEX--  :ARG2 (f<o>)  :ARG1 (y<s>)  :manner-of (r<mod>))--TYPE--(mod(), o(o_UNIFY_s()), s())
(s<root> / show  :name (n / --LEX--)  :time-of (t2<mod>))--TYPE--(mod())
(e2<root> / estate  :name (n3 / --LEX--))--TYPE--()
(explicitanon0<root> / --LEX--  :decade-of (d3 / date-entity  :mod-of (e2<mod>)))--TYPE--(mod())
(t2<root> / thing  :ARG1-of (u / --LEX--  :topic-of (w<mod>)))--TYPE--(mod())
(p3<root> / person  :ARG1-of (h2 / have-rel-role-91  :ARG2 (s / --LEX--)))--TYPE--()
(h<root> / have-rel-role-91  :domain (j<dom>)  :ARG1 (p<s>)  :ARG2 (s2 / --LEX--))--TYPE--(dom(), s())
(o<root> / --LEX--  :ARG2 (h<o>)  :ARG1 (p<s>)  :direction-of (c<mod>))--TYPE--(mod(), o(), s())
(v<root> / value-01  :ARG2 (t2 / --LEX--  :prep-for-of (e<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :ARG1 (h<s>)  :mod-of (j<mod>))--TYPE--(mod(), s(mod_UNIFY_mod()))
(r<root> / --LEX--  :polarity (explicitanon0 / -)  :ARG1 (t / thing  :manner-of (d<mod>)))--TYPE--(mod())
(o<root> / --LEX--  :ARG3 (p<s>)  :ARG1 (s<o>)  :ARG0 (w<o2>))--TYPE--(o(), o2(), s())
(o<root> / --LEX--  :ARG0 (w<s>)  :ARG1 (g<o>)  :prep-on-of (r<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(r<root> / --LEX--  :ARG1 (t / thing)  :ARG0 (i<s>)  :ARG3 (s<o2>))--TYPE--(o2(), s())
(a2<root> / --LEX--  :poss (m<poss>)  :op1 (r2<op1>)  :op2 (b<op2>)  :op3 (p<op3>)  :op4 (p2<op4>))--TYPE--(op1(o_UNIFY_o()), op2(o_UNIFY_o()), op3(o_UNIFY_o()), op4(o_UNIFY_o()), poss())
(m<root> / monetary-quantity  :unit (d / --LEX--)  :poss (p2<poss>))--TYPE--(poss())
(b2<root> / book  :poss (p2<poss>)  :name (n / --LEX--)  :location-of (a<mod>))--TYPE--(mod(), poss())
(n3<root> / --LEX--  :name-of (l / law  :instrument-of (d2<mod>)))--TYPE--(mod())
(a<root> / affect-01  :ARG0 (a2<s>)  :quant (m / --LEX--))--TYPE--(s())
(a3<root> / --LEX--  :ARG1 (d<o>)  :ARG0 (p<s>)  :prep-in-of (b<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(u2<root> / --LEX--  :ARG0 (c<s>)  :ARG2 (a<o2>)  :ARG1 (c2<o>)  :part-of (n2<poss>))--TYPE--(o(), o2(s_UNIFY_o()), poss(), s())
(n2<root> / --LEX--  :name-of (f3 / format  :mod-of (f2<mod>)))--TYPE--(mod())
(e<root> / --LEX--  :ARG1 (b<o>)  :ARG0 (p3<s>)  :topic-of (p2<mod>))--TYPE--(mod(), o(o_UNIFY_s()), s())
(explicitanon1<root> / -  :polarity-of (h2 / --LEX--  :concession-of (w<mod>)))--TYPE--(mod())
(p4<root> / --LEX--  :ARG0 (c<s>)  :ARG2 (a<o2>)  :compared-to-of (p<mod>))--TYPE--(mod(), o2(), s())
(s3<root> / --LEX--  :degree (m / most)  :duration-of (e<mod>))--TYPE--(mod())
(l<root> / location  :name (n / --LEX--)  :destination-of (d<mod>))--TYPE--(mod())
(r<root> / --LEX--  :ARG2 (y<o>)  :ARG1 (explicitanon2<s>)  :quant-of (b2<mod>))--TYPE--(mod(), o(), s())
(r<root> / --LEX--  :ARG2 (t / thing  :op1 (f<op1>)))--TYPE--(op1())
(p3<root> / --LEX--  :ARG1 (w2<o>  :ARG2-of p3)  :ARG0 (p2<s>))--TYPE--(o(), s())
(g4<root> / --LEX--  :degree (m / most)  :purpose-of (w<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (f / facility  :mod-of (r2<mod>)))--TYPE--(mod())
(e2<root> / element  :quant (s / --LEX--))--TYPE--()
(m2<root> / member  :ARG2-of (h3 / --LEX--  :ARG1 (c<s>)))--TYPE--(s())
(explicitanon3<root> / ABS  :op1-of (n2 / name  :name-of (o2 / organization  :op2-of (s2 / --LEX--  :op1 (p<op1>)  :op3 (a2<op3>)  :topic-of (s<mod>)))))--TYPE--(mod(), op1(), op3())
(explicitanon1<root> / SFB  :op1-of (n / --LEX--  :name-of (p<mod>)))--TYPE--(mod())
(i<root> / i  :ARG0-of (h2 / --LEX--  :ARG2 (m<s>)  :ARG1 (f<o>)))--TYPE--(o(), s())
(r<root> / --LEX--  :ARG0 (p2<s>)  :ARG1 (w<o>)  :example-of (u<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(n2<root> / --LEX--  :name-of (l / law  :prep-against-of (g2<mod>)))--TYPE--(mod())
(c3<root> / country-region  :poss (w2<poss>)  :name (n / --LEX--))--TYPE--(poss())
(c2<root> / --LEX--  :ARG2 (c3 / court  :mod (c4 / country  :name (n2 / name  :op1 (explicitanon4 / US)))  :mod (f / federal))  :ARG0 (p / person  :mod (l / lesbian)  :ARG0-of (h / have-org-role-91  :ARG2 (p2 / person  :ARG0-of (j / judge-01)))))--TYPE--()
(h2<root> / --LEX--  :manner-of (h<mod>)  :part-of (p<poss>))--TYPE--(mod(s_UNIFY_poss()), poss())
(s<root> / station  :name (n3 / --LEX--))--TYPE--()
(o<root> / --LEX--  :ARG2 (f<s>)  :extent-of (c<mod>))--TYPE--(mod(), s())
(p<root> / --LEX--  :ARG1 (t<o>)  :ARG3 (r2<s>  :ARG0-of p)  :purpose-of (d<mod>))--TYPE--(mod(s_UNIFY_s()), o(), s())
(d<root> / date-entity  :year (explicitanon10 / --LEX--)  :day (explicitanon8 / 10)  :time-of (h<mod>))--TYPE--(mod())
(explicitanon10<root> / 21  :day-of (d2 / date-entity  :month (explicitanon9 / 12)  :year (explicitanon8 / --LEX--)  :time-of (e<mod>)))--TYPE--(mod())
(a2<root> / --LEX--  :op3 (n5<op3>)  :op1 (p3<op1>)  :op2 (p2<op2>)  :prep-against-of (b<mod>))--TYPE--(mod(), op1(), op2(), op3())
(r2<root> / --LEX--  :ARG1 (c2<o>)  :ARG0 (g<s>)  :instrument-of (r3<mod>))--TYPE--(mod(s_UNIFY_s()), o(s_UNIFY_s()), s())
(d4<root> / --LEX--  :year (explicitanon5 / 2005)  :month (explicitanon6 / 9))--TYPE--()
(d2<root> / date-entity  :quarter (explicitanon8 / --LEX--)  :time-of (s<mod>))--TYPE--(mod())
(q<root> / --LEX--  :ARG3 (n2<s>)  :ARG2 (r<o>)  :concession-of (m<mod>))--TYPE--(mod(), o(), s())
(a2<root> / --LEX--  :op1 (t<op1>)  :op2 (c4<op2>)  :prep-under-of (o3<mod>))--TYPE--(mod(), op1(), op2())
(explicitanon2<root> / Pakistan  :op1-of (n2 / --LEX--  :name-of (c4<mod>)))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (l / local-region  :mod-of (s2<mod>)))--TYPE--(mod())
(v<root> / valley  :name (n / --LEX--))--TYPE--()
(p3<root> / --LEX--  :ARG1 (c4<s>)  :polarity (explicitanon7 / -)  :concession-of (c<mod>))--TYPE--(mod(), s())
(r2<root> / --LEX--  :ARG0 (c3<s>)  :prep-from-of (i<mod>))--TYPE--(mod(), s())
(n2<root> / --LEX--  :name-of (i / island  :mod-of (p<mod>)))--TYPE--(mod())
(d2<root> / --LEX--  :ARG2 (t<o>)  :prep-under-of (a2<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(l2<root> / --LEX--  :ARG1 (h<o>)  :condition-of (n<mod>))--TYPE--(mod(), o())
(n4<root> / --LEX--  :name-of (w2 / world-region  :destination-of (w<mod>)))--TYPE--(mod())
(p<root> / page  :name (n2 / --LEX--)  :mod-of (d3<mod>))--TYPE--(mod())
(m<root> / --LEX--  :snt2 (c<snt2>)  :snt3 (h2<snt3>)  :snt1 (s<snt1>))--TYPE--(snt1(), snt2(), snt3(s_UNIFY_snt2()))
(n2<root> / --LEX--  :name-of (i2 / island  :example-of (t3<mod>)))--TYPE--(mod())
(n3<root> / --LEX--  :name-of (f / facility  :example-of (t3<mod>)))--TYPE--(mod())
(n2<root> / --LEX--  :dayperiod-of (d / date-entity  :mod (t / today)  :time-of (g<mod>)))--TYPE--(mod())
(d3<root> / --LEX--  :quant (explicitanon3 / 8)  :unit (i2 / inch))--TYPE--()
(h<root> / --LEX--  :ARG0 (l2<mod>  :concession h)  :ARG1 (g3<o>)  :ARG2 (m2<s>))--TYPE--(mod(), o(), s())
(a<root> / --LEX--  :domain (t2<dom>)  :op2 (i2<op2>)  :op1 (i3<op1>))--TYPE--(dom(), op1(o_UNIFY_o()), op2(o_UNIFY_o()))
(s<root> / --LEX--  :op1 (c<op1>)  :op2 (c2 / country  :name (n2 / name  :op1 (explicitanon4 / UK)))  :op3 (m<op3>))--TYPE--(op1(), op3())
(explicitanon2<root> / Democrat  :op2-of (n / --LEX--  :op1 (explicitanon1<op1>)  :name-of (p<mod>)))--TYPE--(mod(), op1())
(c2<root> / --LEX--  :ARG1 (e<s>)  :ARG4 (c3<o>)  :mod-of (b<mod>))--TYPE--(mod(), o(), s(mod_UNIFY_mod()))
(n4<root> / --LEX--  :name-of (l2 / lake  :location-of (h<mod>)))--TYPE--(mod())
(m3<root> / most  :degree-of (g / --LEX--  :extent-of (c4<mod>)))--TYPE--(mod())
(p2<root> / person  :example-of (i<mod>)  :ARG0-of (h / have-rel-role-91  :ARG2 (u / --LEX--)))--TYPE--(mod())
(m<root> / meet-03  :name (n5 / --LEX--)  :ARG1 (g2<o>)  :ARG0 (g<s>))--TYPE--(o(), s())
(r2<root> / --LEX--  :poss (p<poss>)  :time-of (t<mod>))--TYPE--(mod(s_UNIFY_poss()), poss())
(s<root> / state  :name (n / --LEX--)  :example-of (s4<mod>))--TYPE--(mod())
(t2<root> / --LEX--  :domain (t3<dom>)  :ARG1 (p<s>)  :ARG2 (g<o>)  :subevent-of (n3<mod>))--TYPE--(dom(), mod(), o(), s(mod_UNIFY_dom()))
(g<root> / government-organization  :name (n / --LEX--)  :example-of (t3<mod>))--TYPE--(mod())
(a2<root> / aircraft  :name (n / --LEX--)  :mod-of (s<mod>))--TYPE--(mod())
(s<root> / --LEX--  :ARG1 (n2<o>)  :ARG0 (n<s>)  :domain (t<dom>)  :subevent-of (p2<mod>))--TYPE--(dom(), mod(), o(), s())
(d<root> / --LEX--  :ARG1 (l<o>  :time d))--TYPE--(o())
(s<root> / --LEX--  :op3 (t<op3>)  :op2 (n / neoconservative)  :op1 (l<op1>)  :mod-of (p<mod>))--TYPE--(mod(), op1(), op3())
(g<root> / --LEX--  :ARG1 (a2<s>)  :ARG3 (c<o>)  :ARG4 (o<o2>)  :purpose-of (l<mod>))--TYPE--(mod(), o(), o2(), s())
(p<root> / --LEX--  :ARG1 (s<o>)  :ARG3 (b<s>)  :ARG2 (a<o2>))--TYPE--(o(s_UNIFY_s()), o2(), s())
(l<root> / --LEX--  :ARG1 (y<s>)  :ARG0 (j<o>))--TYPE--(o(poss_UNIFY_s()), s())
(h<root> / have-org-role-91  :ARG2 (j / --LEX--)  :ARG0 (p2<s>)  :ARG3 (m2<o2>))--TYPE--(o2(s_UNIFY_s()), s())
(t2<root> / --LEX--  :ARG0 (g<s>)  :ARG2 (i<o>)  :ARG3 (i2<o2>))--TYPE--(o(), o2(poss_UNIFY_o()), s())
(y3<root> / you  :ARG0-of (w2 / --LEX--  :ARG1 (k<s>)  :condition-of (s<mod>)))--TYPE--(mod(), s())
(v<root> / volume-quantity  :unit (g / --LEX--)  :mod-of (t<mod>))--TYPE--(mod())
(explicitanon2<root> / News  :op2-of (n / --LEX--  :op1 (explicitanon1<op1>)  :name-of (p2<mod>)))--TYPE--(mod(), op1())
(l<root> / --LEX--  :mode (explicitanon0 / expressive)  :manner (l2 / loud)  :ARG0 (i<s>))--TYPE--(s())
(n4<root> / --LEX--  :name-of (s2 / small-molecule  :topic-of (a<mod>)))--TYPE--(mod())
(s2<root> / --LEX--  :ARG2 (g2<o>)  :ARG1 (y<s>)  :mod-of (l<mod>))--TYPE--(mod(), o(poss_UNIFY_s()), s())
(c<root> / child  :name (n2 / --LEX--))--TYPE--()
(f<root> / --LEX--  :ARG2 (p2<o2>)  :ARG1 (r<o>)  :ARG4 (c<o4>)  :ARG3 (o<o3>)  :ARG0 (f2<s>))--TYPE--(o(s_UNIFY_o2()), o2(), o3(), o4(), s())
(c<root> / canal  :name (n2 / --LEX--)  :path-of (g<mod>))--TYPE--(mod())
(s<root> / school  :name (n2 / --LEX--)  :mod-of (g<mod>))--TYPE--(mod())
(explicitanon1<root> / -  :polarity-of (i / --LEX--  :degree-of (w2<mod>)))--TYPE--(mod())
(r<root> / --LEX--  :ARG2 (a<o>)  :ARG1 (t2<s>)  :conj-as-if-of (p<mod>))--TYPE--(mod(), o(), s())
(g<root> / --LEX--  :ARG2 (d<o>)  :degree (m / more))--TYPE--(o(s_UNIFY_s()))
(t<root> / thing  :name (n3 / --LEX--)  :source-of (f3<mod>))--TYPE--(mod())
(t<root> / --LEX--  :unit (y / year))--TYPE--()
(r2<root> / region  :name (n3 / --LEX--)  :mod-of (p2<mod>))--TYPE--(mod())
(s2<root> / seismic-quantity  :quant (explicitanon0 / --LEX--)  :poss (e2<poss>))--TYPE--(poss())
(o<root> / --LEX--  :time (n / now)  :ARG2 (w<o>)  :ARG1 (i<s>))--TYPE--(o(s_UNIFY_s()), s())
(r<root> / rate-entity-91  :ARG2 (d / date-entity  :weekday (s / --LEX--))  :frequency-of (w<mod>))--TYPE--(mod())
(r<root> / rate-entity-91  :ARG2 (d2 / date-entity  :dayperiod (d8 / --LEX--))  :frequency-of (o4<mod>))--TYPE--(mod())
(a4<root> / aircraft-type  :consist (f<mod>)  :name (n6 / --LEX--))--TYPE--(mod())
(t<root> / thing  :ARG2-of (f / --LEX--  :ARG1 (a<o>)  :ARG0 (w<s>)))--TYPE--(o(s_UNIFY_s()), s())
(p<root> / person  :consist (g<mod>)  :ARG0-of (h / have-org-role-91  :ARG2 (m / --LEX--)))--TYPE--(mod())
(w<root> / --LEX--  :ARG3 (n4<o>  :ARG0-of w)  :ARG1 (e<s>))--TYPE--(o(), s(s_UNIFY_o()))
(a2<root> / --LEX--  :op2 (c3<op2>)  :op1 (w<op1>)  :part-of (c2<poss>)  :location-of (c<mod>))--TYPE--(mod(), op1(), op2(), poss())
(s2<root> / system  :name (n6 / --LEX--)  :poss (c4<poss>)  :mod-of (a<mod>))--TYPE--(mod(), poss())
(w<root> / worship-place  :name (n6 / --LEX--)  :destination-of (p4<mod>))--TYPE--(mod())
(p<root> / --LEX--  :ARG1 (d<s>)  :ARG1-of (s / stall-01))--TYPE--(s())
(n2<root> / --LEX--  :op1 (explicitanon6 / Britain)  :name-of (c<mod>))--TYPE--(mod())
(d4<root> / distance-quantity  :unit (k2 / --LEX--)  :quant-of (r2 / relative-position  :source-of (s<mod>)))--TYPE--(mod())
(a3<root> / aircraft-type  :name (n7 / --LEX--)  :purpose-of (p<mod>))--TYPE--(mod())
(p<root> / possible-01  :ARG1 (d2 / --LEX--  :ARG1 (u<s>)  :ARG2 (u2<o>)))--TYPE--(o(), s())
(p2<root> / --LEX--  :ARG3 (t<s>)  :ARG2 (m2<o>))--TYPE--(o(poss_UNIFY_s()), s())
(b<root> / --LEX--  :ARG0 (p<s>)  :ARG1 (b2<o>)  :ARG3 (f2<o2>)  :subevent-of (s2<mod>))--TYPE--(mod(), o(), o2(), s())
(t<root> / theater  :name (n / --LEX--)  :location-of (p<mod>))--TYPE--(mod())
(m<root> / --LEX--  :ARG0 (i<s>)  :ARG1 (g<o>)  :concession-of (t<mod>))--TYPE--(mod(o2_UNIFY_s()), o(), s())
(explicitanon3<root> / NW35  :op1-of (n2 / --LEX--  :name-of (p3<mod>)))--TYPE--(mod())
(p3<root> / product  :poss (i<poss>)  :name (n4 / --LEX--))--TYPE--(poss())
(h3<root> / have-rel-role-91  :ARG2 (f / --LEX--)  :ARG3 (f2<o2>)  :ARG1 (i<s>))--TYPE--(o2(), s())
(m3<root> / movie  :name (n2 / --LEX--))--TYPE--()
(explicitanon2<root> / Britain  :op2-of (n / --LEX--  :op1 (explicitanon1<op1>)  :name-of (c<mod>)))--TYPE--(mod(), op1())
(c3<root> / --LEX--  :ARG2 (p3<o>)  :mod-of (s2<mod>))--TYPE--(mod(), o())
(n2<root> / --LEX--  :op1 (explicitanon4 / Palestine)  :name-of (c4<mod>))--TYPE--(mod())
(n3<root> / --LEX--  :name-of (l3 / location  :source-of (g<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :op3 (s3<op3>)  :op4 (e<op4>)  :op2 (c2<op2>)  :op5 (a2<op5>)  :op1 (n<op1>)  :part-of (c4<poss>))--TYPE--(op1(), op2(), op3(), op4(), op5(), poss())
(e<root> / ethnic-group  :name (n / --LEX--)  :prep-as-of (d<mod>))--TYPE--(mod())
(s2<root> / --LEX--  :poss (p2<poss>)  :op2 (c<op2>))--TYPE--(op2(), poss())
(b2<root> / --LEX--  :ARG1 (e<s>)  :polarity (explicitanon0 / -)  :condition-of (o<mod>))--TYPE--(mod(), s())
(h<root> / --LEX--  :ARG1 (o<s>)  :ARG2 (t2<o>)  :condition-of (e2<mod>))--TYPE--(mod(mod_UNIFY_s()), o(), s())
(r2<root> / --LEX--  :ARG2 (d3<o>)  :ARG1 (s2<s>)  :ARG1-of (p / possible-01))--TYPE--(o(), s())
(t4<root> / temporal-quantity  :quant (explicitanon1 / --LEX--)  :unit (s2 / second))--TYPE--()
(l2<root> / --LEX--  :ARG0 (p<o>)  :ARG1 (c3<s>)  :extent-of (l<mod>))--TYPE--(mod(), o(), s())
(t3<root> / thing  :ARG2-of (s / --LEX--  :ARG1 (t2 / thing  :time-of (a<mod>))))--TYPE--(mod())
(p<root> / political-party  :domain (p2<dom>)  :name (n5 / --LEX--)  :condition-of (i<mod>))--TYPE--(dom(), mod())
(p3<root> / --LEX--  :ARG2 (l<o>)  :ARG0 (w<s>)  :extent-of (r<mod>))--TYPE--(mod(), o(), s())
(g<root> / --LEX--  :ARG4 (t3 / thing))--TYPE--()
(a<root> / --LEX--  :op1 (e / event)  :time-of (a3<mod>))--TYPE--(mod())
(c2<root> / canvas  :name (n3 / --LEX--)  :poss (p<poss>))--TYPE--(poss())
(n3<root> / --LEX--  :name-of (g3 / government-organization  :example-of (g2<mod>)))--TYPE--(mod())
(r<root> / --LEX--  :ARG0 (o2<s>)  :ARG2 (p<o2>)  :ARG1 (a<o>)  :purpose-of (a2<mod>))--TYPE--(mod(), o(poss_UNIFY_o2()), o2(), s())
(m2<root> / most  :degree-of (c2 / --LEX--  :ARG2 (r<o>)))--TYPE--(o(s_UNIFY_s()))
(r<root> / rate-entity-91  :ARG2 (m / --LEX--)  :ARG3 (e<s>)  :time-of (p<mod>))--TYPE--(mod(), s())
(n2<root> / natural-disaster  :name (n3 / --LEX--)  :time-of (b<mod>))--TYPE--(mod())
(m2<root> / monetary-quantity  :unit (b2 / --LEX--)  :topic-of (s3<mod>))--TYPE--(mod())
(a3<root> / agency  :quant (explicitanon2 / --LEX--))--TYPE--()
(r<root> / --LEX--  :ARG1 (c<o>)  :ARG0 (p<s>)  :time-of (s2<mod>))--TYPE--(mod(), o(o_UNIFY_s()), s())
(c4<root> / company  :name (n / --LEX--)  :example-of (c<mod>))--TYPE--(mod())
(d2<root> / --LEX--  :ARG0 (p<s>)  :ARG1 (a3<o>)  :subevent-of (b2<mod>))--TYPE--(mod(poss_UNIFY_s()), o(s_UNIFY_s()), s())
(h<root> / --LEX--  :ARG1 (p3 / person)  :ARG2 (f<s>))--TYPE--(s())
(t2<root> / temporal-quantity  :quant (explicitanon4 / --LEX--)  :poss (p2<poss>)  :compared-to-of (h<mod>))--TYPE--(mod(), poss())
(p5<root> / --LEX--  :instrument-of (r<mod>)  :ARG2-of (h2 / have-org-role-91))--TYPE--(mod())
(t<root> / temporal-quantity  :poss (p2<poss>)  :unit (m / --LEX--)  :subevent-of (l<mod>))--TYPE--(mod(poss_UNIFY_poss()), poss())
(n2<root> / --LEX--  :name-of (d / drug  :mod-of (f<mod>)))--TYPE--(mod())
(b2<root> / --LEX--  :ARG3 (c<s>)  :location-of (g3<mod>))--TYPE--(mod(), s())
(m<root> / money  :quant (m6 / --LEX--))--TYPE--()
(n2<root> / --LEX--  :op2 (explicitanon5<op2>)  :op1 (explicitanon4 / Democratic)  :name-of (p3<mod>))--TYPE--(mod(), op2())
(g<root> / --LEX--  :ARG4 (m3<o2>)  :ARG1 (m<s>)  :ARG3 (m2<o>)  :example-of (f<mod>))--TYPE--(mod(), o(), o2(), s())
(m3<root> / media  :quant (m / --LEX--))--TYPE--()
(c<root> / --LEX--  :ARG0 (p<s>)  :ARG1 (p2<o>)  :ARG2 (c2<o2>)  :example-of (t<mod>))--TYPE--(mod(), o(), o2(), s())
(o<root> / --LEX--  :ARG0 (c2<s>)  :ARG3 (c4<o2>)  :ARG1 (c3<o>))--TYPE--(o(), o2(), s(mod_UNIFY_o2()))
(r2<root> / rate-entity-91  :ARG2 (w / --LEX--)  :ARG1 (o3<s>)  :frequency-of (s3<mod>))--TYPE--(mod(), s())
(r<root> / --LEX--  :ARG2 (t3<o2>)  :ARG1 (p2<o>)  :ARG0 (p4<s>)  :location-of (p3<mod>))--TYPE--(mod(), o(), o2(s_UNIFY_o()), s())
(l<root> / level  :name (n / --LEX--)  :mod-of (y<mod>))--TYPE--(mod())
(h<root> / --LEX--  :mode (explicitanon2 / imperative)  :ARG0 (y / you)  :concession-of (b<mod>))--TYPE--(mod())
(h<root> / --LEX--  :ARG0 (a3<s>)  :consist (a2<mod>))--TYPE--(mod(), s())
(t<root> / thing  :domain (t4<dom>)  :ARG1-of (g2 / --LEX--  :degree (m / most)))--TYPE--(dom())
(u<root> / university  :name (n / --LEX--)  :topic-of (f<mod>))--TYPE--(mod())
(w2<root> / --LEX--  :ARG2 (o<o>)  :domain (f<dom>)  :ARG1 (u<s>))--TYPE--(dom(), o(s_UNIFY_s()), s(mod_UNIFY_dom()))
(d2<root> / distance-quantity  :unit (f2 / --LEX--)  :domain (i2<dom>))--TYPE--(dom())
(p3<root> / --LEX--  :ARG3 (t / thing))--TYPE--()
(n2<root> / --LEX--  :name-of (n / natural-object  :mod-of (s5<mod>)))--TYPE--(mod())
(f<root> / --LEX--  :ARG2-of (h2 / have-rel-role-91  :ARG3 (f2<o3>)  :ARG0 (c2<s>)  :ARG1 (c3<o>)  :manner-of (c<mod>)))--TYPE--(mod(), o(), o3(), s())
(n6<root> / --LEX--  :quant-of (b3 / billionaire))--TYPE--()
(s2<root> / --LEX--  :ARG1 (p2<o>)  :ARG3 (h2<o2>)  :ARG0 (e<s>))--TYPE--(o(), o2(poss_UNIFY_o()), s())
(h2<root> / hotel  :name (n2 / --LEX--))--TYPE--()
(a<root> / --LEX--  :ARG2 (a2<s>)  :prep-to-of (s<mod>))--TYPE--(mod(), s())
(n3<root> / --LEX--  :name-of (c2 / continent  :destination-of (t2<mod>)))--TYPE--(mod())
(w<root> / war-01  :quant (explicitanon2 / --LEX--)  :subset-of (w2<mod>))--TYPE--(mod())
(t<root> / --LEX--  :quant (explicitanon2 / 6)  :unit (m / month))--TYPE--()
(o<root> / --LEX--  :op4 (e<op4>)  :op3 (c2<op3>)  :op1 (p2<op1>)  :op2 (c3<op2>)  :mod-of (k<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4())
(l2<root> / law  :name (n6 / --LEX--)  :prep-under-of (d3<mod>))--TYPE--(mod())
(t<root> / territory  :name (n / --LEX--)  :mod-of (p<mod>))--TYPE--(mod())
(m<root> / --LEX--  :ARG1 (d2<s>)  :ARG2 (c3<o>)  :purpose-of (n<mod>))--TYPE--(mod(s_UNIFY_o()), o(), s())
(p2<root> / possible-01  :ARG1 (s / --LEX--  :mod-of (d3<mod>)))--TYPE--(mod())
(d<root> / --LEX--  :ARG2 (b<o>)  :ARG3 (m<o2>)  :ARG0 (c2<s>))--TYPE--(o(s_UNIFY_s()), o2(), s())
(s2<root> / state  :name (n / --LEX--)  :part-of (w<poss>)  :location-of (r<mod>))--TYPE--(mod(), poss())
(f<root> / --LEX--  :poss (c4<poss>)  :prep-with-of (p3<mod>))--TYPE--(mod(), poss())
(n2<root> / --LEX--  :name-of (c2 / continent  :source-of (c<mod>)))--TYPE--(mod())
(s2<root> / --LEX--  :season-of (d3 / date-entity  :mod-of (s<mod>)))--TYPE--(mod())
(p4<root> / person  :ARG1-of (r2 / --LEX--)  :example-of (p2<mod>))--TYPE--(mod())
(p<root> / person  :quant (b2 / --LEX--  :op1 (explicitanon2<op1>)  :op2 (explicitanon3<op2>)))--TYPE--(op1(), op2())
(s4<root> / --LEX--  :ARG2 (s2 / string-entity  :value (explicitanon0 / L))  :ARG1 (s3<s>))--TYPE--(s())
(l<root> / league  :name (n / --LEX--))--TYPE--()
(o2<root> / --LEX--  :ARG2-of (h2 / have-org-role-91  :ARG0 (h / he)  :range-of (y<mod>)))--TYPE--(mod())
(h3<root> / have-org-role-91  :ARG0 (p2<s>)  :ARG2 (p / --LEX--)  :time-of (a3<mod>))--TYPE--(mod(), s())
(explicitanon1<root> / --LEX--  :ARG1-of (r2 / rate-entity-91  :ARG2 (m2<o2>)  :ARG3 (h<s>)  :manner-of (d<mod>)))--TYPE--(mod(), o2(), s())
(p3<root> / --LEX--  :polarity (explicitanon5 / -)  :condition-of (e<mod>))--TYPE--(mod())
(i<root> / --LEX--  :ARG1 (e<o>)  :ARG0 (h<s>)  :prep-with-of (s<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(b2<root> / book  :name (n2 / --LEX--)  :beneficiary-of (l<mod>))--TYPE--(mod())
(explicitanon0<root> / -  :polarity-of (o / organization  :name (n / --LEX--)  :mod-of (p2<mod>)))--TYPE--(mod())
(explicitanon0<root> / --LEX--  :month-of (d / date-entity  :mod-of (b<mod>)))--TYPE--(mod())
(c3<root> / company  :name (n / --LEX--)  :prep-against-of (r<mod>))--TYPE--(mod())
(s<root> / --LEX--  :ARG2 (y<o>)  :ARG3 (s2<o2>)  :ARG1 (y2<s>)  :manner-of (p<mod>))--TYPE--(mod(), o(), o2(), s())
(a<root> / --LEX--  :domain (t5<dom>)  :ARG1 (p2<s>)  :ARG3 (a2<o>)  :purpose-of (t3<mod>))--TYPE--(dom(), mod(), o(), s())
(s2<root> / ship  :name (n2 / --LEX--)  :consist (c<mod>))--TYPE--(mod())
(n3<root> / --LEX--  :name-of (g / game  :time-of (p4<mod>)))--TYPE--(mod())
(g2<root> / --LEX--  :ARG0 (h2<s>)  :ARG1 (r<o>)  :ARG2 (o<o2>))--TYPE--(o(s_UNIFY_o2()), o2(s_UNIFY_s()), s())
(i<root> / --LEX--  :ARG3 (a<s>)  :ARG2 (g2 / guy)  :ARG1 (g<o>))--TYPE--(o(), s())
(l<root> / --LEX--  :ARG0 (o<s>)  :conj-as-if-of (t<mod>))--TYPE--(mod(), s())
(o3<root> / --LEX--  :ARG0 (y<s>)  :ARG2 (c<o2>)  :ARG1 (h<o>))--TYPE--(o(o_UNIFY_o2()), o2(poss_UNIFY_s()), s())
(g<root> / --LEX--  :ARG4 (w<o2>)  :ARG1 (f2<s>)  :ARG2 (f<o>))--TYPE--(o(), o2(s_UNIFY_s()), s())
(p2<root> / percentage-entity  :consist (g2<mod>)  :value (explicitanon2 / --LEX--))--TYPE--(mod())
(explicitanon1<root> / --LEX--  :value-of (p / percentage-entity  :consist (g<mod>)))--TYPE--(mod())
(t6<root> / thing  :ARG0-of (p2 / --LEX--)  :prep-for-of (t5<mod>))--TYPE--(mod())
(a<root> / attorney  :ARG2-of (h2 / --LEX--  :ARG1 (d<o>)  :ARG0 (p<s>)))--TYPE--(o(), s())
(n<root> / newpaper  :name (n2 / --LEX--))--TYPE--()
(explicitanon8<root> / --LEX--  :quarter-of (d2 / date-entity  :time-of (r3<mod>)))--TYPE--(mod())
(g<root> / government-organization  :unit (b / --LEX--)  :ARG0-of (g2 / govern-01))--TYPE--()
(n2<root> / nationality  :name (n3 / --LEX--))--TYPE--()
(p3<root> / --LEX--  :ARG0-of (d / depend-01  :polarity (explicitanon0 / -)))--TYPE--()
(explicitanon10<root> / States  :op2-of (n5 / --LEX--  :op1 (explicitanon9 / United)  :name-of (c2<mod>)))--TYPE--(mod())
(c2<root> / --LEX--  :ARG4 (h<o2>)  :ARG1 (y<s>)  :ARG3 (w<o>)  :time-of (a2<mod>))--TYPE--(mod(), o(), o2(), s())
(a3<root> / --LEX--  :ARG2 (a<o>)  :ARG3 (p<s>)  :purpose-of (m<mod>))--TYPE--(mod(), o(), s())
(r<root> / rate-entity-91  :ARG2 (t<o>)  :ARG4 (p3 / --LEX--)  :ARG1 (m<s>))--TYPE--(o(), s())
(a<root> / --LEX--  :op2 (a2<op2>)  :condition-of (g<mod>))--TYPE--(mod(), op2())
(c2<root> / complain-01  :quant (s / --LEX--))--TYPE--()
(e<root> / --LEX--  :poss (c3<poss>)  :prep-into-of (p2<mod>))--TYPE--(mod(s_UNIFY_poss()), poss())
(b<root> / --LEX--  :ARG1 (p2 / person  :topic-of (r<mod>)))--TYPE--(mod())
(g2<root> / --LEX--  :ARG4 (t<s>)  :ARG0 (i<o2>))--TYPE--(o2(), s())
(c<root> / country  :name (n / --LEX--)  :instrument-of (o<mod>))--TYPE--(mod())
(u2<root> / --LEX--  :polarity (explicitanon0 / -)  :ARG1 (c2<o>)  :ARG0 (p<s>)  :time-of (t<mod>))--TYPE--(mod(), o(), s())
(c3<root> / --LEX--  :ARG1 (c4<s>)  :ARG0 (t4 / thing)  :example-of (c2<mod>))--TYPE--(mod(), s())
(c4<root> / --LEX--  :ARG1 (s3<o>)  :ARG0 (h2<s>)  :example-of (p<mod>))--TYPE--(mod(), o(), s(s_UNIFY_o()))
(a2<root> / --LEX--  :op1 (h2<op1>)  :op2 (a3<op2>)  :op3 (v<op3>)  :condition-of (i<mod>))--TYPE--(mod(), op1(s_UNIFY_s()), op2(s_UNIFY_s()), op3(s_UNIFY_s()))
(t2<root> / --LEX--  :ARG3 (p<o>)  :ARG0 (y<s>)  :manner-of (l<mod>))--TYPE--(mod(), o(), s())
(s2<root> / string-entity  :value (explicitanon5 / --LEX--)  :instrument-of (s<mod>))--TYPE--(mod())
(p<root> / --LEX--  :ARG1 (j<o>)  :ARG0 (a<s>)  :compared-to-of (c<mod>))--TYPE--(mod(s_UNIFY_s()), o(), s())
(f2<root> / forest  :name (n5 / --LEX--))--TYPE--()
(p<root> / publication  :name (n2 / --LEX--)  :topic-of (d<mod>))--TYPE--(mod())
(t<root> / thing  :quant (explicitanon2 / --LEX--)  :location-of (e<mod>))--TYPE--(mod())
(r<root> / --LEX--  :ARG3 (t3<o2>)  :ARG0 (p<o>)  :ARG1 (t<s>))--TYPE--(o(), o2(dom_UNIFY_s()), s())
(h2<root> / have-org-role-91  :ARG2 (o / organization  :name (n / --LEX--))  :ARG0 (m<s>))--TYPE--(s())
(explicitanon0<root> / 77  :quant-of (t2 / temporal-quantity  :unit (y / --LEX--)  :age-of (p<mod>)))--TYPE--(mod())
(p2<root> / peace  :ARG1-of (m / --LEX--  :ARG0 (p<s>)))--TYPE--(s())
(v<root> / --LEX--  :ARG1-of (r / rate-entity-91  :ARG2 (t3<s>)  :mod-of (p3<mod>)))--TYPE--(mod(), s())
(r2<root> / --LEX--  :ARG2 (t4 / temporal-quantity  :quant (explicitanon3 / 1)  :unit (w4 / week))  :ARG1 (a<s>))--TYPE--(s())
(explicitanon3<root> / --LEX--  :quant-of (m2 / megabyte  :mod-of (d2<mod>)))--TYPE--(mod())
(o<root> / --LEX--  :op2 (s<op2>)  :op1 (p2<op1>)  :time-of (s2<mod>))--TYPE--(mod(), op1(), op2(s_UNIFY_op1()))
(d<root> / --LEX--  :ARG3 (s2<s>)  :extent-of (v<mod>))--TYPE--(mod(), s())
(s2<root> / --LEX--  :ARG0 (h<s>)  :ARG2 (e<o>)  :purpose-of (i2<mod>))--TYPE--(mod(), o(poss_UNIFY_s()), s())
(p2<root> / person  :ARG1-of (i / --LEX--  :ARG2 (o<o2>)  :ARG0 (p<s>)  :purpose-of (b<mod>)))--TYPE--(mod(), o2(), s())
(s<root> / --LEX--  :ARG0 (g<s>)  :ARG1 (s2<o>)  :ARG2 (a<o2>))--TYPE--(o(s_UNIFY_s()), o2(poss_UNIFY_s()), s())
(p3<root> / person  :ARG2-of (h / have-org-role-91  :ARG0 (p2<s>))  :ARG1-of (e2 / --LEX--))--TYPE--(s())
(d2<root> / date-entity  :day (explicitanon15 / 22)  :year (explicitanon13 / --LEX--)  :time-of (u<mod>))--TYPE--(mod())
(a<root> / --LEX--  :ARG1 (c3<o>)  :ARG2 (g3<o2>)  :ARG0 (g<s>)  :medium-of (m<mod>))--TYPE--(mod(), o(), o2(), s())
(c4<root> / country-region  :name (n2 / --LEX--)  :part-of (c2<poss>))--TYPE--(poss())
(n2<root> / --LEX--  :name-of (c2 / continent  :prep-with-of (h<mod>)))--TYPE--(mod())
(n4<root> / newspaper  :name (n5 / --LEX--)  :location-of (m<mod>))--TYPE--(mod())
(explicitanon10<root> / 12  :month-of (d / date-entity  :year (explicitanon9 / --LEX--)  :day (explicitanon11 / 28)  :time-of (s<mod>)))--TYPE--(mod())
(c3<root> / --LEX--  :ARG1 (f<o>)  :ARG0 (c2<s>)  :ARG3 (p<o2>)  :purpose-of (e2<mod>))--TYPE--(mod(), o(), o2(poss_UNIFY_s()), s())
(d2<root> / date-entity  :unit (y / --LEX--)  :duration-of (e<mod>))--TYPE--(mod())
(l<root> / --LEX--  :ARG1 (c2<o>  :ARG2-of l)  :ARG1 (e<s>))--TYPE--(o(), s())
(s<root> / soldier  :quant (explicitanon0 / --LEX--)  :poss (m2<poss>))--TYPE--(poss())
(a3<root> / airport  :poss (c<poss>)  :name (n / --LEX--))--TYPE--(poss())
(h2<root> / have-rel-role-91  :ARG1 (h<o>)  :ARG3 (f3<s>)  :ARG2 (f2 / --LEX--))--TYPE--(o(), s())
(p3<root> / pet  :quant (explicitanon1 / --LEX--))--TYPE--()
(p<root> / --LEX--  :ARG2 (o<o2>)  :ARG0 (i<s>)  :ARG1 (h2<o>)  :mod-of (s<mod>))--TYPE--(mod(), o(poss_UNIFY_s()), o2(), s())
(p<root> / --LEX--  :ARG2-of (h2 / have-org-role-91  :ARG0 (w3<s>)  :topic-of (i2<mod>)))--TYPE--(mod(), s())
(p3<root> / --LEX--  :mod (r2 / religious-group  :name (n2 / name  :op1 (explicitanon4 / Islam))))--TYPE--()
(t2<root> / thing  :ARG2-of (i2 / --LEX--  :ARG1 (t / thing  :concession-of (p<mod>))))--TYPE--(mod())
(g<root> / --LEX--  :ARG1 (l<o>)  :ARG0 (s<s>)  :instrument-of (h<mod>))--TYPE--(mod(o2_UNIFY_s()), o(s_UNIFY_s()), s())
(s4<root> / sports-facility  :name (n2 / --LEX--)  :location-of (p2<mod>))--TYPE--(mod())
(r3<root> / rant-01  :quant (m2 / multiple  :op1 (explicitanon3 / --LEX--)))--TYPE--()
(t5<root> / thing  :prep-with-of (s3<mod>)  :ARG1-of (h / --LEX--  :degree (m2 / more)))--TYPE--(mod())
(a<root> / --LEX--  :op1 (p<op1>)  :op2 (s<op2>)  :op3 (i<op3>)  :topic-of (g<mod>))--TYPE--(mod(), op1(s_UNIFY_s()), op2(s_UNIFY_s()), op3(s_UNIFY_s()))
(e<root> / --LEX--  :ARG1 (i<s>)  :ARG1-of (o / open-06))--TYPE--(s())
(w2<root> / --LEX--  :ARG0 (y<s>)  :ARG1 (o2<o>  :compared-to w2))--TYPE--(o(), s())
(r2<root> / --LEX--  :ARG1 (f2<s>)  :polarity (explicitanon5 / -)  :ARG1-of (p3 / possible-01))--TYPE--(s())
(b2<root> / broadcast-program  :quant (e2 / --LEX--))--TYPE--()
(p<root> / philosophy  :name (n / --LEX--)  :mod-of (t<mod>))--TYPE--(mod())
(p2<root> / --LEX--  :ARG1 (p<s>)  :ARG0 (w<o>)  :purpose-of (n<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(s<root> / --LEX--  :ARG0 (w<o>)  :ARG1 (y<s>)  :ARG3 (f<o2>))--TYPE--(o(), o2(o_UNIFY_s()), s())
(l<root> / --LEX--  :ARG0 (p<s>)  :ARG1 (s2<o>)  :ARG3 (t2<o2>)  :consist (d2<mod>))--TYPE--(mod(), o(), o2(), s())
(a<root> / --LEX--  :ARG1 (d2<o>)  :ARG0 (p<s>)  :destination-of (d<mod>))--TYPE--(mod(), o(), s(mod_UNIFY_mod()))
(t<root> / thing  :domain (a2<dom>)  :ARG1-of (r2 / --LEX--  :ARG1-of (p3 / possible-01  :polarity (explicitanon4 / -))))--TYPE--(dom())
(n3<root> / --LEX--  :name-of (s2 / state  :source-of (p4<mod>)))--TYPE--(mod())
(w<root> / world-region  :name (n2 / --LEX--)  :part-of (c<poss>))--TYPE--(poss())
(explicitanon2<root> / socialism  :op2-of (n4 / --LEX--  :op1 (explicitanon1<op1>)  :name-of (p2<mod>)))--TYPE--(mod(), op1())
(t<root> / threaten-01  :ARG1 (i2<s>)  :quant (explicitanon9 / --LEX--))--TYPE--(s())
(n3<root> / --LEX--  :degree (m / most)  :location-of (s4<mod>))--TYPE--(mod())
(c3<root> / care-03  :quant (explicitanon1 / --LEX--)  :ARG1 (h2 / health))--TYPE--()
(r<root> / reactor  :quant (explicitanon0 / --LEX--)  :location-of (d<mod>))--TYPE--(mod())
(s3<root> / --LEX--  :ARG2 (u<s>)  :ARG1 (s2<o>)  :purpose-of (p<mod>))--TYPE--(mod(), o(), s(s_UNIFY_o()))
(n3<root> / --LEX--  :op2 (explicitanon7 / War)  :op1 (explicitanon6 / World)  :op3 (explicitanon8 / II)  :name-of (w2<mod>))--TYPE--(mod())
(g<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG1 (y<s>)  :ARG4 (g2<o>))--TYPE--(o(s_UNIFY_s()), s())
(f2<root> / --LEX--  :quant-of (m / multiple  :op1 (t<op1>)))--TYPE--(op1())
(d4<root> / date-entity  :year (explicitanon2 / --LEX--)  :day (explicitanon4 / 2)  :time-of (t<mod>))--TYPE--(mod())
(p3<root> / person  :quant (s2 / --LEX--)  :prep-against-of (a<mod>))--TYPE--(mod())
(h<root> / --LEX--  :part-of (o<poss>)  :manner-of (c<mod>))--TYPE--(mod(), poss())
(w<root> / --LEX--  :ARG2 (d<o>)  :ARG0 (c3<s>)  :time-of (c<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(a<root> / --LEX--  :op2 (d2<op2>)  :op1 (h<op1>)  :subevent-of (a2<mod>))--TYPE--(mod(), op1(o_UNIFY_o(), s_UNIFY_s()), op2(o_UNIFY_o(), s_UNIFY_s()))
(s2<root> / --LEX--  :ARG1 (h<o>)  :ARG2 (c3<o2>)  :ARG0 (c<s>)  :topic-of (p2<mod>))--TYPE--(mod(), o(), o2(), s(mod_UNIFY_mod()))
(n5<root> / --LEX--  :name-of (t2 / treaty  :example-of (r<mod>)))--TYPE--(mod())
(d<root> / date-entity  :month (explicitanon1 / 7)  :day (explicitanon2 / --LEX--)  :time-of (a<mod>))--TYPE--(mod())
(c<root> / --LEX--  :ARG1 (e / extremism))--TYPE--()
(e<root> / --LEX--  :ARG1 (d3<s>)  :purpose-of (d2<mod>))--TYPE--(mod(), s(s_UNIFY_mod()))
(k2<root> / kidney  :quant (s2 / --LEX--))--TYPE--()
(t<root> / --LEX--  :ARG0 (p<s>)  :part-of (t2<poss>))--TYPE--(poss(), s())
(p2<root> / --LEX--  :ARG1 (c2<o>)  :extent-of (f<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(o2<root> / --LEX--  :ARG2 (g<mod>  :condition o2)  :ARG1 (w<s>))--TYPE--(mod(), s())
(e<root> / --LEX--  :ARG0 (p3<s>)  :ARG2 (s<o>)  :concession-of (i<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(r2<root> / --LEX--  :ARG2 (s<o>)  :ARG1 (m<s>)  :extent-of (c3<mod>))--TYPE--(mod(), o(), s())
(s3<root> / seat  :quant (explicitanon5 / --LEX--))--TYPE--()
(n2<root> / --LEX--  :name-of (f / family  :mod-of (p2<mod>)))--TYPE--(mod())
(p<root> / --LEX--  :ARG1 (y<o>  :ARG0-of p)  :ARG2 (a3<s>)  :example-of (t<mod>))--TYPE--(mod(), o(), s())
(s2<root> / --LEX--  :ARG1 (t2 / thing  :degree-of (g3<mod>)))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (p5 / publication  :mod-of (p3<mod>)))--TYPE--(mod())
(explicitanon5<root> / --LEX--  :time-of (d2 / date-entity  :time-of (a<mod>)))--TYPE--(mod())
(t2<root> / temporal-quantity  :unit (w / --LEX--)  :ARG2-of (r / rate-entity-91  :ARG1 (m<s>)  :example-of (a2<mod>)))--TYPE--(mod(), s())
(s<root> / --LEX--  :ARG0 (p<s>)  :ARG2 (p2<o2>)  :ARG1 (a<o>)  :prep-on-behalf-of (a2<mod>))--TYPE--(mod(), o(), o2(), s())
(r3<root> / religious-group  :name (n4 / --LEX--)  :compared-to-of (p<mod>))--TYPE--(mod())
(j<root> / --LEX--  :prep-for-of (f<mod>)  :ARG2-of (h2 / have-org-role-91))--TYPE--(mod())
(s<root> / state  :quant (explicitanon2 / --LEX--))--TYPE--()
(i<root> / --LEX--  :ARG0 (p4<s>)  :ARG1 (p2<o>)  :medium-of (s<mod>))--TYPE--(mod(), o(), s())
(b<root> / bite  :quant (p5 / --LEX--))--TYPE--()
(l<root> / law  :name (n / --LEX--)  :time-of (g<mod>))--TYPE--(mod())
(r<root> / --LEX--  :ARG2 (m<o>)  :ARG0 (b2<s>)  :purpose-of (t<mod>))--TYPE--(mod(mod_UNIFY_s()), o(), s())
(e<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG1 (t<o>)  :ARG0 (y<s>)  :time (n / now))--TYPE--(o(), s())
(c<root> / concentration-quantity  :quant (explicitanon2 / --LEX--))--TYPE--()
(a<root> / --LEX--  :ARG1 (t<o>)  :ARG0 (i<s>)  :ARG3 (g<o3>)  :ARG2 (y<o2>))--TYPE--(o(), o2(), o3(o_UNIFY_o2()), s())
(m<root> / more  :degree-of (g2 / --LEX--  :ARG2 (a3<s>)))--TYPE--(s())
(c<root> / --LEX--  :ARG3 (d<o3>)  :ARG2 (l<o2>)  :ARG0 (i<o>)  :ARG1 (n<s>))--TYPE--(o(), o2(), o3(), s())
(g2<root> / --LEX--  :ARG2 (p3<o>)  :ARG1 (c5<s>)  :time-of (c3<mod>))--TYPE--(mod(), o(dom_UNIFY_s()), s())
(c<root> / chief  :mod-of (o / officer  :mod (e / executive)  :ARG2-of (h2 / --LEX--  :ARG0 (p<s>))))--TYPE--(s())
(u<root> / --LEX--  :ARG2 (t2<o2>)  :ARG0 (c<s>)  :ARG1 (c3<o>)  :subevent-of (c5<mod>))--TYPE--(mod(), o(), o2(), s(mod_UNIFY_o2()))
(c2<root> / --LEX--  :ARG2 (d2<o>)  :ARG1 (s<s>)  :instrument-of (c3<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(t3<root> / treaty  :name (n4 / --LEX--)  :poss (o<poss>))--TYPE--(poss())
(b<root> / --LEX--  :location-of (h2<mod>)  :part-of (d<poss>))--TYPE--(mod(s_UNIFY_poss()), poss())
(explicitanon1<root> / -  :polarity-of (p3 / possible-01  :ARG1 (d / --LEX--  :ARG2 (c2<o>)  :ARG1 (p2<s>))))--TYPE--(o(), s())
(c<root> / country-region  :name (n2 / --LEX--)  :source-of (p3<mod>))--TYPE--(mod())
(b<root> / --LEX--  :ARG2 (h<s>)  :duration-of (g<mod>))--TYPE--(mod(), s())
(n3<root> / newspaper  :name (n4 / --LEX--)  :mod-of (e<mod>))--TYPE--(mod())
(v<root> / --LEX--  :ARG1 (p / person  :mod-of (g<mod>)))--TYPE--(mod())
(u<root> / university  :domain (w2<dom>)  :name (n / --LEX--)  :mod-of (t<mod>))--TYPE--(dom(), mod())
(s<root> / seminar  :name (n6 / --LEX--)  :time-of (r<mod>))--TYPE--(mod())
(t<root> / terrorism  :ARG1-of (c2 / --LEX--  :ARG0 (d3<s>)))--TYPE--(s())
(p2<root> / project  :name (n4 / --LEX--))--TYPE--()
(d2<root> / --LEX--  :ARG3 (m2<o3>)  :ARG1 (c2<o>)  :ARG0 (c<s>)  :ARG2 (s<o2>))--TYPE--(o(), o2(o2_UNIFY_o(), s_UNIFY_s()), o3(), s())
(p<root> / percentage-entity  :unit (explicitanon6 / --LEX--)  :quant-of (s<mod>))--TYPE--(mod())
(d<root> / date-entity  :season (s2 / --LEX--)  :mod-of (w<mod>))--TYPE--(mod())
(b<root> / --LEX--  :op2 (c2<op2>)  :op1 (c<op1>))--TYPE--(op1(), op2(poss_UNIFY_op1()))
(t3<root> / thing  :ARG0-of (h / have-rel-role-91  :ARG2 (r / --LEX--)))--TYPE--()
(t2<root> / temporal-quantity  :unit (d2 / --LEX--  :part-of (l<poss>)))--TYPE--(poss())
(t<root> / --LEX--  :ARG0 (p2<o>)  :ARG3 (a3<o2>)  :ARG1 (i<s>))--TYPE--(o(), o2(poss_UNIFY_o()), s())
(a3<root> / --LEX--  :op2 (a5<op2>)  :op3 (t<op3>)  :op4 (s3<op4>)  :op5 (t2<op5>)  :op1 (r2<op1>)  :purpose-of (r<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4(), op5())
(e2<root> / --LEX--  :ARG4 (c2<o2>)  :ARG1 (p3<s>)  :ARG0 (p2<o>)  :purpose-of (e<mod>))--TYPE--(mod(), o(), o2(s_UNIFY_s()), s())
(s3<root> / --LEX--  :op2 (p3 / person  :mod (c2 / country  :name (n2 / name  :op1 (explicitanon3 / Israel))))  :op1 (p2<op1>))--TYPE--(op1())
(n3<root> / --LEX--  :op2 (explicitanon5<op2>)  :op4 (explicitanon7<op4>)  :op5 (explicitanon8<op5>)  :op1 (explicitanon4 / United)  :op3 (explicitanon6 / of)  :name-of (c3<mod>))--TYPE--(mod(), op2(), op4(), op5())
(explicitanon0<root> / --LEX--  :decade-of (d / date-entity  :prep-to-of (r<mod>)))--TYPE--(mod())
(g<root> / government-organization  :name (n / --LEX--)  :prep-in-of (f<mod>))--TYPE--(mod())
(explicitanon0<root> / --LEX--  :quant-of (d2 / dimension  :medium-of (c2<mod>)))--TYPE--(mod())
(g2<root> / --LEX--  :ARG1 (t3 / thing)  :ARG0 (n2<s>)  :ARG2 (s2<o2>))--TYPE--(o2(), s())
(w<root> / work-of-art  :name (n2 / --LEX--)  :time-of (s<mod>))--TYPE--(mod())
(f2<root> / --LEX--  :ARG1 (w<s>)  :ARG4 (d<o2>)  :ARG3 (f3<o>))--TYPE--(o(), o2(s_UNIFY_s()), s())
(s<root> / --LEX--  :ARG1 (t / thing  :example-of (s2<mod>)))--TYPE--(mod())
(r2<root> / --LEX--  :ARG2 (t2<o>)  :ARG1 (m3<s>)  :prep-at-of (h<mod>))--TYPE--(mod(), o(), s())
(n4<root> / --LEX--  :name-of (m / magazine  :medium-of (p2<mod>)))--TYPE--(mod())
(n<root> / --LEX--  :op3 (explicitanon3<op3>)  :op5 (explicitanon5<op5>)  :op1 (explicitanon1<op1>)  :op6 (explicitanon6<op6>)  :op2 (explicitanon2<op2>)  :op4 (explicitanon4<op4>)  :name-of (e2<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4(), op5(), op6())
(d<root> / director  :ARG2-of (h2 / --LEX--  :ARG0 (p5<s>)))--TYPE--(s())
(p6<root> / person  :medium-of (r3<mod>)  :ARG0-of (h2 / have-org-role-91  :ARG2 (a2 / --LEX--)))--TYPE--(mod())
(o<root> / --LEX--  :op1 (c<op1>)  :op2 (k<op2>)  :mod-of (m<mod>))--TYPE--(mod(), op1(s_UNIFY_s()), op2(s_UNIFY_s()))
(g2<root> / --LEX--  :ARG1 (p3<o>)  :ARG3 (p4<o2>)  :ARG0 (t<s>))--TYPE--(o(), o2(o_UNIFY_o()), s())
(p7<root> / --LEX--  :ARG1 (c3<o>)  :ARG3 (p8<o2>)  :ARG0 (g3<s>)  :purpose-of (c2<mod>))--TYPE--(mod(), o(), o2(o2_UNIFY_o(), s_UNIFY_s()), s())
(m<root> / monetary-quantity  :unit (d / --LEX--)  :instrument-of (m2<mod>))--TYPE--(mod())
(l2<root> / location  :quant (m / --LEX--))--TYPE--()
(c3<root> / --LEX--  :ARG0 (p<s>)  :ARG4 (m<o2>)  :ARG1 (p4<o>)  :subevent-of (c2<mod>))--TYPE--(mod(), o(), o2(poss_UNIFY_s()), s())
(n3<root> / --LEX--  :name-of (l / language  :source-of (a3<mod>)))--TYPE--(mod())
(p4<root> / program  :name (n / --LEX--)  :beneficiary-of (p2<mod>))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (p4 / person  :topic-of (p3<mod>)))--TYPE--(mod())
(r<root> / --LEX--  :ARG1 (f<s>)  :ARG4 (c2<o>)  :time-of (b<mod>))--TYPE--(mod(), o(poss_UNIFY_s()), s())
(c<root> / --LEX--  :ARG2 (a3<o>)  :ARG3 (p2<o2>)  :ARG1 (a<s>))--TYPE--(o(poss_UNIFY_o2()), o2(), s())
(w<root> / --LEX--  :mod (a / anthropogenic)  :ARG1 (g<s>))--TYPE--(s())
(r<root> / --LEX--  :ARG4 (d<o>)  :ARG3 (t2<s>)  :frequency-of (s<mod>))--TYPE--(mod(), o(), s())
(c<root> / --LEX--  :ARG1 (a<s>  :manner c)  :ARG2 (o<o>))--TYPE--(o(), s())
(w<root> / --LEX--  :ARG0 (p2<s>)  :ARG4 (h2<o2>)  :ARG1 (w2<o>))--TYPE--(o(poss_UNIFY_s()), o2(s_UNIFY_s()), s())
(l<root> / --LEX--  :ARG1 (k<o>)  :ARG0 (i<s>)  :domain (t3<dom>))--TYPE--(dom(), o(o_UNIFY_s()), s())
(p<root> / power-quantity  :unit (m2 / --LEX--)  :mod-of (r<mod>))--TYPE--(mod())
(b2<root> / --LEX--  :ARG2 (e2<s>)  :ARG1 (p2<mod>  :concession b2))--TYPE--(mod(), s())
(t<root> / --LEX--  :quant (explicitanon5 / 2)  :unit (y / year))--TYPE--()
(h<root> / --LEX--  :ARG1 (f<o>)  :ARG2 (o / official)  :ARG0 (p2<s>))--TYPE--(o(), s())
(o4<root> / --LEX--  :ARG1 (d / drug))--TYPE--()
(explicitanon4<root> / Britain  :op4-of (n / --LEX--  :op3 (explicitanon3<op3>)  :op1 (explicitanon1<op1>)  :op2 (explicitanon2<op2>)  :name-of (o<mod>)))--TYPE--(mod(), op1(), op2(), op3())
(a<root> / --LEX--  :mod-of (h<mod>)  :ARG1-of (p3 / possible-01  :polarity (explicitanon6 / -)))--TYPE--(mod())
(g<root> / --LEX--  :ARG0 (d<mod>  :purpose g)  :ARG2 (p<s>)  :ARG1 (t2<o>))--TYPE--(mod(), o(), s())
(r<root> / --LEX--  :ARG4 (l3<s>)  :ARG2 (r2<o>)  :time-of (a<mod>))--TYPE--(mod(), o(), s())
(d<root> / date-entity  :day (explicitanon12 / 14)  :month (explicitanon13 / 1)  :year (explicitanon14 / --LEX--)  :time-of (v<mod>))--TYPE--(mod())
(l<root> / --LEX--  :ARG0 (b<s>)  :ARG4 (a2<o>))--TYPE--(o(mod_UNIFY_s()), s())
(c<root> / country  :poss (w<poss>)  :name (n / --LEX--)  :mod-of (p<mod>))--TYPE--(mod(), poss())
(g<root> / government-organization  :name (n / --LEX--)  :ARG0-of (g2 / govern-01  :ARG1 (c<s>)))--TYPE--(s())
(n4<root> / --LEX--  :poss (o2<poss>)  :prep-against-of (v<mod>))--TYPE--(mod(), poss(mod_UNIFY_mod()))
(t2<root> / temporal-quantity  :unit (y / --LEX--)  :quant-of (a2 / after  :op1 (f<op1>)  :time-of (a<mod>)))--TYPE--(mod(mod_UNIFY_op1()), op1())
(i<root> / --LEX--  :ARG0 (c3<s>)  :ARG2 (a2<o2>)  :ARG1 (c<o>)  :purpose-of (a<mod>))--TYPE--(mod(o_UNIFY_o(), s_UNIFY_s()), o(), o2(), s())
(r<root> / religious-group  :polarity (explicitanon4 / -)  :name (n / --LEX--)  :manner-of (d<mod>))--TYPE--(mod())
(d<root> / --LEX--  :ARG2-of (h5 / have-rel-role-91  :ARG0 (p4 / person  :beneficiary-of (m3<mod>))))--TYPE--(mod())
(n2<root> / --LEX--  :name-of (p5 / political-movement  :topic-of (t6<mod>)))--TYPE--(mod())
(d<root> / --LEX--  :ARG1 (b<o>)  :ARG0 (n3<s>)  :purpose-of (m<mod>))--TYPE--(mod(), o(), s(mod_UNIFY_mod()))
(p4<root> / --LEX--  :ARG2 (c3<o2>)  :ARG1 (e<o>)  :ARG0 (c<s>)  :concession-of (r<mod>))--TYPE--(mod(), o(s_UNIFY_o2()), o2(), s())
(v2<root> / --LEX--  :mod (explicitanon0 / 24))--TYPE--()
(n3<root> / --LEX--  :name-of (e2 / event  :prep-from-of (g<mod>)))--TYPE--(mod())
(b3<root> / --LEX--  :ARG2 (p2<o2>  :ARG0-of b3)  :ARG1 (c3<s>))--TYPE--(o2(), s())
(e<root> / --LEX--  :ARG0 (p3 / person  :ARG2-of e)  :ARG1 (c3<s>))--TYPE--(s())
(n2<root> / --LEX--  :name-of (l / law  :source-of (w2<mod>)))--TYPE--(mod())
(q<root> / --LEX--  :ARG2 (a4<s>)  :instrument-of (h2<mod>))--TYPE--(mod(), s())
(s4<root> / strait  :name (n5 / --LEX--)  :location-of (a4<mod>))--TYPE--(mod())
(n<root> / --LEX--  :ARG2 (m<o2>)  :ARG1 (i<s>)  :manner-of (a<mod>))--TYPE--(mod(), o2(), s())
(n2<root> / --LEX--  :name-of (d / disease  :poss (s<poss>)))--TYPE--(poss())
(t3<root> / --LEX--  :ARG3 (p4<o3>)  :ARG1 (p3<o>)  :ARG2 (p5<o2>)  :ARG0 (w<s>)  :purpose-of (p2<mod>))--TYPE--(mod(), o(), o2(), o3(s_UNIFY_o()), s())
(explicitanon1<root> / imperative  :mode-of (k2 / --LEX--  :ARG1 (t<s>)  :ARG0 (y / you)  :mod-of (m<mod>)))--TYPE--(mod(), s())
(p6<root> / pamphlet  :quant (explicitanon7 / --LEX--))--TYPE--()
(d2<root> / date-entity  :unit (y2 / --LEX--)  :quant-of (b3<mod>))--TYPE--(mod())
(s2<root> / --LEX--  :ARG2 (g<o2>)  :ARG3 (d<o3>)  :ARG1 (p2<o>)  :ARG0 (c<s>))--TYPE--(o(o2_UNIFY_o2(), o_UNIFY_o3(), s_UNIFY_s()), o2(), o3(), s())
(p3<root> / --LEX--  :ARG0 (t2 / thing)  :topic-of (p<mod>))--TYPE--(mod())
(b<root> / bay  :name (n / --LEX--)  :location-of (c<mod>))--TYPE--(mod())
(c2<root> / call-01  :quant (explicitanon1 / --LEX--))--TYPE--()
(a<root> / amusement-park  :name (n2 / --LEX--)  :location-of (h<mod>))--TYPE--(mod())
(d3<root> / distance-quantity  :unit (k2 / --LEX--)  :degree-of (s<mod>))--TYPE--(mod())
(c3<root> / city  :name (n2 / --LEX--)  :example-of (v<mod>))--TYPE--(mod())
(explicitanon0<root> / -  :polarity-of (s / --LEX--  :ARG0 (i<s>)  :condition-of (g<mod>)))--TYPE--(mod(), s())
(m<root> / --LEX--  :snt3 (r<snt3>)  :snt4 (c5<snt4>)  :snt1 (e<snt1>)  :snt2 (e2<snt2>))--TYPE--(snt1(), snt2(), snt3(), snt4(s_UNIFY_snt3()))
(n5<root> / --LEX--  :op4 (explicitanon9<op4>)  :op2 (explicitanon7<op2>)  :op3 (explicitanon8 / of)  :op1 (explicitanon6 / United)  :name-of (c3<mod>))--TYPE--(mod(), op2(), op4())
(s<root> / state  :name (n / --LEX--)  :compared-to-of (l<mod>))--TYPE--(mod())
(p3<root> / --LEX--  :ARG2-of (h2 / have-org-role-91  :ARG1 (c2<s>)  :ARG0 (h3 / he)  :time-of (o<mod>)))--TYPE--(mod(), s())
(n2<root> / --LEX--  :name-of (s2 / square  :location-of (e<mod>)))--TYPE--(mod())
(o<root> / --LEX--  :op2 (p2<op2>)  :op3 (p4<op3>)  :op1 (p<op1>)  :prep-on-of (t<mod>))--TYPE--(mod(), op1(), op2(), op3())
(s4<root> / --LEX--  :ARG3 (t<o2>)  :ARG2 (c6<o>)  :ARG1 (c5<s>))--TYPE--(o(), o2(), s(mod_UNIFY_o2()))
(n<root> / newsletter  :name (n2 / --LEX--))--TYPE--()
(n3<root> / now  :time-of (d2 / --LEX--  :mod-of (n<mod>)))--TYPE--(mod())
(d<root> / date-entity  :day (explicitanon5 / --LEX--)  :mod-of (e<mod>))--TYPE--(mod())
(b3<root> / benefit  :name (n / --LEX--))--TYPE--()
(a<root> / --LEX--  :op2 (t3<op2>)  :op1 (r<op1>)  :condition-of (f<mod>))--TYPE--(mod(), op1(o2_UNIFY_o2(), s_UNIFY_s()), op2(o2_UNIFY_o2(), s_UNIFY_s()))
(r3<root> / role  :quant (m2 / --LEX--)  :mod-of (s<mod>))--TYPE--(mod())
(m3<root> / man  :name (n / --LEX--))--TYPE--()
(h3<root> / --LEX--  :ARG1 (i<o>)  :ARG2 (f2 / father)  :ARG0 (p2<s>))--TYPE--(o(), s())
(m2<root> / monetary-quantity  :quant (explicitanon2 / --LEX--)  :unit (y2 / yuan))--TYPE--()
(t4<root> / --LEX--  :op1 (p<op1>)  :time-of (s<mod>))--TYPE--(mod(s_UNIFY_op1()), op1())
(b<root> / band  :name (n2 / --LEX--)  :source-of (m<mod>))--TYPE--(mod())
(d2<root> / date-entity  :month (explicitanon6 / --LEX--)  :prep-by-of (a3<mod>))--TYPE--(mod())
(d2<root> / --LEX--  :ARG1 (p2<o>)  :mod-of (t3<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(i<root> / --LEX--  :polarity (explicitanon6 / -)  :concession-of (s3<mod>))--TYPE--(mod())
(c4<root> / country  :quant (explicitanon2 / --LEX--)  :compared-to-of (h<mod>))--TYPE--(mod())
(explicitanon10<root> / -  :polarity-of (g / --LEX--  :mod-of (o<mod>)  :ARG0-of (g2 / govern-01)))--TYPE--(mod())
(h2<root> / --LEX--  :ARG0 (g<o>)  :ARG2 (p2<o2>)  :ARG1 (m<s>)  :time-of (o<mod>))--TYPE--(mod(), o(), o2(), s())
(m<root> / --LEX--  :mod (i2 / in-waiting)  :ARG2-of (h / have-org-role-91  :ARG0 (p4<s>)))--TYPE--(s())
(r2<root> / --LEX--  :ARG3 (t2<o>)  :ARG1 (p<s>)  :time-of (t<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(b<root> / --LEX--  :ARG2 (v<o>)  :location-of (a<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(a2<root> / --LEX--  :op3 (p<op3>)  :op2 (d4<op2>)  :op1 (d3<op1>)  :op4 (c2<op4>)  :purpose-of (e2<mod>))--TYPE--(mod(), op1(s_UNIFY_s()), op2(s_UNIFY_s()), op3(s_UNIFY_s()), op4(s_UNIFY_s()))
(p6<root> / person  :quant (m / multiple  :op1 (explicitanon4 / --LEX--))  :source-of (b<mod>))--TYPE--(mod())
(t<root> / --LEX--  :quant (explicitanon1 / 20)  :unit (y / year))--TYPE--()
(r3<root> / --LEX--  :ARG3 (p<o3>)  :ARG2 (t3<o2>)  :ARG0 (w<s>)  :ARG1 (s<o>))--TYPE--(o(s_UNIFY_s()), o2(), o3(s_UNIFY_o2()), s())
(e<root> / event  :name (n / --LEX--)  :prep-at-of (s<mod>))--TYPE--(mod())
(w2<root> / --LEX--  :domain (p3<dom>)  :subevent-of (p5<mod>))--TYPE--(dom(), mod())
(explicitanon2<root> / Deomcratic  :op1-of (n / --LEX--  :op2 (explicitanon3<op2>)  :name-of (p2<mod>)))--TYPE--(mod(), op2())
(d<root> / --LEX--  :ARG1 (p2<o>  :ARG0-of d)  :ARG3 (a<s>))--TYPE--(o(), s(s_UNIFY_o()))
(r4<root> / research-institute  :poss (g<poss>)  :name (n2 / --LEX--)  :prep-under-of (o<mod>))--TYPE--(mod(), poss())
(a2<root> / --LEX--  :op1 (b2<op1>)  :op2 (e<op2>))--TYPE--(op1(o_UNIFY_o(), s_UNIFY_s(s_UNIFY_o())), op2(o_UNIFY_o(), s_UNIFY_s(s_UNIFY_o())))
(m3<root> / --LEX--  :ARG2-of (h / have-org-role-91  :ARG1 (m2<s>)  :purpose-of (a<mod>)))--TYPE--(mod(), s())
(e2<root> / --LEX--  :ARG1 (v / veteran)  :topic-of (i2<mod>))--TYPE--(mod())
(d<root> / --LEX--  :mode (explicitanon0 / imperative)  :ARG1 (f<s>)  :ARG0 (y<o>  :ARG2-of d))--TYPE--(o(), s())
(l<root> / law  :name (n / --LEX--)  :manner-of (e<mod>))--TYPE--(mod())
(s<root> / --LEX--  :ARG1 (c4<o>)  :ARG3 (r<o2>)  :ARG0 (c<s>)  :topic-of (f<mod>))--TYPE--(mod(), o(), o2(), s())
(r3<root> / rate-entity-91  :ARG2 (p6<s>)  :ARG1 (p5 / percentage-entity  :value (explicitanon6 / --LEX--)))--TYPE--(s())
(p<root> / --LEX--  :ARG5 (o<o2>)  :ARG3 (w2<o>)  :ARG1 (p2<s>))--TYPE--(o(), o2(), s())
(a2<root> / --LEX--  :op1 (r<op1>)  :op2 (u<op2>))--TYPE--(op1(o2_UNIFY_o2(), o_UNIFY_o()), op2(o2_UNIFY_o2(), o_UNIFY_o()))
(d4<root> / date-entity  :month (explicitanon5 / 12)  :year (explicitanon4 / 2002)  :day (explicitanon6 / 21)  :op2-of (d2 / --LEX--  :op1 (d3<op1>)  :time-of (s<mod>)))--TYPE--(mod(), op1())
(s<root> / --LEX--  :ARG1 (t<o>)  :ARG0 (p<s>)  :ARG2 (p2<o2>)  :subevent-of (s2<mod>))--TYPE--(mod(s_UNIFY_s()), o(), o2(), s())
(c4<root> / creature  :quant (explicitanon2 / --LEX--))--TYPE--()
(c6<root> / creature  :domain (t3<dom>)  :ARG0-of (h3 / have-rel-role-91  :ARG2 (p2 / --LEX--)))--TYPE--(dom())
(t2<root> / --LEX--  :ARG3 (p2<o3>)  :ARG2 (p4<o2>)  :ARG1 (p<s>  :ARG0-of t2))--TYPE--(o2(), o3(), s())
(r3<root> / republic  :name (n7 / --LEX--))--TYPE--()
(t4<root> / --LEX--  :quant (explicitanon2 / 1)  :unit (m / month))--TYPE--()
(t6<root> / temporal-quantity  :unit (d / --LEX--)  :quant (explicitanon4 / 1))--TYPE--()
(l<root> / --LEX--  :ARG1 (a2<o>)  :ARG0 (h<s>)  :ARG2 (c4<o2>)  :ARG3 (p3<o3>))--TYPE--(o(), o2(), o3(o_UNIFY_o(), s_UNIFY_s()), s())
(n6<root> / --LEX--  :name-of (m / military  :manner-of (f<mod>)))--TYPE--(mod())
(r<root> / --LEX--  :ARG2 (t / thing  :topic-of (i2<mod>)))--TYPE--(mod())
(explicitanon0<root> / --LEX--  :value-of (e / email-address-entity  :mod-of (i<mod>)))--TYPE--(mod())
(p3<root> / --LEX--  :ARG1 (a3<o>)  :ARG3 (l2<s>  :ARG0-of p3))--TYPE--(o(), s())
(v<root> / virus  :name (n2 / --LEX--))--TYPE--()
(o<root> / --LEX--  :ARG2 (s<o2>)  :ARG1 (p2<s>)  :ARG0 (a<o>))--TYPE--(o(s_UNIFY_s()), o2(), s())
(o<root> / --LEX--  :ARG0 (p2 / person)  :ARG1 (p4 / person))--TYPE--()
(w2<root> / woman  :ARG0-of (h4 / have-rel-role-91  :ARG2 (w / --LEX--)))--TYPE--()
(e<root> / --LEX--  :ARG2 (d<s>)  :ARG1 (i<o>)  :ARG0 (y / you))--TYPE--(o(), s(s_UNIFY_o()))
(s2<root> / --LEX--  :poss (e<poss>)  :concession-of (p2<mod>))--TYPE--(mod(), poss())
(r5<root> / religious-group  :name (n2 / --LEX--)  :instrument-of (a<mod>))--TYPE--(mod())
(t4<root> / thing  :ARG1-of (r2 / --LEX--  :ARG2 (t3<s>)  :frequency-of (r3<mod>)))--TYPE--(mod(), s())
(p5<root> / person  :ARG0-of (h4 / have-rel-role-91  :ARG2 (p / political-party  :name (n3 / --LEX--))))--TYPE--()
(s2<root> / --LEX--  :ARG1 (f<o>)  :ARG0 (s<s>)  :purpose-of (p<mod>))--TYPE--(mod(o_UNIFY_o(), s_UNIFY_s()), o(), s())
(m2<root> / --LEX--  :op1 (f<op1>)  :quant-of (t7 / thread))--TYPE--(op1())
(m<root> / --LEX--  :snt3 (h<snt3>)  :snt1 (a2<snt1>))--TYPE--(snt1(), snt3())
(t3<root> / terrorist  :quant (explicitanon10 / --LEX--))--TYPE--()
(p<root> / planet  :name (n / --LEX--)  :concession-of (s<mod>))--TYPE--(mod())
(p4<root> / --LEX--  :ARG9 (p<o>)  :ARG2 (s2<s>))--TYPE--(o(), s())
(p<root> / --LEX--  :ARG0-of (h / have-org-role-91  :ARG2 (g / governor)))--TYPE--()
(d2<root> / date-entity  :quant (o / ordinal-entity  :value (explicitanon2 / --LEX--))  :time-of (a<mod>))--TYPE--(mod())
(a2<root> / --LEX--  :op9 (e3<op9>)  :location-of (l<mod>))--TYPE--(mod(), op9())
(explicitanon4<root> / --LEX--  :value-of (p5 / percentage-entity  :poss (w<poss>)  :mod-of (o2<mod>)))--TYPE--(mod(), poss())
(p<root> / province  :name (n3 / --LEX--)  :example-of (a3<mod>))--TYPE--(mod())
(m<root> / mass-quantity  :domain (a4<dom>)  :unit (t2 / --LEX--))--TYPE--(dom())
(b3<root> / bridge  :name (n4 / --LEX--)  :location-of (f<mod>))--TYPE--(mod())
(b<root> / bill  :poss (w<poss>)  :name (n / --LEX--))--TYPE--(poss())
(t4<root> / temporal-quantity  :unit (w2 / --LEX--)  :ARG2-of (r2 / rate-entity-91  :ARG1 (a3<s>)  :duration-of (w4<mod>)))--TYPE--(mod(), s())
(e<root> / --LEX--  :op1 (g2<op1>)  :part-of (w<poss>)  :time-of (s4<mod>))--TYPE--(mod(), op1(), poss())
(d<root> / date-entity  :day (explicitanon10 / 3)  :year (explicitanon12 / --LEX--)  :time-of (s<mod>))--TYPE--(mod())
(e<root> / --LEX--  :ARG1 (c3<s>)  :ARG2 (c4<o>)  :prep-as-of (i3<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(t<root> / --LEX--  :ARG2 (l<s>)  :mod-of (v3<mod>))--TYPE--(mod(s_UNIFY_s()), s())
(n2<root> / nation  :quant (s / --LEX--))--TYPE--()
(a2<root> / --LEX--  :op7 (i5<op7>)  :op2 (c3<op2>)  :op4 (i7<op4>)  :op3 (i3<op3>)  :op6 (i6<op6>)  :op8 (m<op8>)  :op1 (i2<op1>)  :op5 (i4<op5>)  :location-of (c2<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4(), op5(), op6(), op7(), op8())
(n3<root> / --LEX--  :name-of (u / university  :source-of (d2<mod>)))--TYPE--(mod())
(t5<root> / thing  :consist (l<mod>)  :ARG1-of (c2 / --LEX--))--TYPE--(mod())
(s<root> / --LEX--  :ARG2 (s3<o>)  :ARG1 (explicitanon3<s>)  :ARG5 (s2<o3>)  :ARG4 (c3<o2>)  :ARG6 (explicitanon4<o4>)  :location-of (c2<mod>))--TYPE--(mod(), o(), o2(), o3(), o4(), s())
(n7<root> / number  :value (explicitanon25 / --LEX--)  :mod-of (c2<mod>))--TYPE--(mod())
(a<root> / --LEX--  :op1 (a2<op1>)  :op2 (e<op2>)  :dayperiod-of (d2<mod>))--TYPE--(mod(), op1(), op2())
(l<root> / law  :name (n / --LEX--)  :example-of (v2<mod>))--TYPE--(mod())
(e<root> / --LEX--  :ARG0 (p3<s>)  :ARG1 (p<o>)  :purpose-of (s2<mod>))--TYPE--(mod(o2_UNIFY_o(), o_UNIFY_s()), o(), s())
(y3<root> / --LEX--  :calendar-of (d2 / date-entity  :source-of (c2<mod>)))--TYPE--(mod())
(e5<root> / energy-quantity  :unit (k / --LEX--))--TYPE--()
(w<root> / work-of-art  :poss (c<poss>)  :name (n / --LEX--))--TYPE--(poss())
(n6<root> / --LEX--  :name-of (h6 / harbor  :mod-of (s<mod>)))--TYPE--(mod())
(p2<root> / --LEX--  :ARG1 (t / thing  :instrument-of (s<mod>)))--TYPE--(mod())
(s<root> / --LEX--  :ARG1 (r2<o>)  :ARG0 (c<s>)  :prep-for-of (g2<mod>))--TYPE--(mod(), o(s_UNIFY_s()), s())
(t2<root> / thing  :ARG0-of (s / --LEX--  :polarity (explicitanon5 / -)))--TYPE--()
(t<root> / temporal-quantity  :unit (y / --LEX--)  :prep-with-of (m<mod>))--TYPE--(mod())
(w2<root> / --LEX--  :ARG1 (r2<o>  :condition w2))--TYPE--(o(s_UNIFY_s()))
(n3<root> / --LEX--  :name-of (e / event  :purpose-of (b2<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :poss (w<poss>)  :op2 (d<op2>)  :op1 (r<op1>)  :domain (c3<dom>))--TYPE--(dom(), op1(), op2(), poss())
(w<root> / website  :name (n3 / --LEX--))--TYPE--()
(a<root> / --LEX--  :op1 (c2<op1>)  :op3 (t<op3>)  :op5 (s2<op5>)  :op2 (c3<op2>))--TYPE--(op1(), op2(), op3(), op5())
(t3<root> / temporal-quantity  :unit (w2 / --LEX--)  :ARG2-of (r2 / rate-entity-91  :ARG1 (explicitanon0<s>)  :time-of (h<mod>)))--TYPE--(mod(), s())
(s<root> / --LEX--  :op3 (explicitanon6<op3>)  :op1 (explicitanon4<op1>)  :op2 (explicitanon5<op2>)  :quant-of (t5<mod>))--TYPE--(mod(), op1(), op2(), op3())
(t<root> / thing  :ARG1-of (s2 / --LEX--  :ARG0 (y<s>)  :compared-to-of (f<mod>)))--TYPE--(mod(), s())
(f2<root> / --LEX--  :ARG1 (m<s>)  :ARG2 (t2<o>)  :time-of (w<mod>))--TYPE--(mod(s_UNIFY_o()), o(), s())
(p2<root> / person  :ARG0-of (h / have-rel-role-91  :ARG2 (p3 / person  :ARG0-of (h2 / have-org-role-91  :ARG2 (e2 / --LEX--)))))--TYPE--()
(explicitanon9<root> / imperative  :mode-of (l / --LEX--  :ARG0 (d2<s>)  :mod-of (a2<mod>)))--TYPE--(mod(), s())
(o3<root> / --LEX--  :op2 (t2<op2>)  :op1 (t<op1>)  :extent-of (p2<mod>))--TYPE--(mod(), op1(), op2())
(n2<root> / --LEX--  :name-of (g / government-organization  :topic-of (t3<mod>)))--TYPE--(mod())
(d2<root> / --LEX--  :dayperiod (a2 / afternoon)  :time-of (g<mod>))--TYPE--(mod())
(d<root> / date-entity  :year (explicitanon7 / --LEX--)  :day (explicitanon9 / 9)  :time-of (a2<mod>))--TYPE--(mod())
(t<root> / thing  :ARG0-of (i2 / --LEX--  :topic-of (c2<mod>)))--TYPE--(mod())
(m2<root> / most  :degree-of (l / --LEX--  :frequency-of (s2<mod>)))--TYPE--(mod())
(h<root> / --LEX--  :beneficiary-of (t2<mod>)  :part-of (p<poss>))--TYPE--(mod(s_UNIFY_poss()), poss())
(n2<root> / --LEX--  :name-of (l2 / local-region  :source-of (c2<mod>)))--TYPE--(mod())
(t<root> / temporal-quantity  :quant (explicitanon2 / 3)  :unit (h / --LEX--))--TYPE--()
(a4<root> / --LEX--  :op5 (m2<op5>)  :op4 (m<op4>)  :op3 (a<op3>))--TYPE--(op3(), op4(), op5())
(c3<root> / county  :name (n2 / --LEX--)  :part-of (a2<poss>))--TYPE--(poss())
(s4<root> / --LEX--  :ARG2 (u<o2>)  :ARG0 (c3<s>)  :ARG1 (p2<o>)  :prep-with-of (c2<mod>))--TYPE--(mod(), o(), o2(), s())
(s3<root> / sea  :name (n6 / --LEX--)  :path-of (p2<mod>))--TYPE--(mod())
(o2<root> / ocean  :name (n7 / --LEX--)  :source-of (r3<mod>))--TYPE--(mod())
(d3<root> / date-entity  :month (explicitanon5 / 1)  :day (explicitanon4 / 15)  :year (explicitanon6 / --LEX--))--TYPE--()
(d5<root> / --LEX--  :day (explicitanon7 / 16)  :month (explicitanon8 / 1))--TYPE--()
(a<root> / --LEX--  :op3 (m<op3>)  :op5 (e<op5>)  :op1 (p2<op1>)  :op2 (n2<op2>)  :op4 (h<op4>)  :mod (a3 / all))--TYPE--(op1(), op2(), op3(), op4(), op5())
(w<root> / --LEX--  :ARG0 (p7<o>)  :ARG2 (p2<o2>)  :ARG1 (m2<s>))--TYPE--(o(), o2(s_UNIFY_o()), s())
(g<root> / --LEX--  :ARG2 (c3<o>)  :ARG0 (t2<s>)  :instrument-of (e<mod>))--TYPE--(mod(), o(), s())
(a5<root> / --LEX--  :op4 (c3<op4>)  :op3 (w2<op3>)  :op1 (s4<op1>))--TYPE--(op1(), op3(), op4())
(t<root> / --LEX--  :ARG2 (i<s>)  :ARG0 (s<o2>)  :ARG1 (t2<o>))--TYPE--(o(), o2(s_UNIFY_s()), s())
(t3<root> / thing  :ARG1-of (d2 / --LEX--)  :subevent-of (h2<mod>))--TYPE--(mod())
(a<root> / --LEX--  :domain (c2<dom>)  :op2 (t<op2>)  :op1 (g<op1>)  :concession-of (c<mod>))--TYPE--(dom(), mod(), op1(), op2())
(a<root> / --LEX--  :op1 (a2<op1>)  :part-of (l2<poss>))--TYPE--(op1(), poss())
(d6<root> / --LEX--  :op1 (d<op1>)  :op2 (d7<op2>)  :domain (y<dom>)  :time-of (d5<mod>))--TYPE--(dom(), mod(), op1(), op2())
(d8<root> / --LEX--  :op2 (d3 / date-entity  :year (explicitanon8 / 1986))  :op1 (d2<op1>)  :time-of (g2<mod>))--TYPE--(mod(), op1())
(c2<root> / car-make  :name (n3 / --LEX--)  :poss (p2<poss>))--TYPE--(poss())
(explicitanon3<root> / Buddhism  :op1-of (n3 / --LEX--  :name-of (r3<mod>)))--TYPE--(mod())
(a2<root> / --LEX--  :op3 (s3<op3>)  :op4 (c2<op4>)  :op6 (e2<op6>)  :op5 (q<op5>)  :op2 (e<op2>)  :op1 (s2<op1>)  :topic-of (c<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4(), op5(), op6())
(explicitanon5<root> / "2/3"  :ARG3-of (i2 / --LEX--  :ARG2 (p9<o>)  :ARG1 (p3<s>)))--TYPE--(o(), s())
(n<root> / --LEX--  :op3 (explicitanon3<op3>)  :op5 (explicitanon5<op5>)  :op1 (explicitanon1<op1>)  :op2 (explicitanon2<op2>)  :op4 (explicitanon4<op4>)  :name-of (o<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4(), op5())
(r<root> / reactor  :quant (explicitanon6 / --LEX--))--TYPE--()
(o<root> / ordinal-entity  :value (explicitanon2 / --LEX--)  :poss (w2<poss>))--TYPE--(poss())
(d3<root> / --LEX--  :month (explicitanon6 / 12))--TYPE--()
(explicitanon20<root> / 10  :month-of (d / date-entity  :year (explicitanon21 / --LEX--)  :time-of (a<mod>)))--TYPE--(mod())
(s2<root> / satellite  :name (n3 / --LEX--))--TYPE--()
(b<root> / battery  :name (n6 / --LEX--))--TYPE--()
(p2<root> / --LEX--  :ARG2 (b2<s>)  :ARG3 (n2<o>))--TYPE--(o(poss_UNIFY_s()), s())
(o2<root> / --LEX--  :op3 (p2<op3>)  :op2 (o3<op2>)  :op1 (c2<op1>)  :op4 (o4<op4>)  :op5 (o6<op5>)  :manner-of (o<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4(), op5())
(r3<root> / relative-position  :quant (s / --LEX--))--TYPE--()
(explicitanon0<root> / -  :polarity-of (l5 / language  :name (n3 / --LEX--)  :mod-of (c2<mod>)))--TYPE--(mod())
(p<root> / person  :ARG0-of (t / --LEX--  :topic-of (b2<mod>)))--TYPE--(mod())
(p2<root> / percentage-entity  :domain (g<dom>)  :value (explicitanon5 / --LEX--)  :quant-of (s<mod>))--TYPE--(dom(), mod())
(p3<root> / percentage-entity  :value (explicitanon6 / --LEX--)  :prep-to-of (p2<mod>))--TYPE--(mod())
(o2<root> / organization  :name (n2 / --LEX--)  :medium-of (w<mod>))--TYPE--(mod())
(m3<root> / mass-quantity  :poss (u<poss>)  :unit (k / --LEX--))--TYPE--(poss())
(c<root> / carrier  :quant (explicitanon0 / --LEX--))--TYPE--()
(n2<root> / --LEX--  :name-of (f / festival  :purpose-of (b<mod>)))--TYPE--(mod())
(r2<root> / range  :name (n9 / --LEX--)  :location-of (l2<mod>))--TYPE--(mod())
(t<root> / thing  :instrument-of (b<mod>)  :ARG0-of (i / --LEX--))--TYPE--(mod())
(m7<root> / museum  :name (n2 / --LEX--)  :location-of (s<mod>))--TYPE--(mod())
(d4<root> / --LEX--  :month (explicitanon7 / 12)  :year (explicitanon6 / 2002))--TYPE--()
(a<root> / --LEX--  :op1 (s<op1>)  :op2 (c<op3>  :op3-of a))--TYPE--(op1(s_UNIFY_s()), op3(s_UNIFY_s()))
(s2<root> / --LEX--  :ARG1 (e<o>)  :ARG2 (y<o2>)  :ARG0 (i2<s>))--TYPE--(o(o2_UNIFY_o2()), o2(), s())
(explicitanon1<root> / --LEX--  :quant-of (t3 / temporal-quantity  :unit (d3 / day)  :ARG2-of (r / rate-entity-91  :ARG1 (t5<s>)  :frequency-of (c<mod>))))--TYPE--(mod(), s())
(c2<root> / commission  :name (n2 / --LEX--)  :prep-with-of (o<mod>))--TYPE--(mod())
(c3<root> / commission  :name (n3 / --LEX--))--TYPE--()
(c4<root> / conference  :name (n4 / --LEX--)  :location-of (e<mod>))--TYPE--(mod())
(explicitanon1<root> / Tories  :op1-of (n / --LEX--  :name-of (p<mod>)))--TYPE--(mod())
(n3<root> / --LEX--  :name-of (g2 / government-organization  :destination-of (w<mod>)))--TYPE--(mod())
(n5<root> / --LEX--  :name-of (g / gun  :mod-of (c4<mod>)))--TYPE--(mod())
(s2<root> / --LEX--  :ARG1 (n<o>)  :ARG3 (m<o2>)  :ARG0 (b2<s>)  :purpose-of (t<mod>))--TYPE--(mod(o_UNIFY_o2(), s_UNIFY_s()), o(), o2(), s())
(a4<root> / alias  :name (n4 / --LEX--))--TYPE--()
(n2<root> / --LEX--  :name-of (m / mountain  :location-of (b<mod>)))--TYPE--(mod())
(p4<root> / --LEX--  :ARG2 (d3<o2>)  :ARG1 (n4<o>)  :ARG0 (n3<s>)  :purpose-of (u<mod>))--TYPE--(mod(s_UNIFY_s()), o(), o2(s_UNIFY_o()), s())
(p4<root> / person  :ARG0-of (s3 / --LEX--  :ARG1 (p7 / person)))--TYPE--()
(w2<root> / --LEX--  :unit-of (d2 / date-entity  :time-of (h2<mod>)))--TYPE--(mod())
(explicitanon10<root> / --LEX--  :quant-of (m5 / mass-quantity  :quant-of (o6<mod>)))--TYPE--(mod())
(t<root> / treaty  :name (n / --LEX--)  :mod-of (c3<mod>))--TYPE--(mod())
(m2<root> / monetary-quantity  :quant (explicitanon0 / --LEX--)  :part-of (m3<poss>))--TYPE--(poss())
(a<root> / --LEX--  :op4 (t3<op4>)  :op8 (c<op8>)  :op9 (e4<op9>)  :op2 (p<op2>)  :op1 (t2<op1>)  :op5 (h<op5>)  :op6 (t4<op6>)  :op3 (p2<op3>)  :op7 (c3<op7>)  :example-of (i2<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4(), op5(), op6(), op7(), op8(), op9())
(p4<root> / pass  :name (n4 / --LEX--))--TYPE--()
(o<root> / --LEX--  :op3 (s2<op3>)  :op2 (g3<op2>)  :op4 (b<op4>)  :op1 (s<op1>)  :time-of (i<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4())
(s3<root> / --LEX--  :consist (a3<mod>)  :degree (m4 / more))--TYPE--(mod())
(n3<root> / --LEX--  :op4 (explicitanon9<op4>)  :op7 (explicitanon12<op7>)  :op2 (explicitanon7<op2>)  :op1 (explicitanon6<op1>)  :op8 (explicitanon13<op8>)  :op3 (explicitanon8<op3>)  :op6 (explicitanon11<op6>)  :op5 (explicitanon10<op5>)  :name-of (r2<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4(), op5(), op6(), op7(), op8())
(n3<root> / --LEX--  :name-of (w2 / work-of-art  :poss (p4<poss>)  :prep-in-of (h<mod>)))--TYPE--(mod(), poss())
(h4<root> / --LEX--  :ARG1 (h2<s>  :concession h4))--TYPE--(s())
(n3<root> / --LEX--  :name-of (w / website  :location-of (s<mod>)))--TYPE--(mod())
(r<root> / --LEX--  :ARG1 (p<o>)  :ARG3 (l<o2>)  :ARG0 (i<s>)  :time-of (f<mod>))--TYPE--(mod(s_UNIFY_s()), o(), o2(), s())
(p<root> / person  :ARG0-of (g / --LEX--  :ARG1 (f<o>)  :ARG4 (e4<s>)))--TYPE--(o(), s())
(p4<root> / person  :ARG2-of (i / --LEX--  :polarity (explicitanon12 / -)))--TYPE--()
(f4<root> / fan  :quant (explicitanon5 / --LEX--))--TYPE--()
(l<root> / --LEX--  :degree (m / most)  :quant-of (d2<mod>))--TYPE--(mod())
(m5<root> / monetary-quantity  :unit (p3 / pound)  :quant (explicitanon7 / --LEX--))--TYPE--()
(p<root> / --LEX--  :ARG2 (h<o2>)  :ARG0 (g2<s>)  :ARG1 (c5<o>))--TYPE--(o(s_UNIFY_s()), o2(o_UNIFY_o()), s())
(a6<root> / --LEX--  :op2 (o5<op2>)  :op3 (o3<op3>)  :op1 (o4<op1>)  :op4 (o6<op4>)  :source-of (p4<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4())
(r2<root> / --LEX--  :poss (p2<poss>)  :frequency-of (s<mod>))--TYPE--(mod(), poss())
(explicitanon2<root> / --LEX--  :quant-of (v / volume  :consist (t3<mod>)))--TYPE--(mod())
(a3<root> / --LEX--  :ARG1 (s<o>)  :concession-of (d<mod>)  :ARG1-of (p5 / possible-01))--TYPE--(mod(), o(s_UNIFY_s()))
(a2<root> / --LEX--  :op3 (k3<op3>)  :op1 (r3<op1>)  :op2 (a3<op2>)  :purpose-of (n2<mod>))--TYPE--(mod(), op1(s_UNIFY_s()), op2(s_UNIFY_s()), op3(s_UNIFY_s()))
(n5<root> / newspaper  :poss (g<poss>)  :name (n6 / --LEX--))--TYPE--(poss())
(d4<root> / date-entity  :month (explicitanon5 / 7)  :year (explicitanon4 / --LEX--))--TYPE--()
(l<root> / --LEX--  :ARG0 (p2<s>)  :time-of (a2<mod>))--TYPE--(mod(mod_UNIFY_s()), s())
(t5<root> / --LEX--  :ARG1 (o2<s>)  :condition-of (h<mod>))--TYPE--(mod(o_UNIFY_s()), s())
(w<root> / --LEX--  :ARG4 (c2<o2>)  :ARG2 (p2<o>)  :ARG0 (y2<s>)  :purpose-of (p<mod>))--TYPE--(mod(), o(), o2(), s())
(s3<root> / stack  :name (n6 / --LEX--))--TYPE--()
(i<root> / information-quantity  :quant (explicitanon0 / --LEX--)  :quant-of (s2<mod>))--TYPE--(mod())
(h2<root> / have-org-role-91  :ARG2 (o / --LEX--)  :ARG3 (p<o2>)  :ARG0 (p8<s>))--TYPE--(o2(), s())
(g3<root> / --LEX--  :ARG1 (r3 / rich)  :ARG0 (p6<s>))--TYPE--(s())
(y<root> / --LEX--  :calendar-of (d / date-entity  :time-of (f<mod>)))--TYPE--(mod())
(c4<root> / --LEX--  :ARG1 (g<s>)  :ARG2 (m<o>)  :concession-of (s<mod>))--TYPE--(mod(), o(), s(dom_UNIFY_mod()))
(n3<root> / --LEX--  :name-of (m5 / magazine  :location-of (w<mod>)))--TYPE--(mod())
(p2<root> / province  :name (n3 / --LEX--)  :part-of (c10<poss>))--TYPE--(poss())
(n7<root> / --LEX--  :name-of (v3 / vehicle  :mod-of (c4<mod>)))--TYPE--(mod())
(n<root> / --LEX--  :name-of (c2 / company  :prep-with-of (p2<mod>)))--TYPE--(mod())
(explicitanon0<root> / -  :polarity-of (p5 / --LEX--  :ARG1 (e<s>)  :manner-of (a<mod>)))--TYPE--(mod(), s())
(explicitanon0<root> / -  :polarity-of (d / --LEX--  :ARG1 (d2<s>)  :topic-of (s<mod>)))--TYPE--(mod(), s())
(b<root> / book  :name (n2 / --LEX--)  :example-of (s2<mod>))--TYPE--(mod())
(r2<root> / --LEX--  :poss (s4<poss>)  :prep-as-of (c2<mod>))--TYPE--(mod(s_UNIFY_poss()), poss())
(t<root> / --LEX--  :op1 (a<op1>)  :op2 (m2<op2>)  :op5 (e2<op5>)  :op4 (c<op4>)  :op3 (t3<op3>)  :direction-of (g<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4(), op5())
(u<root> / --LEX--  :mod (g / general)  :ARG2-of (h / have-org-role-91  :ARG1 (o2<o>)  :ARG0 (p<s>)))--TYPE--(o(), s())
(f2<root> / --LEX--  :ARG2 (t4<o>)  :ARG1 (s2<s>)  :condition-of (c5<mod>))--TYPE--(mod(o_UNIFY_s()), o(), s())
(o<root> / --LEX--  :op1 (e<op1>)  :op2 (t2<op2>)  :time-of (n<mod>))--TYPE--(mod(), op1(o_UNIFY_o(), s_UNIFY_s()), op2(o_UNIFY_o(), s_UNIFY_s()))
(n3<root> / --LEX--  :name-of (s2 / show  :topic-of (g<mod>)))--TYPE--(mod())
(n6<root> / --LEX--  :name-of (g3 / game  :purpose-of (c3<mod>)))--TYPE--(mod())
(e2<root> / --LEX--  :polarity (explicitanon1 / -)  :source-of (c2<mod>))--TYPE--(mod())
(p4<root> / phone-number-entity  :value (explicitanon4 / --LEX--)  :mod-of (t<mod>))--TYPE--(mod())
(a<root> / --LEX--  :op2 (c6<op2>)  :op9 (c12<op9>)  :op10 (e<op10>)  :op4 (c7<op4>)  :op5 (c8<op5>)  :op3 (c13<op3>)  :op7 (c10<op7>)  :op6 (c9<op6>)  :op8 (c11<op8>)  :op1 (c5<op1>)  :example-of (c2<mod>))--TYPE--(mod(), op1(), op10(), op2(), op3(), op4(), op5(), op6(), op7(), op8(), op9())
(r<root> / --LEX--  :ARG2 (s5<o2>)  :ARG4 (p3<o3>)  :ARG1 (d3<o>)  :ARG0 (n<s>))--TYPE--(o(), o2(), o3(), s())
(t4<root> / thing  :ARG1-of (g / --LEX--  :time-of (j<mod>)))--TYPE--(mod())
(n7<root> / --LEX--  :name-of (o / organization  :path-of (e<mod>)))--TYPE--(mod())
(t2<root> / thing  :ARG1-of (l / --LEX--  :ARG0 (c<s>)  :concession-of (s<mod>)))--TYPE--(mod(), s())
(a4<root> / adult  :ARG0-of (h5 / have-org-role-91  :ARG2 (b / --LEX--)))--TYPE--()
(n6<root> / --LEX--  :name-of (p8 / publication  :location-of (h<mod>)))--TYPE--(mod())
(l<root> / law  :name (n3 / --LEX--)  :prep-with-of (c10<mod>))--TYPE--(mod())
(d4<root> / --LEX--  :ARG1 (d5<s>)  :polarity (explicitanon0 / -)  :topic-of (s5<mod>))--TYPE--(mod(), s())
(a3<root> / area-quantity  :unit (a4 / --LEX--)  :mod-of (p<mod>))--TYPE--(mod())
(t2<root> / thing  :ARG3-of (l / --LEX--)  :instrument-of (a2<mod>))--TYPE--(mod())
(a<root> / --LEX--  :op1 (e<op1>)  :op3 (v<op3>)  :op6 (b4<op6>)  :op4 (c3<op4>)  :op2 (b<op2>)  :op5 (l<op5>))--TYPE--(op1(s_UNIFY_s()), op2(s_UNIFY_s()), op3(s_UNIFY_s()), op4(s_UNIFY_s()), op5(s_UNIFY_s()), op6(s_UNIFY_s()))
(n3<root> / --LEX--  :name-of (v5 / vehicle  :location-of (a5<mod>)))--TYPE--(mod())
(d6<root> / --LEX--  :op1 (d3 / date-entity  :year (explicitanon18 / 1943))  :op2 (d4<op2>)  :time-of (p3<mod>))--TYPE--(mod(), op2())
(d<root> / --LEX--  :month (explicitanon15 / 2)  :day (explicitanon16 / 13))--TYPE--()
(c5<root> / --LEX--  :medium-of (d<mod>)  :ARG1-of (p2 / personal-02))--TYPE--(mod())
(o<root> / --LEX--  :ARG2 (e3<s>)  :ARG1 (a3<o>)  :manner-of (d2<mod>))--TYPE--(mod(), o(), s(s_UNIFY_o()))
(explicitanon10<root> / 2  :month-of (d / date-entity  :day (explicitanon9 / 4)  :year (explicitanon11 / --LEX--)  :time-of (s<mod>)))--TYPE--(mod())
(a<root> / --LEX--  :op1 (f<op1>)  :op2 (w<op2>)  :condition-of (p3<mod>))--TYPE--(mod(), op1(o_UNIFY_o()), op2(o_UNIFY_o()))
(h<root> / --LEX--  :ARG2 (p3<o2>)  :ARG1 (a<o>)  :ARG0 (y<s>)  :time-of (e<mod>))--TYPE--(mod(), o(s_UNIFY_o2()), o2(), s())
(n2<root> / --LEX--  :name-of (m2 / military  :topic-of (s2<mod>)))--TYPE--(mod())
(t3<root> / thing  :name (n6 / --LEX--)  :medium-of (c2<mod>))--TYPE--(mod())
(t2<root> / temporal-quantity  :quant (explicitanon0 / --LEX--)  :compared-to-of (o<mod>))--TYPE--(mod())
(d2<root> / distance-quantity  :quant (explicitanon5 / --LEX--)  :quant-of (r / relative-position  :location-of (s2<mod>)))--TYPE--(mod())
(p3<root> / --LEX--  :ARG1 (o<mod>  :compared-to p3))--TYPE--(mod())
(t2<root> / temporal-quantity  :unit (y2 / --LEX--)  :ARG2-of (r2 / rate-entity-91  :ARG1 (m2<s>)  :mod-of (s<mod>)))--TYPE--(mod(), s())
(c4<root> / country  :name (n / --LEX--  :op1 (explicitanon1<op1>)  :op2 (explicitanon2<op2>)))--TYPE--(op1(), op2())
(d6<root> / date-entity  :century (explicitanon4 / --LEX--)  :time-of (c4<mod>))--TYPE--(mod())
(v2<root> / --LEX--  :ARG1 (a3<s>)  :ARG2 (t3<o>)  :ARG1-of (g3 / gross-03))--TYPE--(o(), s())
(t<root> / temporal-quantity  :unit (y / --LEX--)  :op1-of (m2 / multiple  :quant-of (m / more  :degree-of (l<mod>))))--TYPE--(mod())
(a6<root> / --LEX--  :op2 (d<op2>)  :topic-of (p3<mod>))--TYPE--(mod(), op2())
(a2<root> / --LEX--  :op3 (c5<op3>)  :op6 (s3<op6>)  :op5 (g<op5>)  :op2 (s<op2>)  :op4 (i2<op4>)  :op1 (c<op1>)  :consist (h<mod>))--TYPE--(mod(), op1(), op2(), op3(), op4(), op5(), op6())
(s<root> / --LEX--  :ARG2 (c3<s>)  :ARG3 (a3<o3>)  :ARG0 (c2<o2>)  :ARG1 (a2<o>))--TYPE--(o(), o2(), o3(), s())
(m<root> / monetary-quantity  :consist (d3<mod>)  :unit (d2 / --LEX--))--TYPE--(mod())
(e<root> / --LEX--  :polarity (explicitanon5 / -)  :polarity (explicitanon6 / -))--TYPE--()
(n3<root> / --LEX--  :name-of (m2 / magazine  :mod-of (g2<mod>)))--TYPE--(mod())
(s<root> / --LEX--  :ARG1 (t2 / thing  :op2 (l<op2>)  :mod-of (a6<mod>)))--TYPE--(mod(), op2())
(g<root> / government-organization  :concession-of (f3<mod>)  :ARG0-of (g2 / --LEX--))--TYPE--(mod())
(m<root> / monetary-quantity  :unit (d / --LEX--)  :ARG1-of (r / rate-entity-91  :ARG2 (t<s>)))--TYPE--(s())
(w<root> / --LEX--  :ARG1 (s3<s>)  :ARG2 (p6<o2>)  :ARG0 (p5<o>)  :purpose-of (m<mod>))--TYPE--(mod(), o(), o2(), s(s_UNIFY_o2()))
(f<root> / --LEX--  :domain (i<dom>)  :poss (p2<poss>)  :concession-of (l<mod>))--TYPE--(dom(s_UNIFY_mod()), mod(), poss())
(v<root> / vehicle  :poss (m2<poss>)  :name (n / --LEX--))--TYPE--(poss())
(v2<root> / vehicle  :name (n3 / --LEX--)  :compared-to-of (a<mod>))--TYPE--(mod())
(p3<root> / product  :name (n7 / --LEX--)  :condition-of (h2<mod>))--TYPE--(mod())
(n6<root> / --LEX--  :name-of (t3 / thing  :poss (c3<poss>)  :purpose-of (l<mod>)))--TYPE--(mod(), poss())
(o4<root> / organization  :name (n8 / --LEX--)  :manner-of (l<mod>))--TYPE--(mod())
(f7<root> / facility  :name (n5 / --LEX--)  :mod-of (h<mod>))--TYPE--(mod())
(d2<root> / date-entity  :unit (m2 / --LEX--))--TYPE--()
(s4<root> / --LEX--  :ARG1 (p6<s>)  :ARG0 (y / you)  :mode (explicitanon14 / imperative)  :mod-of (t<mod>))--TYPE--(mod(), s())
(s2<root> / --LEX--  :op1 (l<op1>  :op2-of s2)  :mod-of (s<mod>))--TYPE--(mod(), op1())
(d<root> / --LEX--  :ARG2 (m4<o>)  :ARG0 (p<s>)  :time-of (o<mod>))--TYPE--(mod(), o(), s(mod_UNIFY_mod()))
(t2<root> / thing  :ARG1-of (i / --LEX--  :ARG2 (t3 / thing)  :ARG3 (n6<s>)))--TYPE--(s())
(n4<root> / --LEX--  :name-of (m8 / market-sector  :location-of (s8<mod>)))--TYPE--(mod())
(d4<root> / --LEX--  :ARG1 (d5<s>)  :ARG4 (c8<o>)  :manner-of (d3<mod>))--TYPE--(mod(), o(), s())
(l<root> / --LEX--  :degree (m / more  :op1 (t<op1>)))--TYPE--(op1())
(g<root> / government-organization  :poss (c<poss>)  :name (n / --LEX--)  :source-of (s2<mod>))--TYPE--(mod(), poss())
(d4<root> / democrat  :quant (explicitanon7 / --LEX--))--TYPE--()
(b<root> / --LEX--  :ARG1-of (p3 / possible-01  :polarity (explicitanon5 / -)  :degree-of (p2<mod>)))--TYPE--(mod())
(g<root> / --LEX--  :ARG1 (p6<s>)  :ARG4 (r5<o2>)  :ARG3 (t8<o>))--TYPE--(o(s_UNIFY_s()), o2(s_UNIFY_s()), s())
(m<root> / --LEX--  :snt1 (h5<snt1>)  :snt6 (w4<snt6>)  :snt11 (p10<snt11>)  :snt3 (p3<snt3>)  :snt5 (a3<snt5>)  :snt2 (a<snt2>)  :snt8 (a10<snt8>)  :snt9 (b2<snt9>)  :snt4 (p6<snt4>)  :snt10 (p5<snt10>)  :snt7 (c3<snt7>))--TYPE--(snt1(), snt10(), snt11(), snt2(), snt3(), snt4(), snt5(), snt6(), snt7(), snt8(), snt9())
(h9<root> / have-rel-role-91  :ARG2 (f4 / --LEX--)  :ARG0 (i7 / i))--TYPE--()
(a<root> / --LEX--  :op12 (c12<op12>)  :op6 (c6<op6>)  :op2 (c2<op2>)  :op7 (c7<op7>)  :op3 (c3<op3>)  :op13 (c13<op13>)  :op10 (c10<op10>)  :op8 (c8<op8>)  :op14 (c14<op14>)  :op4 (c4<op4>)  :op11 (c11<op11>)  :op15 (o<op15>)  :op9 (c9<op9>)  :op1 (c<op1>)  :op5 (c5<op5>))--TYPE--(op1(), op10(), op11(), op12(), op13(), op14(), op15(), op2(), op3(), op4(), op5(), op6(), op7(), op8(), op9())
(m<root> / --LEX--  :snt2 (c<snt2>)  :snt5 (r7<snt5>)  :snt4 (s5<snt4>)  :snt3 (a3<snt3>)  :snt6 (a4<snt6>)  :snt9 (c8<snt9>)  :snt1 (r<snt1>)  :snt7 (d3<snt7>)  :snt8 (c6<snt8>)  :snt10 (c11<snt10>))--TYPE--(snt1(), snt10(), snt2(), snt3(), snt4(), snt5(), snt6(), snt7(), snt8(), snt9())
(s<root> / sea  :name (n3 / --LEX--)  :mod-of (n2<mod>))--TYPE--(mod())
(r<root> / --LEX--  :ARG5 (p3<o2>)  :ARG1 (s<o>)  :ARG0 (p<s>))--TYPE--(o(poss_UNIFY_o2()), o2(), s())
(l<root> / --LEX--  :poss (w<poss>)  :degree (m / most)  :mod-of (p<mod>))--TYPE--(mod(), poss())
(b<root> / --LEX--  :quant-of (r / relative-position  :location-of (a<mod>)))--TYPE--(mod())
(d<root> / --LEX--  :ARG2 (t<s>)  :concession-of (h<mod>))--TYPE--(mod(s_UNIFY_s()), s())
(explicitanon1<root> / Democratic  :op1-of (n2 / --LEX--  :op2 (explicitanon2<op2>)  :name-of (p<mod>)))--TYPE--(mod(), op2())
(f<root> / --LEX--  :ARG2-of (h / have-rel-role-91  :ARG0 (s2<o>)  :ARG1 (i<s>)  :condition-of (d<mod>)))--TYPE--(mod(), o(), s())
(d<root> / --LEX--  :ARG0 (y<o>  :ARG2-of d)  :ARG3 (w2<o3>)  :ARG1 (w<s>))--TYPE--(o(), o3(s_UNIFY_o()), s())
(s<root> / --LEX--  :ARG0 (t / thing  :medium-of (a<mod>)))--TYPE--(mod())
(m2<root> / mass-quantity  :quant (explicitanon1 / --LEX--)  :mod-of (m<mod>))--TYPE--(mod())
(p3<root> / --LEX--  :ARG1 (p<s>)  :ARG4 (r<o>)  :concession-of (c<mod>))--TYPE--(mod(), o(), s())
(a<root> / --LEX--  :ARG0 (l2<s>)  :ARG1 (a2<o>)  :concession-of (a3<mod>))--TYPE--(mod(s_UNIFY_o()), o(), s())
(r<root> / --LEX--  :ARG0 (y<s>)  :ARG1 (g<o>)  :ARG2 (b<o2>)  :condition-of (l2<mod>))--TYPE--(mod(s_UNIFY_s()), o(), o2(), s())
(a<root> / --LEX--  :op1 (f2<op1>)  :time-of (f<mod>))--TYPE--(mod(), op1(s_UNIFY_mod()))
(n3<root> / --LEX--  :name-of (o / organization  :prep-with-of (r<mod>)))--TYPE--(mod())
(n<root> / --LEX--  :name-of (s2 / ship  :source-of (e<mod>)))--TYPE--(mod())
(explicitanon0<root> / 1000000000  :quant-of (m2 / monetary-quantity  :unit (d / --LEX--)  :op1-of (m3 / multiple  :quant-of (t<mod>))))--TYPE--(mod())
(explicitanon2<root> / -  :polarity-of (m / --LEX--  :ARG1 (p<s>)  :purpose-of (r<mod>)))--TYPE--(mod(), s())
(d<root> / division  :name (c3 / --LEX--)  :part-of (c<poss>))--TYPE--(poss())
(p4<root> / product  :name (k / --LEX--)  :purpose-of (p3<mod>))--TYPE--(mod())
(r<root> / --LEX--  :consist (n<mod>)  :ARG2 (c2<o2>)  :ARG1 (e<o>)  :ARG0 (c<s>))--TYPE--(mod(), o(), o2(), s())
(c2<root> / --LEX--  :ARG1 (r2<o>)  :topic-of (r<mod>))--TYPE--(mod(), o(s_UNIFY_s()))
(t<root> / temporal-quantity  :unit (y / --LEX--)  :ARG2-of (r2 / rate-entity-91  :ARG1 (a<s>)  :quant-of (r<mod>)))--TYPE--(mod(), s())
(r<root> / --LEX--  :ARG2 (c4<o>)  :ARG1 (s<s>)  :time-of (c3<mod>))--TYPE--(mod(), o(), s(mod_UNIFY_mod()))
(v<root> / --LEX--  :ARG0 (p<s>)  :ARG1 (c<o>)  :purpose-of (a<mod>))--TYPE--(mod(), o(mod_UNIFY_mod()), s())
(s<root> / --LEX--  :ARG2 (o2<o2>)  :ARG1 (a2<o>)  :ARG0 (a<s>)  :subevent-of (s4<mod>))--TYPE--(mod(poss_UNIFY_s()), o(), o2(), s())
(e<root> / event  :name (n / --LEX--)  :source-of (a<mod>))--TYPE--(mod())
(c3<root> / country  :name (n4 / --LEX--)  :prep-from-of (a<mod>))--TYPE--(mod())
(m<root> / magazine  :name (n / --LEX--)  :part-of (c2<poss>)  :source-of (p4<mod>))--TYPE--(mod(), poss())
(n2<root> / nation  :ARG0-of (h / have-org-role-91  :ARG2 (m / --LEX--)  :ARG1 (o<s>)))--TYPE--(s())
(g2<root> / --LEX--  :ARG0 (g5 / government-organization  :mod-of (d<mod>)))--TYPE--(mod())
(m2<root> / military  :name (n4 / --LEX--)  :source-of (u<mod>))--TYPE--(mod())
(c5<root> / conglomerate  :name (c / --LEX--))--TYPE--()
(g<root> / gulf  :name (n / --LEX--)  :location-of (c<mod>))--TYPE--(mod())
(r<root> / restrain-01  :quant (a2 / --LEX--))--TYPE--()
(p2<root> / person  :ARG0-of (c5 / --LEX--  :ARG2 (a<s>)  :mod-of (a2<mod>)))--TYPE--(mod(), s())
(d<root> / --LEX--  :unit (i2 / inch)  :mod-of (w<mod>))--TYPE--(mod())
(t<root> / temporal-quantity  :unit (d / --LEX--)  :prep-in-of (r<mod>))--TYPE--(mod())
(w<root> / world-region  :name (n2 / --LEX--)  :part-of (w2<poss>)  :location-of (c<mod>))--TYPE--(mod(), poss())
(n4<root> / --LEX--  :name-of (c2 / class  :mod-of (s<mod>)))--TYPE--(mod())
(h5<root> / have-rel-role-91  :ARG2 (f2 / --LEX--)  :ARG0 (a3 / and  :op2 (p3<op2>)  :op1 (c<op1>)  :accompanier-of (s<mod>)))--TYPE--(mod(), op1(), op2())
(j<root> / journal  :name (n / --LEX--)  :location-of (a<mod>))--TYPE--(mod())
(n4<root> / --LEX--  :name-of (c2 / criminal-organization  :prep-against-of (t<mod>)))--TYPE--(mod())
(f2<root> / facility  :name (n / --LEX--)  :part-of (o2<poss>))--TYPE--(poss())
(c<root> / comet  :name (n6 / --LEX--))--TYPE--()
(t<root> / temporal-quantity  :unit (d / --LEX--)  :domain (p<dom>))--TYPE--(dom())
(explicitanon3<root> / --LEX--  :quant-of (d2 / distance-quantity  :mod-of (p2<mod>)))--TYPE--(mod())
(f<root> / --LEX--  :mod-of (t<mod>)  :ARG1-of (t2 / thin-03))--TYPE--(mod())
(n5<root> / --LEX--  :name-of (c2 / country  :prep-for-of (s2<mod>)))--TYPE--(mod())
(p2<root> / person  :destination-of (r<mod>)  :ARG0-of (i / --LEX--))--TYPE--(mod())
(w<root> / --LEX--  :ARG2 (p5<s>)  :consist (d<mod>)  :ARG1 (a3<o>))--TYPE--(mod(), o(), s())
(b2<root> / --LEX--  :ARG1 (a<o>)  :ARG0 (p / person)  :ARG2 (c5<s>))--TYPE--(o(), s())
(w<root> / --LEX--  :ARG4 (o<o2>)  :ARG1 (e<o>)  :ARG0 (a<s>))--TYPE--(o(s_UNIFY_o2()), o2(), s())
(i<root> / --LEX--  :ARG3 (s3<s>)  :ARG1 (b<o>  :ARG2-of i))--TYPE--(o(), s())
(t3<root> / temporal-quantity  :unit (w / --LEX--)  :ARG3-of (r / rate-entity-91  :mod-of (m4<mod>)))--TYPE--(mod())
(r2<root> / research-institute  :name (n7 / --LEX--)  :mod-of (p2<mod>))--TYPE--(mod())
(f<root> / --LEX--  :ARG0 (t / thing)  :ARG2 (i<s>))--TYPE--(s())
(s4<root> / star  :name (n4 / --LEX--)  :mod-of (s3<mod>))--TYPE--(mod())
(c<root> / city  :name (n4 / --LEX--)  :prep-toward-of (p3<mod>))--TYPE--(mod())
